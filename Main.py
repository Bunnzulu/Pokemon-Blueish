import pygame,sys,json,random
from Player import Player,Key_Items
from Kanto import Kanto
from Stage import StageHandler
from Pokemon import Pokemon,Two_D_ListCheck,Get_Stone,Pokemon_Move_Type,Pokemon_Max_Move_PP
from PokemonTMS import Get_TM
from PlayerMap import Map

pygame.init()
SCREEN = pygame.display.set_mode((800,800))
pygame.display.set_caption('Pokemon Blueish')
clock = pygame.time.Clock()

class Main:
    def __init__(self):
        self.Kanto = Kanto()
        self.PlayerMap = Map()
        self.PlayerName = ''
        self.TrainerSeen = False
        self.State_of_Battle = "Win"
        self.NPCTrainerBattle = False
        self.RivalName = ''
        self.Barriers = self.Kanto.OverworldBarriers
        self.Camera = self.Kanto.OverworldCamera
        self.Player_group = pygame.sprite.GroupSingle()
        self.Player_Data = {}
        self.Events = StageHandler()
        self.Player = Player((self.Player_group,self.Camera))
        self.Player_Pause = False
        self.Readable = False
        self.BattleYes = False
        self.BattleNo = False
        self.HomePC = False
        self.Pc = False
        self.Draw_Player = True
        self.PCOptions = pygame.Rect(0,0,339,492)
        self.ItemPcOption1_Rect,self.ItemPcOption1_Text,self.ItemPcOption1_Text_Rect = self.Make_Option_Button(pygame.Rect(0,0,self.PCOptions.width,100),"Withdraw Item")
        self.ItemPcOption2_Rect,self.ItemPcOption2_Text,self.ItemPcOption2_Text_Rect = self.Make_Option_Button(pygame.Rect(0,146,self.PCOptions.width,100),"Deposit Item")
        self.ItemPcOption3_Rect,self.ItemPcOption3_Text,self.ItemPcOption3_Text_Rect = self.Make_Option_Button(pygame.Rect(0,270,self.PCOptions.width,100),"Toss Item")
        self.Back_Rect,self.Back_Text,self.Back_Text_Rect = self.Make_Option_Button(pygame.Rect(0,369,self.PCOptions.width,100),"Back")
        self.ItemPcOption1:bool = False
        self.ItemPcOption2:bool = False
        self.ItemPcOption3:bool = False
        self.MenuBar = pygame.Rect(600,0,200,SCREEN.get_height())
        self.MenuOption1_Rect,self.MenuOption1_Text,self.MenuOption1_Text_Rect = self.Make_Option_Button(pygame.Rect(600,0,self.MenuBar.width,100),"Pokemon")
        self.MenuOption2_Rect,self.MenuOption2_Text,self.MenuOption2_Text_Rect = self.Make_Option_Button(pygame.Rect(600,160,self.MenuBar.width,100),"Bag")
        self.MenuOption3_Rect,self.MenuOption3_Text,self.MenuOption3_Text_Rect = self.Make_Option_Button(pygame.Rect(600,320,self.MenuBar.width,100),"Player")
        self.MenuOption4_Rect,self.MenuOption4_Text,self.MenuOption4_Text_Rect = self.Make_Option_Button(pygame.Rect(600,480,self.MenuBar.width,100),"Save")
        self.MenuOption5_Rect,self.MenuOption5_Text,self.MenuOption5_Text_Rect = self.Make_Option_Button(pygame.Rect(600,640,self.MenuBar.width,100),"Exit")
        self.MenuOption1 = False
        self.MenuOption2 = False
        self.MenuOption3 = False
        self.MenuOption4 = False
        self.MenuOption5 = False
        self.ExitMenu = False
        self.ExitPC = False
        self.Clicked = False
        self.PC_Items = []
        self.PCMMoney = False
        self.Bag = []
        self.Badges = []
        self.Back = False
        self.ItemTaker = 1
        self.x1ButtonColor = "Red"
        self.x5ButtonColor = "cornsilk1"
        self.x10ButtonColor = "cornsilk1"
        self.Yes = False
        self.DialougePause = False
        self.Yes_rect = pygame.Rect(self.Events.TextBox.width//2 - 60,self.Events.TextBox.centery,50,50)
        self.Yes_text = self.Events.Game_font.render("Yes",True,"Green")
        self.Yes_text_rect = self.Yes_text.get_rect(center = self.Yes_rect.center)
        self.No = False
        self.No_rect = pygame.Rect(self.Events.TextBox.width//2 + 60,self.Events.TextBox.centery,50,50)
        self.No_text = self.Events.Game_font.render("No",True,"Red")
        self.No_text_rect = self.Yes_text.get_rect(center = self.No_rect.center)
        self.BagTitle =  self.Events.Game_Font2.render(f"{self.PlayerName}'s Bag",True,"Black")
        self.BagTitle_rect = self.BagTitle.get_rect(topleft = (0,0))
        self.Opponents_Pokemon = Pokemon("Squirtle",1,["-",'-','-','-'],"Wild","Squirt")
        self.Opponents_Pokemon.HP = 0
        self.BattlePlayerPoke = Pokemon("Squirtle",1,["-",'-','-','-'],"Wild","Squirt")
        self.BattlePlayerPoke.HP = 0
        self.BattleStart = False
        self.pre_NickName = False
        self.Pokemon1_Rect,self.Pokemon1_Text,self.Pokemon1_Text_Rect = self.Make_Option_Button(pygame.Rect(0,0,800,80),'')
        self.Pokemon2_Rect,self.Pokemon2_Text,self.Pokemon2_Text_Rect = self.Make_Option_Button(pygame.Rect(0,100,800,80),'')
        self.Pokemon3_Rect,self.Pokemon3_Text,self.Pokemon3_Text_Rect = self.Make_Option_Button(pygame.Rect(0,200,800,80),'')
        self.Pokemon4_Rect,self.Pokemon4_Text,self.Pokemon4_Text_Rect = self.Make_Option_Button(pygame.Rect(0,300,800,80),'')
        self.Pokemon5_Rect,self.Pokemon5_Text,self.Pokemon5_Text_Rect = self.Make_Option_Button(pygame.Rect(0,400,800,80),'')
        self.Pokemon6_Rect,self.Pokemon6_Text,self.Pokemon6_Text_Rect = self.Make_Option_Button(pygame.Rect(0,500,800,80),'')
        self.Pokemon_Menu_Instrution_rect = pygame.Rect(0,600,SCREEN.get_width(),200)
        self.Pokemon_Menu_Text = "Choose a Pokemon - BackSpace to Leave"
        self.Pokemon_Menu_Text_surf= self.Events.Game_Font2.render(self.Pokemon_Menu_Text,True,"Black")
        self.Pokemon_Menu_Text_rect = self.Pokemon_Menu_Text_surf.get_rect(topleft = self.Pokemon_Menu_Instrution_rect.topleft)
        self.Pokemon1 = False
        self.Pokemon2 = False
        self.Pokemon3 = False
        self.Pokemon4 = False
        self.Pokemon5 = False
        self.Pokemon6 = False
        self.Pokemon1switch = False
        self.Pokemon2switch = False
        self.Pokemon3switch = False
        self.Pokemon4switch = False
        self.Pokemon5switch = False
        self.Pokemon6switch = False
        self.MiniMenu = pygame.Rect(650,680,150,120)
        self.Switch,self.Info = False,False
        self.Stats,self.Moves = True,False
        self.RivalPokemon = []
        self.Black_Screen = pygame.Rect(-1000,0,SCREEN.get_width(),SCREEN.get_height())
        self.BattleBox = pygame.Rect(0,450,800,350)
        self.Player_Back = pygame.image.load(r'Trainer_imgs\Player_Back.png').convert_alpha()
        self.Player_Back = pygame.transform.rotozoom(self.Player_Back,360,1/2)
        self.Player_Back_rect = self.Player_Back.get_rect(topleft = (55, 230))
        Bally = 370
        OBally = 50
        self.PlayerPokeBallscenter = [(480,Bally),(510,Bally),(540,Bally),(570,Bally),(600,Bally),(630,Bally)]
        self.OPokeBallscenter = [(277,OBally),(247,OBally),(217,OBally),(187,OBally),(157,OBally),(127,OBally)]
        self.Fight_Rect,self.Fight_Text,self.Fight_Text_Rect = self.Make_Option_Button(pygame.Rect(420,455,120,50),"FIGHT")
        self.BattleItems_Rect,self.BattleItems_Text,self.BattleItems_Text_Rect = self.Make_Option_Button(pygame.Rect(420,745,120,50),"ITEM")
        self.BattlePokemon_Rect,self.BattlePokemon_Text,self.BattlePokemon_Text_Rect = self.Make_Option_Button(pygame.Rect(675,455,120,50),"PKMN")
        self.Run_Rect,self.Run_Text,self.Run_Text_Rect = self.Make_Option_Button(pygame.Rect(675,745,120,50),"RUN")
        self.Fight,self.BattlePokemon,self.BattleItems,self.Run = False,False,False,False
        self.UMove1_Rect,self.UMove1_Text,self.UMove1_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,self.BattleBox.y + 5),(150,100)),'')
        self.UMove2_Rect,self.UMove2_Text,self.UMove2_Text_Rect = self.Make_Option_Button(pygame.Rect((258,self.BattleBox.y + 5),(150,100)),'')
        self.UMove3_Rect,self.UMove3_Text,self.UMove3_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,695),(150,100)),'')
        self.UMove4_Rect,self.UMove4_Text,self.UMove4_Text_Rect = self.Make_Option_Button(pygame.Rect((258,695),(150,100)),'')
        self.FightBack_Rect,self.FightBack_Text,self.FightBack_Text_Rect = self.Make_Option_Button(pygame.Rect(414,700,100,50),"Back")
        self.MoveType = self.Events.Game_font.render("",True,"Black")
        self.MoveType_rect = self.MoveType.get_rect(topleft = (519,556))
        self.MovePP = self.Events.Game_font.render("",True,"Black")
        self.MovePP_rect = self.MovePP.get_rect(topleft = (519,600))
        self.ExitBattle = False
        self.Healing_Item = ["Potion",False]
        self.WildBattle = False
        self.Healplace = ["OverWorld",self.Kanto.PLayerHouseOSpawn]
        self.Pokemon_Seen = []
        self.Pokemon_Caught = []
        self.Bagrects = []
        self.GiverNPCCheck = False
        self.PCMakerName = "Someone"
        self.PCOption1_rect,self.PCOption1_Text,self.PCOption1_Text_Rect = self.Make_Option_Button(pygame.Rect(0,0,self.PCOptions.width,100),f"{self.PCMakerName}'s PC")
        self.PCOption2_rect,self.PCOption2_Text,self.PCOption2_Text_Rect = self.Make_Option_Button(pygame.Rect(0,164,self.PCOptions.width,100),f"{self.PlayerName}'s PC")
        self.PCOption3_rect,self.PCOption3_Text,self.PCOption3_Text_Rect = self.Make_Option_Button(pygame.Rect(0,328,self.PCOptions.width,100),"Log off")
        self.PCOption1 = False
        self.PCOption2 = False
        self.BillPCOption1_rect,self.BillPCOption1_Text,self.BillPCOption1_Text_rect = self.Make_Option_Button(pygame.Rect(0,0,self.PCOptions.width,100),"Withdraw PKMN")
        self.BillPCOption2_rect,self.BillPCOption2_Text,self.BillPCOption2_Text_rect = self.Make_Option_Button(pygame.Rect(0,123,self.PCOptions.width,100),"Deposit PKMN")
        self.BillPCOption3_rect,self.BillPCOption3_Text,self.BillPCOption3_Text_rect = self.Make_Option_Button(pygame.Rect(0,246,self.PCOptions.width,100),"Release PKMN")
        self.BillPCOption4_rect,self.BillPCOption4_Text,self.BillPCOption4_Text_rect = self.Make_Option_Button(pygame.Rect(0,369,self.PCOptions.width,100),"See Ya!")
        self.BillPCOption1 = False
        self.BillPCOption2 = False
        self.BillPCOption3 = False
        self.PokeDexIndex = 0
        self.PokeDexNext_rect,self.PokeDexNext_Text,self.PokeDexNext_Text_rect = self.Make_Option_Button(pygame.Rect(700,0,100,100),"Next")
        self.PokeDexPrev_rect,self.PokeDexPrev_Text,self.PokeDexPrev_Text_rect = self.Make_Option_Button(pygame.Rect(0,0,100,100),"Prev")
        self.PokeDexBack_rect,self.PokeDexBack_Text,self.PokeDexBack_Text_rect = self.Make_Option_Button(pygame.Rect(280,600,100,100),"Back")
        self.Buy_Rect,self.Buy_Text,self.Buy_Text_rect = self.Make_Option_Button(pygame.Rect(0,0,100,100),"Buy")
        self.Sell_Rect,self.Sell_Text,self.Sell_Text_rect = self.Make_Option_Button(pygame.Rect(700,0,100,100),"Sell")
        self.PlayerMapDisplay = False
        self.Player_NP = Pokemon("Squirtle",1,["-",'-','-','-'],"Wild","Squirt")
        self.Player_NP.HP = 0
        self.MapBack_rect,self.MapBack_Text,self.MapBack_Text_rect = self.Make_Option_Button(pygame.Rect(0,700,100,100),"Back")
        self.PCNext_rect,self.PCNext_Text,self.PCNext_Text_Rect = self.Make_Option_Button(pygame.Rect(0,0,100,100),"Next")
        self.PCPrev_rect,self.PCPrev_Text,self.PCPrev_Text_Rect = self.Make_Option_Button(pygame.Rect(700,0,100,100),"Prev")
        self.Buy,self.Sell = True,False
        self.Catching = [False,"Ball"]
        self.SwitchedPokemon = [0,'0']
        self.Player_Turn = [1,"None"]
        self.OtherTrainers = [self.Kanto.ViridainForestTrainers,self.Kanto.PewterGymTrainers,self.Kanto.OverworldTrainers,self.Kanto.MtMoonF1Trainers,self.Kanto.MtMoonF3Trainers,self.Kanto.CeruleanGymTrainers,self.Kanto.SS_AnneF1RoomsTrainers,self.Kanto.SS_AnneF0RoomsTrainers,self.Kanto.SS_AnneF3Trainers,self.Kanto.SS_AnneF2RoomsTrainers,self.Kanto.VermilionGymTrainers,
                              self.Kanto.Rock_TunnelF1Trainers,self.Kanto.Rock_TunnelF2Trainers,self.Kanto.CeladonGymTrainers,self.Kanto.RocketBaseF1Trainers,self.Kanto.RocketBaseF2Trainers,self.Kanto.RocketBaseF3Trainers,self.Kanto.RocketBaseF4Trainers,self.Kanto.PokeTowerF3Trainers,self.Kanto.PokeTowerF4Trainers,self.Kanto.PokeTowerF5Trainers,self.Kanto.PokeTowerF6Trainers,
                              self.Kanto.PokeTowerF7Trainers,self.Kanto.FCGymTrainers,self.Kanto.Fighting_DojoTrainers,self.Kanto.Silph_CoF2Trainers,self.Kanto.Silph_CoF3Trainers,self.Kanto.Silph_CoF4Trainers,self.Kanto.Silph_CoF5Trainers,self.Kanto.Silph_CoF6Trainers,self.Kanto.Silph_CoF7Trainers,self.Kanto.Silph_CoF8Trainers,self.Kanto.Silph_CoF9Trainers,self.Kanto.Silph_CoF10Trainers,
                              self.Kanto.Silph_CoF11Trainers,self.Kanto.SFGymTrainers,self.Kanto.Pokemon_MansionF1Trainers,self.Kanto.Pokemon_MansionF2Trainers,self.Kanto.Pokemon_MansionF3Trainers,self.Kanto.Pokemon_MansionFB1Trainers,self.Kanto.CGymTrainers,self.Kanto.VGymTrainers,self.Kanto.VRoadF1Trainers,self.Kanto.VRoadF2Trainers,self.Kanto.VRoadF3Trainers]
        self.MapItems = [self.Kanto.ViridainForestPickups,self.Kanto.OverworldPickups,self.Kanto.MtMoonF1Pickups,self.Kanto.MtMoonF3Pickups,self.Kanto.SS_AnneF1RoomsPickups,self.Kanto.SS_AnneF0RoomsPickups,self.Kanto.SS_AnneF2RoomsPickups,self.Kanto.Rocket_HideoutF1Pickups,self.Kanto.Rocket_HideoutF2Pickups,self.Kanto.Rocket_HideoutF3Pickups,self.Kanto.Rocket_HideoutF4Pickups,
        self.Kanto.Pokemon_TowerF3Pickups,self.Kanto.Pokemon_TowerF4Pickups,self.Kanto.Pokemon_TowerF5Pickups,self.Kanto.Pokemon_TowerF6Pickups,self.Kanto.Safari_ZoneMZPickups,self.Kanto.Safari_ZoneA1Pickups,self.Kanto.Safari_ZoneA2Pickups,self.Kanto.Safari_ZoneA3Pickups,self.Kanto.FCWHPickups,self.Kanto.SilCoF3Pickups,self.Kanto.SilCoF4Pickups,self.Kanto.SilCoF5Pickups,self.Kanto.SilCoF6Pickups,
        self.Kanto.SilCoF7Pickups,self.Kanto.SilCoF10Pickups,self.Kanto.Pokemon_MansionF1Pickups,self.Kanto.Pokemon_MansionF2Pickups,self.Kanto.Pokemon_MansionF3Pickups,self.Kanto.Pokemon_MansionFB1Pickups,self.Kanto.VRoadF1Pickups,self.Kanto.VRoadF2Pickups,self.Kanto.VRoadF3Pickups,self.Kanto.Power_PlantPickups,self.Kanto.FakePower_PlantPickups,self.Kanto.Cerulean_CaveF1Pickups,self.Kanto.Cerulean_CaveBFPickups,
        self.Kanto.Cerulean_CaveF2Pickups]
        self.HiddenItems = [self.Kanto.MtM3HiddenItems,self.Kanto.VFHiddenItems,self.Kanto.OverworldHiddenItems,self.Kanto.SAF0RoomsHiddenItems,self.Kanto.KitchenHiddenItems,self.Kanto.UGNSHiddenItems,self.Kanto.UGWEHiddenItems,self.Kanto.Rocket_HideoutF1HiddenItems,self.Kanto.Rocket_HideoutF3HiddenItems,self.Kanto.Rocket_HideoutF4HiddenItems,self.Kanto.SZA3HiddenItems,self.Kanto.SilCoF5HiddenItems,self.Kanto.SilCoF9HiddenItems,self.Kanto.PokeMansionF1HiddenItems,
                            self.Kanto.PokeMansionF3HiddenItems,self.Kanto.PokeMansionFB1HiddenItems,self.Kanto.VRoadF2HiddenItems,self.Kanto.Power_PlantHiddenItems,self.Kanto.SeaFoam_IslandFB2HiddenItems,self.Kanto.SeaFoam_IslandFB3HiddenItems,self.Kanto.SeaFoam_IslandFB4HiddenItems,self.Kanto.Cerulean_CaveF1HiddenItems,self.Kanto.Cerulean_CaveBFHiddenItems]
        self.GymLeaderStartText = False
        self.GymLeaderBattle = False
        self.GymLeaderGiveTM = False
        self.GiveTm = [False,""]
        self.Stat_Item = ["",False]
        self.EvoStones = ["",False]
        self.PokemonOver4Moves = Pokemon
        self.AnotherMove = False
        self.AnotherMoveGiven = False
        self.EvolvingPokemon = Pokemon
        self.PokeEvolutionStart = False
        self.EvolvingPokemonDone = False
        self.EvolvingPokemonStep1 = False
        self.EvolvingPokemonStep2 = False
        self.RepelOn = [False,"Repel",100]
        self.DCChoicePokemon = Pokemon
        self.DCDeposit = False
        self.DCWithdrawl = False
        self.DayCarePokemon = []
        self.WildPoke = Pokemon
        self.PPItems = ["",False,False]
        self.PPItemPokemon = Pokemon
        self.ChangePokeName = Pokemon
        self.ChangePokeNewName = ""
        self.ChangePokeNewName_surf = pygame.Surface
        self.ChangePokeNewName_rect = pygame.Rect
        self.FlashPrompt = False
        self.MoveDesicion = False
        self.PokeDollUsed = False
        self.UseFlash = False
        self.Safari_Steps = 10000
        self.Safari_Balls = 30
        self.E4StartText = False
        self.E4Battle = False
        self.E4Aftertext = False
        self.Index = 0
        self.E4Beaten = False
        self.F4Eevee = False
        self.F4Surf = False
        self.Load()
        self.Kanto.NPCHelix.Group.remove(self.Kanto.NPCHelix)
        self.Kanto.NPCDome.Group.remove(self.Kanto.NPCDome)
        for Items in range(len(self.MapItems)):
            for ball in self.MapItems[Items]:
                if ball.Picked:
                    self.MapItems[Items].remove(ball)
                    ball.group.remove(ball)
        if self.Kanto.FossilChosen:
            for fossil in self.Kanto.MtMoonFossils:
                self.Kanto.Mt_MoonFloor3Camera.remove(fossil)
                self.Kanto.Mt_MoonF3Barriers.remove(fossil.Rect)
  
    def Player_Draw_Control(self):
        if self.Events.Stage in ("Start","Dr.Oak talk"):
            self.Draw_Player = False
            self.Player.Moveable = False
        else:
            self.Draw_Player = True
            self.Player.Moveable = True

    def Delay(self,Time):
        pygame.display.update()
        pygame.time.delay(Time)

    def Player_Spawn(self,House:str,pos:tuple):
        self.Events.Stage = House
        self.Camera_Barriers_Control()
        self.Player.rect.center = pos

    def Save(self):
        self.Player_Data["Stage"] = self.Events.Stage 
        self.Player_Data["Name"] = self.PlayerName 
        self.Player_Data["F4Surf"] = self.F4Surf
        self.Player_Data["Safari Steps"] = self.Safari_Steps 
        self.Player_Data["SilCoGioDone"] = self.Events.SilCoGioDone
        self.Player_Data["E4Beaten"] = self.E4Beaten
        self.Player_Data["CESnorlax"] = self.Events.CESnorlaxAwake
        self.Player_Data["VCSnorlax"] = self.Events.VCSnorlaxAwake
        self.Player_Data["GCRocketEncounter"] = self.Events.GCRocketEncounter
        self.Player_Data["PokeTowerRivalFightDone"] = self.Events.PokeTowerRivalFightDone
        self.Player_Data["SilCoLapras"] = self.Events.SilCoLapras
        self.Player_Data["Badges"] = self.Player.Badges
        self.Player_Data["CFightDone"] = self.Events.CFightDone
        self.Player_Data["OakinLab"] = self.Events.OakinLab
        self.Player_Data["BPLRivalFightDone"] = self.Events.BPLRivalFightDone
        self.Player_Data["ExpALLGet"] = self.Events.ExpALLGet
        self.Player_Data["Fighting_DojoFight"] = self.Events.Fighting_DojoFightDone
        self.Player_Data["Fighting_DojoPokePick"] = self.Events.Fighting_DojoPokePick
        self.Player_Data["Fighting_DojoPokemon"] = self.Events.Fighting_DojoPokemon
        self.Player_Data["Fighting_DojoPokePickDone"] = self.Events.Fighting_DojoPokePickDone
        self.Player_Data["MrFujiSaved"] = self.Events.Mr_FujiSaved
        self.Player_Data["PokeTowerGhost"] = self.Events.PokeTowerGhost
        self.Player_Data["FlyLocations"] = self.PlayerMap.FlyLocations
        self.Player_Data["SSTicketCheck"] = self.Events.SSTicketCheck
        self.Player_Data["SilCoRivalBattleDone"] = self.Events.SilCoRivalBattleDone
        self.Player_Data["CCRivalFightDone"] = self.Events.CCRivalFightDone
        self.Player_Data["CCRocketFightDone"] = self.Events.CCRocketFightDone
        self.Player_Data["RBaseGiovanni"] = self.Events.RBaseGiovanniEncounter
        self.Player_Data["HaveBike"] = self.Events.HaveBike
        self.Player_Data["Moltres"] = self.Events.Moltres
        self.Player_Data["Zapdos"] = self.Events.Zapdos
        self.Player_Data["Articuno"] = self.Events.Articuno
        self.Player_Data["Mewtwo"] = self.Events.Mewtwo
        self.Player_Data["LastHealPlace"] = self.Healplace
        self.Player_Data["F4Eevee"] = self.F4Eevee
        self.Player_Data["RoofTopGirl"] = [self.Events.GirlGotWater,self.Events.GirlGotLemons,self.Events.GirlGotPop]
        self.Player_Data["FossilChosen"] = self.Kanto.FossilChosen
        self.Player_Data["NBRocketEncounter"] = self.Events.NBRocketEncounter
        self.Player_Data["SSTicketGot"] = self.Events.SSTicketGot
        self.Player_Data["SSRivalBattleDone"] = self.Events.SSRivalBattleDone
        self.Player_Data["SSCaptain"] = self.Events.SSCaptainDone
        self.Player_Data["Playercoins"] = self.Player.Coins
        for TI,Trainers in enumerate(self.OtherTrainers):
            for x,trainer in enumerate(Trainers):
                self.Player_Data[f"OtherTrainers{TI}{x}"] = trainer.Battled
        for BI,Balls in enumerate(self.MapItems):
            for x,ball in enumerate(Balls):
                self.Player_Data[f"MapItems{BI}{x}"] = [ball.Picked,ball.Item]
        for TI,Trader in enumerate(self.Kanto.Traders):
            self.Player_Data[f"Traders{TI}{Trader}"] = Trader.Traded
        for HI,Balls in enumerate(self.HiddenItems):
            for x,ball in enumerate(Balls):
                self.Player_Data[f"HiddenItems{HI}{x}"] = [ball.Picked,ball.Item]
        self.Player_Data["RivalName"] = self.RivalName 
        self.Player_Data["GuardDrinkGiven"] = self.Events.GuardDrinkGiven
        self.Player_Data["ItemFinder"] = self.Events.ItemFinderGet
        try:
            self.Player_Data["DayCarePokemonStartLV"] = self.DayCarePokemon[0][1]
            self.Player_Data["DayCarePokemonOwner"] = self.DayCarePokemon[0][0].Trainer
            self.Player_Data[f"DayCarePokemonName"] = self.DayCarePokemon[0][0].Name
            self.Player_Data[f"DayCarePokemonNickname"] = self.DayCarePokemon[0][0].NickName
            self.Player_Data[f"DayCarePokemonLV"] = self.DayCarePokemon[0][0].Level
            self.Player_Data[f"DayCarePokemonDied"] = self.DayCarePokemon[0][0].Died
            self.Player_Data[f"DayCarePokemonMoves"] = self.DayCarePokemon[0][0].Moves
            self.Player_Data[f"DayCarePokemonMove1pp"] = self.DayCarePokemon[0][0].Move1pp
            self.Player_Data[f"DayCarePokemonMove1Maxpp"] = self.DayCarePokemon[0][0].MaxMove1pp
            self.Player_Data[f"DayCarePokemonMove2pp"] = self.DayCarePokemon[0][0].Move2pp
            self.Player_Data[f"DayCarePokemonMove2Maxpp"] = self.DayCarePokemon[0][0].MaxMove2pp
            self.Player_Data[f"DayCarePokemonMove3pp"] = self.DayCarePokemon[0][0].Move3pp
            self.Player_Data[f"DayCarePokemonMove3Maxpp"] = self.DayCarePokemon[0][0].MaxMove3pp
            self.Player_Data[f"DayCarePokemonMove4pp"] = self.DayCarePokemon[0][0].Move4pp
            self.Player_Data[f"DayCarePokemonMove4Maxpp"] = self.DayCarePokemon[0][0].MaxMove4pp
            self.Player_Data[f"DayCarePokemonDVHP"] = self.DayCarePokemon[0][0].DVHP
            self.Player_Data[f"DayCarePokemonDVAtk"] = self.DayCarePokemon[0][0].DVAtk
            self.Player_Data[f"DayCarePokemonDVDEF"] = self.DayCarePokemon[0][0].DVDEF
            self.Player_Data[f"DayCarePokemonDVSPECIAL"] = self.DayCarePokemon[0][0].DVSPECIAL
            self.Player_Data[f"DayCarePokemonDVSPEED"] = self.DayCarePokemon[0][0].DVSPEED
            self.Player_Data[f"DayCarePokemonEVHP"] = self.DayCarePokemon[0][0].EVHP
            self.Player_Data[f"DayCarePokemonEVATK"] = self.DayCarePokemon[0][0].EVAtk
            self.Player_Data[f"DayCarePokemonEVDEF"] = self.DayCarePokemon[0][0].EVDEF
            self.Player_Data[f"DayCarePokemonEVSPECIAL"] = self.DayCarePokemon[0][0].EVSPECIAL
            self.Player_Data[f"DayCarePokemonEVSPEED"] = self.DayCarePokemon[0][0].EVSPEED
            self.Player_Data[f"DayCarePokemonHP"] = self.DayCarePokemon[0][0].HP
            self.Player_Data[f"DayCarePokemonAtk"] = self.DayCarePokemon[0][0].Atk
            self.Player_Data[f"DayCarePokemonDEF"] = self.DayCarePokemon[0][0].DEF
            self.Player_Data["DayCarePokemonSPECIAL"] = self.DayCarePokemon[0][0].SPECIAL
            self.Player_Data[f"DayCarePokemonSPEED"] = self.DayCarePokemon[0][0].SPEED
            self.Player_Data[f"DayCarePokemonexp"] = self.DayCarePokemon[0][0].exp
            self.Player_Data[f"DayCarePokemonMaxHP"] = self.DayCarePokemon[0][0].MAXHP
        except:pass
        self.Player_Data["Bag"] = self.Player.Bag
        self.Player_Data["HMFlash"] = self.Events.HMFlashGet
        self.Player_Data["PFCSpeech"] = self.Events.PFCSpeech
        self.Player_Data["Money"] = self.Player.Money
        self.Player_Data["BlaineQuestions"] = [self.Kanto.CGymQuestion1.Answered,self.Kanto.CGymQuestion1.Correct,self.Kanto.CGymQuestion2.Answered,self.Kanto.CGymQuestion2.Correct,self.Kanto.CGymQuestion3.Answered,self.Kanto.CGymQuestion3.Correct,self.Kanto.CGymQuestion4.Answered,self.Kanto.CGymQuestion4.Correct,self.Kanto.CGymQuestion5.Answered,self.Kanto.CGymQuestion5.Correct,self.Kanto.CGymQuestion6.Answered,self.Kanto.CGymQuestion6.Correct]
        self.Player_Data["Item_PC"] = self.Player.PC_Items
        self.Player_Data["Pos"] = self.Player.rect.center
        self.Player_Data["PlayerPoke"] = self.Events.PlayerPoke
        self.Player_Data["OverworldLocation"] = self.Events.OverworldLocation
        self.Player_Data["PokemonNumber"] = len(self.Player.Pokemon)
        self.Player_Data["PokemonSeen"] = self.Pokemon_Seen
        self.Player_Data["PCPokemonBoxNumber"] = len(self.Player.PCBoxes)
        self.Player_Data["PokemonCaught"] = self.Pokemon_Caught
        for Index,Trader in enumerate(self.Kanto.PostgameNPCS):self.Player_Data[f"PGTraders{Index}"] = Trader.Traded
        self.Player_Data["E4Battles"] = [self.Kanto.Lorelei.Battled,self.Kanto.Bruno.Battled,self.Kanto.Agatha.Battled,self.Kanto.Lance.Battled]
        self.Player_Data["PokeMartCutscene"] = self.Events.PokeMartCutscene
        self.Player_Data["HasPokeBalls"] = self.Events.HasPokeballs
        self.Player_Data["OakPoke BallCutscene"] = self.Events.OakPokeBallCutscene1
        self.Player_Data["GiversItems"] = [self.Kanto.PokeMartClerk.ItemAmount,self.Kanto.Rival_sis.ItemAmount,self.Kanto.VGuy.ItemAmount,self.Kanto.LTVHMr_Fuji.ItemAmount,self.Kanto.VCH1NPCS[0].ItemAmount,self.Kanto.R16House2Girl.ItemAmount,self.Kanto.FCH3NPCS[0].ItemAmount,self.Kanto.CoinMan.ItemAmount,self.Kanto.CounterMan.ItemAmount,self.Kanto.SHGuy.ItemAmount,self.Kanto.MrPsychic.ItemAmount,
        self.Kanto.SilCoF2Woman.ItemAmount,self.Kanto.SilCoPresident.ItemAmount,self.Kanto.CESOldMan.ItemAmount,self.Kanto.R12HFisher.ItemAmount,self.Kanto.R12GHF2Girl.ItemAmount,self.Kanto.RDGiv.ItemAmount,self.Kanto.PCM1GScientist.ItemAmount]
        self.Player_Data["OptionalRivalBattle"] = self.Events.OptionalRivalFightDone
        self.Player_Data["OakCutsceneSequence"] = [self.Events.PickinPoke,self.Events.PlayerPoke,self.Events.RivalPoke,self.Events.preFirstRivalBattle]
        if len(self.Player.Pokemon):
            for Index,Pokemon in enumerate(self.Player.Pokemon):
                self.Player_Data[f"Pokemon{Index}Owner"] = Pokemon.Trainer
                self.Player_Data[f"Pokemon{Index}Name"] = Pokemon.Name
                self.Player_Data[f"Pokemon{Index}Nickname"] = Pokemon.NickName
                self.Player_Data[f"Pokemon{Index}LV"] = Pokemon.Level
                self.Player_Data[f"Pokemon{Index}Status"] = Pokemon.Status
                self.Player_Data[f"Pokemon{Index}Died"] = Pokemon.Died
                self.Player_Data[f"Pokemon{Index}Moves"] = Pokemon.Moves
                self.Player_Data[f"Pokemon{Index}Move1pp"] = Pokemon.Move1pp
                self.Player_Data[f"Pokemon{Index}Move1Maxpp"] = Pokemon.MaxMove1pp
                self.Player_Data[f"Pokemon{Index}Move2pp"] = Pokemon.Move2pp
                self.Player_Data[f"Pokemon{Index}Move2Maxpp"] = Pokemon.MaxMove2pp
                self.Player_Data[f"Pokemon{Index}Move3pp"] = Pokemon.Move3pp
                self.Player_Data[f"Pokemon{Index}Move3Maxpp"] = Pokemon.MaxMove3pp
                self.Player_Data[f"Pokemon{Index}Move4pp"] = Pokemon.Move4pp
                self.Player_Data[f"Pokemon{Index}Move4Maxpp"] = Pokemon.MaxMove4pp
                self.Player_Data[f"Pokemon{Index}DVHP"] = Pokemon.DVHP
                self.Player_Data[f"Pokemon{Index}DVAtk"] = Pokemon.DVAtk
                self.Player_Data[f"Pokemon{Index}DVDEF"] = Pokemon.DVDEF
                self.Player_Data[f"Pokemon{Index}DVSPECIAL"] = Pokemon.DVSPECIAL
                self.Player_Data[f"Pokemon{Index}DVSPEED"] = Pokemon.DVSPEED
                self.Player_Data[f"Pokemon{Index}EVHP"] = Pokemon.EVHP
                self.Player_Data[f"Pokemon{Index}EVATK"] = Pokemon.EVAtk
                self.Player_Data[f"Pokemon{Index}EVDEF"] = Pokemon.EVDEF
                self.Player_Data[f"Pokemon{Index}EVSPECIAL"] = Pokemon.EVSPECIAL
                self.Player_Data[f"Pokemon{Index}EVSPEED"] = Pokemon.EVSPEED
                self.Player_Data[f"Pokemon{Index}HP"] = Pokemon.HP
                self.Player_Data[f"Pokemon{Index}Atk"] = Pokemon.Atk
                self.Player_Data[f"Pokemon{Index}DEF"] = Pokemon.DEF
                self.Player_Data[f"Pokemon{Index}SPECIAL"] = Pokemon.SPECIAL
                self.Player_Data[f"Pokemon{Index}SPEED"] = Pokemon.SPEED
                self.Player_Data[f"Pokemon{Index}exp"] = Pokemon.exp
                self.Player_Data[f"Pokemon{Index}MaxHP"] = Pokemon.MAXHP
        if len(self.Player.PCBoxes[0]):
            for i,Box in enumerate(self.Player.PCBoxes):
                for Index,Pokemon in enumerate(Box):
                    self.Player_Data[f"PCPokemon{i}{Index}Owner"] = Pokemon.Trainer
                    self.Player_Data[f"PCPokemon{i}{Index}Name"] = Pokemon.Name
                    self.Player_Data[f"PCPokemon{i}{Index}Nickname"] = Pokemon.NickName
                    self.Player_Data[f"PCPokemon{i}{Index}LV"] = Pokemon.Level
                    self.Player_Data[f"PCPokemon{i}{Index}Status"] = Pokemon.Status
                    self.Player_Data[f"PCPokemon{i}{Index}Died"] = Pokemon.Died
                    self.Player_Data[f"PCPokemon{i}{Index}Moves"] = Pokemon.Moves
                    self.Player_Data[f"PCPokemon{i}{Index}Move1pp"] = Pokemon.Move1pp
                    self.Player_Data[f"PCPokemon{i}{Index}Move1Maxpp"] = Pokemon.MaxMove1pp
                    self.Player_Data[f"PCPokemon{i}{Index}Move2pp"] = Pokemon.Move2pp
                    self.Player_Data[f"PCPokemon{i}{Index}Move2Maxpp"] = Pokemon.MaxMove2pp
                    self.Player_Data[f"PCPokemon{i}{Index}Move3pp"] = Pokemon.Move3pp
                    self.Player_Data[f"PCPokemon{i}{Index}Move3Maxpp"] = Pokemon.MaxMove3pp
                    self.Player_Data[f"PCPokemon{i}{Index}Move4pp"] = Pokemon.Move4pp
                    self.Player_Data[f"PCPokemon{i}{Index}Move4Maxpp"] = Pokemon.MaxMove4pp
                    self.Player_Data[f"PCPokemon{i}{Index}DVHP"] = Pokemon.DVHP
                    self.Player_Data[f"PCPokemon{i}{Index}DVAtk"] = Pokemon.DVAtk
                    self.Player_Data[f"PCPokemon{i}{Index}DVDEF"] = Pokemon.DVDEF
                    self.Player_Data[f"PCPokemon{i}{Index}DVSPECIAL"] = Pokemon.DVSPECIAL
                    self.Player_Data[f"PCPokemon{i}{Index}DVSPEED"] = Pokemon.DVSPEED
                    self.Player_Data[f"PCPokemon{i}{Index}EVHP"] = Pokemon.EVHP
                    self.Player_Data[f"PCPokemon{i}{Index}EVATK"] = Pokemon.EVAtk
                    self.Player_Data[f"PCPokemon{i}{Index}EVDEF"] = Pokemon.EVDEF
                    self.Player_Data[f"PCPokemon{i}{Index}EVSPECIAL"] = Pokemon.EVSPECIAL
                    self.Player_Data[f"PCPokemon{i}{Index}EVSPEED"] = Pokemon.EVSPEED
                    self.Player_Data[f"PCPokemon{i}{Index}HP"] = Pokemon.HP
                    self.Player_Data[f"PCPokemon{i}{Index}Atk"] = Pokemon.Atk
                    self.Player_Data[f"PCPokemon{i}{Index}DEF"] = Pokemon.DEF
                    self.Player_Data[f"PCPokemon{i}{Index}SPECIAL"] = Pokemon.SPECIAL
                    self.Player_Data[f"PCPokemon{i}{Index}SPEED"] = Pokemon.SPEED
                    self.Player_Data[f"PCPokemon{i}{Index}exp"] = Pokemon.exp
                    self.Player_Data[f"PCPokemon{i}{Index}MaxHP"] = Pokemon.MAXHP
        with open('Player_Info.txt', 'w') as Player_file:
            json.dump(self.Player_Data,Player_file) #First is the data we want to store, second is the file we want to store it in

    def Load(self):
        try:
            with open('Player_Info.txt') as Player_file: self.Player_Data = json.load(Player_file) 
            for TI,Trainers in enumerate(self.OtherTrainers):
                for x,trainer in enumerate(Trainers):
                    trainer.Battled = self.Player_Data[f"OtherTrainers{TI}{x}"]
            for BI,Balls in enumerate(self.MapItems):
                for x,ball in enumerate(Balls):
                    ball.Picked,ball.Item = self.Player_Data[f"MapItems{BI}{x}"]
            for TI,Trader in enumerate(self.Kanto.Traders):
                Trader.Traded = self.Player_Data[f"Traders{TI}{Trader}"]
            for HI,Balls in enumerate(self.HiddenItems):
                for x,ball in enumerate(Balls):
                    ball.Picked,ball.Item= self.Player_Data[f"HiddenItems{HI}{x}"]
            for Index,Trader in enumerate(self.Kanto.PostgameNPCS):Trader.Traded = self.Player_Data[f"PGTraders{Index}"]
            self.Events.Stage = self.Player_Data["Stage"] 
            self.PlayerName = self.Player_Data["Name"]
            self.Events.ExpALLGet = self.Player_Data["ExpALLGet"]
            self.Events.OakinLab = self.Player_Data["OakinLab"]
            self.Events.VCSnorlaxAwake = self.Player_Data["VCSnorlax"]
            self.Events.Articuno =self.Player_Data["Articuno"]
            self.F4Surf = self.Player_Data["F4Surf"]
            self.Events.CFightDone = self.Player_Data["CFightDone"]
            self.Events.SilCoRivalBattleDone = self.Player_Data["SilCoRivalBattleDone"]
            self.E4Beaten = self.Player_Data["E4Beaten"]
            self.Events.Zapdos = self.Player_Data["Zapdos"]
            self.Events.Mewtwo = self.Player_Data["Mewtwo"]
            self.Events.Fighting_DojoFightDone = self.Player_Data["Fighting_DojoFight"]
            self.Events.Fighting_DojoPokePick = self.Player_Data["Fighting_DojoPokePick"]
            self.Events.Fighting_DojoPokemon = self.Player_Data["Fighting_DojoPokemon"]
            self.Events.Fighting_DojoPokePickDone = self.Player_Data["Fighting_DojoPokePickDone"]
            self.Safari_Steps = self.Player_Data["Safari Steps"]
            self.Events.CESnorlaxAwake = self.Player_Data["CESnorlax"] 
            self.Events.BPLRivalFightDone = self.Player_Data["BPLRivalFightDone"]
            self.Events.RBaseGiovanniEncounter = self.Player_Data["RBaseGiovanni"]
            self.Events.SilCoLapras = self.Player_Data["SilCoLapras"]
            self.Events.PokeTowerGhost = self.Player_Data["PokeTowerGhost"]
            self.Events.Mr_FujiSaved = self.Player_Data["MrFujiSaved"]
            self.Events.Moltres = self.Player_Data["Moltres"]
            self.Kanto.CGymQuestion1.Answered,self.Kanto.CGymQuestion1.Correct,self.Kanto.CGymQuestion2.Answered,self.Kanto.CGymQuestion2.Correct,self.Kanto.CGymQuestion3.Answered,self.Kanto.CGymQuestion3.Correct,self.Kanto.CGymQuestion4.Answered,self.Kanto.CGymQuestion4.Correct,self.Kanto.CGymQuestion5.Answered,self.Kanto.CGymQuestion5.Correct,self.Kanto.CGymQuestion6.Answered,self.Kanto.CGymQuestion6.Correct = self.Player_Data["BlaineQuestions"]
            self.Events.PokeTowerRivalFightDone = self.Player_Data["PokeTowerRivalFightDone"]
            self.Events.SilCoGioDone = self.Player_Data["SilCoGioDone"]
            self.Player.Coins = self.Player_Data["Playercoins"]
            self.Events.HaveBike = self.Player_Data["HaveBike"]
            self.F4Eevee = self.Player_Data["F4Eevee"]
            self.Events.SSTicketGot = self.Player_Data["SSTicketGot"]
            self.Events.GCRocketEncounter = self.Player_Data["GCRocketEncounter"]
            self.Events.CCRocketFightDone = self.Player_Data["CCRocketFightDone"]
            self.Events.SSRivalBattleDone = self.Player_Data["SSRivalBattleDone"]
            self.Events.SSCaptainDone = self.Player_Data["SSCaptain"]
            self.Events.HMFlashGet =self.Player_Data["HMFlash"]
            self.Events.ItemFinderGet =self.Player_Data["ItemFinder"]
            self.Events.SSTicketCheck = self.Player_Data["SSTicketCheck"]
            self.PlayerMap.FlyLocations = self.Player_Data["FlyLocations"]
            self.Events.CCRivalFightDone= self.Player_Data["CCRivalFightDone"]
            self.Player.Badges = self.Player_Data["Badges"]
            self.Kanto.FossilChosen = self.Player_Data["FossilChosen"]
            self.RivalName = self.Player_Data["RivalName"] 
            self.Events.GirlGotWater,self.Events.GirlGotLemons,self.Events.GirlGotPop = self.Player_Data["RoofTopGirl"]
            self.Events.Playerinput = self.PlayerName
            self.Events.Rivalinput = self.RivalName 
            self.Kanto.Rival.Name = self.RivalName 
            self.Events.GuardDrinkGiven = self.Player_Data["GuardDrinkGiven"]
            self.Events.PFCSpeech = self.Player_Data["PFCSpeech"]
            self.Player.Bag = self.Player_Data["Bag"]
            self.Kanto.Lorelei.Battled,self.Kanto.Bruno.Battled,self.Kanto.Agatha.Battled,self.Kanto.Lance.Battled = self.Player_Data["E4Battles"]
            self.Healplace = self.Player_Data['LastHealPlace']
            self.Player.Money = self.Player_Data["Money"]
            self.Player.PC_Items = self.Player_Data["Item_PC"] 
            self.Player.rect.center = self.Player_Data["Pos"]
            self.Pokemon_Seen = self.Player_Data["PokemonSeen"]
            try:
                self.DayCarePokemon.append([Pokemon(self.Player_Data["DayCarePokemonName"],self.Player_Data["DayCarePokemonLV"],self.Player_Data["DayCarePokemonMoves"],self.Player_Data["DayCarePokemonOwner"],self.Player_Data["DayCarePokemonNickname"],self.Player_Data["DayCarePokemonexp"]),self.Player_Data["DayCarePokemonStartLV"]])
                self.DayCarePokemon[0][0].Died = self.Player_Data[f"DayCarePokemonDied"]
                self.DayCarePokemon[0][0].Move1pp = self.Player_Data[f"DayCarePokemonMove1pp"]
                self.DayCarePokemon[0][0].MaxMove1pp = self.Player_Data[f"DayCarePokemonMove1Maxpp"]
                self.DayCarePokemon[0][0].Move2pp = self.Player_Data[f"DayCarePokemonMove2pp"]
                self.DayCarePokemon[0][0].MaxMove2pp = self.Player_Data[f"DayCarePokemonMove2Maxpp"]
                self.DayCarePokemon[0][0].Move3pp = self.Player_Data[f"DayCarePokemonMove3pp"]
                self.DayCarePokemon[0][0].MaxMove3pp = self.Player_Data[f"DayCarePokemonMove3Maxpp"]
                self.DayCarePokemon[0][0].Move4pp = self.Player_Data[f"DayCarePokemonMove4pp"]
                self.DayCarePokemon[0][0].MaxMove4pp = self.Player_Data[f"DayCarePokemonMove4Maxpp"]
                self.DayCarePokemon[0][0].DVHP = self.Player_Data[f"DayCarePokemonDVHP"]
                self.DayCarePokemon[0][0].DVAtk = self.Player_Data[f"DayCarePokemonDVAtk"]
                self.DayCarePokemon[0][0].DVDEF = self.Player_Data[f"DayCarePokemonDVDEF"]
                self.DayCarePokemon[0][0].DVSPECIAL = self.Player_Data[f"DayCarePokemonDVSPECIAL"]
                self.DayCarePokemon[0][0].DVSPEED = self.Player_Data[f"DayCarePokemonDVSPEED"]
                self.DayCarePokemon[0][0].EVHP = self.Player_Data[f"DayCarePokemonEVHP"]
                self.DayCarePokemon[0][0].EVAtk = self.Player_Data[f"DayCarePokemonEVATK"]
                self.DayCarePokemon[0][0].EVDEF= self.Player_Data[f"DayCarePokemonEVDEF"]
                self.DayCarePokemon[0][0].EVSPECIAL = self.Player_Data[f"DayCarePokemonEVSPECIAL"]
                self.DayCarePokemon[0][0].EVSPEED = self.Player_Data[f"DayCarePokemonEVSPEED"]
                self.DayCarePokemon[0][0].HP = self.Player_Data[f"DayCarePokemonHP"]
                self.DayCarePokemon[0][0].Atk = self.Player_Data[f"DayCarePokemonAtk"]
                self.DayCarePokemon[0][0].DEF = self.Player_Data[f"DayCarePokemonDEF"]
                self.DayCarePokemon[0][0].SPECIAL = self.Player_Data["DayCarePokemonSPECIAL"]
                self.DayCarePokemon[0][0].SPEED = self.Player_Data[f"DayCarePokemonSPEED"]
                self.DayCarePokemon[0][0].MAXHP = self.Player_Data[f"DayCarePokemonMaxHP"]
            except:pass
            self.Pokemon_Caught =  self.Player_Data["PokemonCaught"]
            self.Events.OverworldLocation = self.Player_Data["OverworldLocation"]
            self.Events.PlayerPoke = self.Player_Data["PlayerPoke"]
            self.Events.PokeMartCutscene = self.Player_Data["PokeMartCutscene"]
            self.Events.HasPokeballs =  self.Player_Data["HasPoke Balls"]
            self.Events.OakPokeBallCutscene1 = self.Player_Data["OakPoke BallCutscene"]
            self.Events.OptionalRivalFightDone = self.Player_Data["OptionalRivalBattle"]
            self.Events.NBRocketEncounter= self.Player_Data["NBRocketEncounter"]
            self.Kanto.PokeMartClerk.ItemAmount,self.Kanto.Rival_sis.ItemAmount,self.Kanto.VGuy.ItemAmount,self.Kanto.LTVHMr_Fuji.ItemAmount,self.Kanto.VCH1NPCS[0].ItemAmount,self.Kanto.R16House2Girl.ItemAmount,self.Kanto.FCH3NPCS[0].ItemAmount,self.Kanto.CoinMan.ItemAmount,self.Kanto.CounterMan.ItemAmount,self.Kanto.SHGuy.ItemAmount,self.Kanto.MrPsychic.ItemAmount,self.Kanto.SilCoF2Woman.ItemAmount,self.Kanto.SilCoPresident.ItemAmount,self.Kanto.CESOldMan.ItemAmount,self.Kanto.R12HFisher.ItemAmount,self.Kanto.R12GHF2Girl.ItemAmount,self.Kanto.RDGiv.ItemAmount,self.Kanto.PCM1GScientist.ItemAmount = self.Player_Data["GiversItems"]
            self.Events.PickinPoke,self.Events.PlayerPoke,self.Events.RivalPoke,self.Events.preFirstRivalBattle = self.Player_Data["OakCutsceneSequence"]
            for tile in self.Kanto.StartersSprites:
                if tile.Name in (self.Events.PlayerPoke,self.Events.RivalPoke):
                    self.Kanto.OakLabCamera.remove(tile)
            for Index in range(self.Player_Data["PokemonNumber"]):
                self.Player.Add_Pokemon(Pokemon(self.Player_Data[f"Pokemon{Index}Name"],self.Player_Data[f"Pokemon{Index}LV"],self.Player_Data[f"Pokemon{Index}Moves"],self.Player_Data[f"Pokemon{Index}Owner"],self.Player_Data[f"Pokemon{Index}Nickname"],self.Player_Data[f"Pokemon{Index}exp"]))
                self.Player.Pokemon[Index].Died = self.Player_Data[f"Pokemon{Index}Died"]
                self.Player.Pokemon[Index].DVHP = self.Player_Data[f"Pokemon{Index}DVHP"]
                self.Player.Pokemon[Index].DVAtk= self.Player_Data[f"Pokemon{Index}DVAtk"]
                self.Player.Pokemon[Index].DVDEF = self.Player_Data[f"Pokemon{Index}DVDEF"]
                self.Player.Pokemon[Index].Status = self.Player_Data[f"Pokemon{Index}Status"]
                self.Player.Pokemon[Index].DVSPECIAL = self.Player_Data[f"Pokemon{Index}DVSPECIAL"]
                self.Player.Pokemon[Index].DVSPEED = self.Player_Data[f"Pokemon{Index}DVSPEED"]
                self.Player.Pokemon[Index].EVHP = self.Player_Data[f"Pokemon{Index}EVHP"]
                self.Player.Pokemon[Index].EVAtk = self.Player_Data[f"Pokemon{Index}EVATK"]
                self.Player.Pokemon[Index].EVDEF = self.Player_Data[f"Pokemon{Index}EVDEF"]
                self.Player.Pokemon[Index].EVSPECIAL = self.Player_Data[f"Pokemon{Index}EVSPECIAL"]
                self.Player.Pokemon[Index].EVSPEED = self.Player_Data[f"Pokemon{Index}EVSPEED"]
                self.Player.Pokemon[Index].HP = self.Player_Data[f"Pokemon{Index}HP"]
                self.Player.Pokemon[Index].Atk = self.Player_Data[f"Pokemon{Index}Atk"]
                self.Player.Pokemon[Index].DEF = self.Player_Data[f"Pokemon{Index}DEF"]
                self.Player.Pokemon[Index].SPECIAL = self.Player_Data[f"Pokemon{Index}SPECIAL"]
                self.Player.Pokemon[Index].SPEED =  self.Player_Data[f"Pokemon{Index}SPEED"]
                self.Player.Pokemon[Index].MAXHP = self.Player_Data[f"Pokemon{Index}MaxHP"]
                self.Player.Pokemon[Index].Move1pp = self.Player_Data[f"Pokemon{Index}Move1pp"]
                self.Player.Pokemon[Index].MaxMove1pp = self.Player_Data[f"Pokemon{Index}Move1Maxpp"]
                self.Player.Pokemon[Index].Move2pp = self.Player_Data[f"Pokemon{Index}Move2pp"] 
                self.Player.Pokemon[Index].MaxMove2pp = self.Player_Data[f"Pokemon{Index}Move2Maxpp"]
                self.Player.Pokemon[Index].Move3pp = self.Player_Data[f"Pokemon{Index}Move3pp"]
                self.Player.Pokemon[Index].MaxMove3pp = self.Player_Data[f"Pokemon{Index}Move3Maxpp"]
                self.Player.Pokemon[Index].Move4pp = self.Player_Data[f"Pokemon{Index}Move4pp"] 
                self.Player.Pokemon[Index].MaxMove4pp = self.Player_Data[f"Pokemon{Index}Move4Maxpp"]
            for Index in range(self.Player_Data[f"PCPokemonBoxNumber"]):
                for i in range(20):
                    try:
                        self.Player.Add_PCPokemon(Pokemon(self.Player_Data[f"PCPokemon{Index}{i}Name"],self.Player_Data[f"PCPokemon{Index}{i}LV"],self.Player_Data[f"PCPokemon{Index}{i}Moves"],self.Player_Data[f"PCPokemon{Index}{i}Owner"],self.Player_Data[f"PCPokemon{Index}{i}Nickname"],self.Player_Data[f"PCPokemon{Index}{i}exp"]))
                        self.Player.PCBoxes[Index][i].Died = self.Player_Data[f"PCPokemon{Index}{i}Died"]
                        self.Player.PCBoxes[Index][i].DVHP = self.Player_Data[f"PCPokemon{Index}{i}DVHP"]
                        self.Player.PCBoxes[Index][i].DVAtk= self.Player_Data[f"PCPokemon{Index}{i}DVAtk"]
                        self.Player.PCBoxes[Index][i].DVDEF = self.Player_Data[f"PCPokemon{Index}{i}DVDEF"]
                        self.Player.PCBoxes[Index][i].Status = self.Player_Data[f"PCPokemon{Index}{i}Status"]
                        self.Player.PCBoxes[Index][i].DVSPECIAL = self.Player_Data[f"PCPokemon{Index}{i}DVSPECIAL"]
                        self.Player.PCBoxes[Index][i].DVSPEED = self.Player_Data[f"PCPokemon{Index}{i}DVSPEED"]
                        self.Player.PCBoxes[Index][i].EVHP = self.Player_Data[f"PCPokemon{Index}{i}EVHP"]
                        self.Player.PCBoxes[Index][i].EVAtk = self.Player_Data[f"PCPokemon{Index}{i}EVATK"]
                        self.Player.PCBoxes[Index][i].EVDEF = self.Player_Data[f"PCPokemon{Index}{i}EVDEF"]
                        self.Player.PCBoxes[Index][i].EVSPECIAL = self.Player_Data[f"PCPokemon{Index}{i}EVSPECIAL"]
                        self.Player.PCBoxes[Index][i].EVSPEED = self.Player_Data[f"PCPokemon{Index}{i}EVSPEED"]
                        self.Player.PCBoxes[Index][i].HP = self.Player_Data[f"PCPokemon{Index}{i}HP"]
                        self.Player.PCBoxes[Index][i].Atk = self.Player_Data[f"PCPokemon{Index}{i}Atk"]
                        self.Player.PCBoxes[Index][i].DEF = self.Player_Data[f"PCPokemon{Index}{i}DEF"]
                        self.Player.PCBoxes[Index][i].SPECIAL = self.Player_Data[f"PCPokemon{Index}{i}SPECIAL"]
                        self.Player.PCBoxes[Index][i].SPEED =  self.Player_Data[f"PCPokemon{Index}{i}SPEED"]
                        self.Player.PCBoxes[Index][i].MAXHP = self.Player_Data[f"PCPokemon{Index}{i}MaxHP"]
                        self.Player.PCBoxes[Index][i].Move1pp = self.Player_Data[f"PCPokemon{Index}{i}Move1pp"]
                        self.Player.PCBoxes[Index][i].MaxMove1pp = self.Player_Data[f"PCPokemon{Index}{i}Move1Maxpp"]
                        self.Player.PCBoxes[Index][i].Move2pp = self.Player_Data[f"PCPokemon{Index}{i}Move2pp"] 
                        self.Player.PCBoxes[Index][i].MaxMove2pp = self.Player_Data[f"PCPokemon{Index}{i}Move2Maxpp"]
                        self.Player.PCBoxes[Index][i].Move3pp = self.Player_Data[f"PCPokemon{Index}{i}Move3pp"]
                        self.Player.PCBoxes[Index][i].MaxMove3pp = self.Player_Data[f"PCPokemon{Index}{i}Move3Maxpp"]
                        self.Player.PCBoxes[Index][i].Move4pp = self.Player_Data[f"PCPokemon{Index}{i}Move4pp"] 
                        self.Player.PCBoxes[Index][i].MaxMove4pp = self.Player_Data[f"PCPokemon{Index}{i}Move4Maxpp"]
                    except:pass
            if self.E4Beaten:self.Put_PostGameNPCs()
            self.Make_OakTeam()
        except:pass

    def Readables(self,List:list):
        for Rect in List:
            if self.Player.rect.colliderect(Rect.Rect):
                self.Events.Dialouge(Rect.Text,Rect.Text2,Rect.Text3,Next=False)

    def PlayerSpeed(self):
        if self.Events.Stage == "OverWorld": self.Player.WalkSpeed = 4
        else:self.Player.WalkSpeed = 2

    def Interact(self,Text:str,Text2:str = "",Text3:str = ""):
        self.Events.Dialouge(Text,Text2,Text3,Next=False)
        pygame.draw.rect(SCREEN,"cornsilk1",self.Yes_rect)
        pygame.draw.rect(SCREEN,"cornsilk1",self.No_rect)
        SCREEN.blit(self.Yes_text,self.Yes_text_rect)
        SCREEN.blit(self.No_text,self.No_text_rect)
        self.CC_Yes()
        self.CC_No()
    
    def CC_Yes(self):
        mouse_pos = pygame.mouse.get_pos()
        if self.Yes_rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if not self.BattleStart:
                        self.Yes = True
                    else:
                        self.BattleYes = True
                    self.Clicked = False
    
    def CC_No(self):
        mouse_pos = pygame.mouse.get_pos()
        if self.No_rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if not self.BattleStart:self.No = True
                    else:self.BattleNo = True
                    self.Clicked = False

    def Use_Cut(self):
        if self.Events.Stage == "OverWorld":
            for tree in self.Kanto.Cuttables:
                if self.Player.rect.colliderect(tree[0]):
                    if self.Player.Check_Moves("Cut"):
                        self.Interact("Do you wanna cut this tree")
                        if self.Yes:
                            self.Kanto.Cuttables.remove(tree)
                            self.Kanto.OverworldBarriers.remove(tree[0])
                            self.Kanto.OverworldCamera.remove(tree[1])
                            self.Yes = False
        elif self.Events.Stage == "CEGym":
            for tree in self.Kanto.CeladonGymCuttables:
                if self.Player.rect.colliderect(tree[0]):
                    if self.Player.Check_Moves("Cut"):
                        self.Interact("Do you wanna cut this tree")
                        if self.Yes:
                            self.Kanto.CeladonGymCuttables.remove(tree)
                            self.Kanto.CeladonGymBarriers.remove(tree[0])
                            self.Kanto.CEGymCamera.remove(tree[1])
                            self.Yes = False

    def Transitions(self,door,pos:tuple):
        if self.Player.rect.colliderect(door.Rect):
            self.Player_Spawn(door.Desination,pos)

    def Camera_Barriers_Control(self):
        if self.Events.Stage in ("SPlayerRoom","PlayerRoom"):
            self.Kanto.PLayerHouse1Camera.add(self.Player)
            self.Kanto.PLayerHouse0Camera.remove(self.Player)
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Barriers = self.Kanto.PlayerRoomBarriers
            self.Kanto.OakLabCamera.remove(self.Player)
            self.Kanto.RivalHouseCamera.remove(self.Player)
            self.Camera = self.Kanto.PLayerHouse1Camera
        elif self.Events.Stage == "PlayerHouse_Ground":
            self.Kanto.PLayerHouse1Camera.remove(self.Player)
            self.Kanto.PLayerHouse0Camera.add(self.Player)
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.OakLabCamera.remove(self.Player)
            self.Kanto.RivalHouseCamera.remove(self.Player)
            self.Barriers = self.Kanto.PlayerHouse0Barriers
            self.Camera = self.Kanto.PLayerHouse0Camera
        elif self.Events.Stage == "OverWorld":
            self.FlashPrompt = False
            self.UseFlash = False
            self.Kanto.PLayerHouse1Camera.remove(self.Player)
            self.Kanto.PewterMuseumBasementCamera.remove(self.Player)
            self.Kanto.PewterMuseumCamera.remove(self.Player)
            self.Kanto.PLayerHouse0Camera.remove(self.Player)
            self.Kanto.ViridainForestCamera.remove(self.Player)
            self.Kanto.RivalHouseCamera.remove(self.Player)
            self.Kanto.PokemonLeagueF1Camera.remove(self.Player)
            self.Kanto.OakLabCamera.remove(self.Player)
            self.PCMMoney = False
            self.Kanto.PokeMartCamera.remove(self.Player)
            self.Kanto.OverworldCamera.add(self.Player)
            self.Barriers = self.Kanto.OverworldBarriers
            self.Camera = self.Kanto.OverworldCamera
        elif self.Events.Stage == "RivalHouse":
            self.Kanto.PLayerHouse1Camera.remove(self.Player)
            self.Kanto.PLayerHouse0Camera.remove(self.Player)
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.OakLabCamera.remove(self.Player)
            self.Kanto.RivalHouseCamera.add(self.Player)
            self.Barriers = self.Kanto.RivalHouseBarriers
            self.Camera = self.Kanto.RivalHouseCamera
        elif self.Events.Stage == "Oak Lab":
            self.Kanto.PLayerHouse1Camera.remove(self.Player)
            self.Kanto.PLayerHouse0Camera.remove(self.Player)
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.RivalHouseCamera.remove(self.Player)
            self.Barriers = self.Kanto.OakLabBarriers
            self.Kanto.OakLabCamera.add(self.Player)
            self.Camera = self.Kanto.OakLabCamera
        elif self.Events.Stage == "Poke Mart":
            self.Kanto.PLayerHouse1Camera.remove(self.Player)
            self.Kanto.PLayerHouse0Camera.remove(self.Player)
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.OakLabCamera.remove(self.Player)
            self.Kanto.RivalHouseCamera.remove(self.Player)
            self.Kanto.PokeMartCamera.add(self.Player)
            self.Barriers = self.Kanto.PokeMartBarriers
            self.Camera = self.Kanto.PokeMartCamera
        elif self.Events.Stage == "Poke Center":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.PokeCenterCamera.add(self.Player)
            self.Barriers = self.Kanto.PokeCenterBarriers
            self.Camera = self.Kanto.PokeCenterCamera
        elif self.Events.Stage == "VH1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.VH1Camera.add(self.Player)
            self.Barriers = self.Kanto.VH1Barriers
            self.Camera = self.Kanto.VH1Camera
        elif self.Events.Stage == "VH2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.VH2Camera.add(self.Player)
            self.Barriers = self.Kanto.VH2Barriers
            self.Camera = self.Kanto.VH2Camera
        elif self.Events.Stage == "PH1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.PH1Camera.add(self.Player)
            self.Barriers = self.Kanto.PH1Barriers
            self.Camera = self.Kanto.PH1Camera
        elif self.Events.Stage == "PH2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.PH2Camera.add(self.Player)
            self.Barriers = self.Kanto.PH2Barriers
            self.Camera = self.Kanto.PH2Camera
        elif self.Events.Stage == "Pokemon LeagueF1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.PokemonLeagueF1Camera.add(self.Player)
            self.Barriers = self.Kanto.PokemonLeagueF1Barriers
            self.Camera = self.Kanto.PokemonLeagueF1Camera
        elif self.Events.Stage == "Pre-Forest":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.ViridainForestCamera.remove(self.Player)
            self.Kanto.PreForestCamera.add(self.Player)
            self.Barriers = self.Kanto.PreViridainForestBarriers
            self.Camera = self.Kanto.PreForestCamera
        elif self.Events.Stage == "Viridian Forest":
            self.Kanto.PreForestCamera.remove(self.Player)
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.ViridainForestCamera.add(self.Player)
            self.Barriers = self.Kanto.ViridainForestBarriers
            self.Camera = self.Kanto.ViridainForestCamera
        elif self.Events.Stage == "After Forest":
            self.Kanto.ViridainForestCamera.remove(self.Player)
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.AfterForestCamera.add(self.Player)
            self.Barriers = self.Kanto.AfterForestBarriers
            self.Camera = self.Kanto.AfterForestCamera
        elif self.Events.Stage == "PCGym":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.PewterGymCamera.add(self.Player)
            self.Barriers = self.Kanto.PewterGymBarriers
            self.Camera = self.Kanto.PewterGymCamera
        elif self.Events.Stage == "PCM":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.PewterMuseumBasementCamera.remove(self.Player)
            self.Kanto.PewterMuseumCamera.add(self.Player)
            self.Barriers = self.Kanto.PCM1Barriers
            self.Camera = self.Kanto.PewterMuseumCamera
        elif self.Events.Stage == "PCM2":
            self.Kanto.PewterMuseumCamera.remove(self.Player)
            self.Kanto.PewterMuseumBasementCamera.add(self.Player)
            self.Barriers = self.Kanto.PCM2Barriers
            self.Camera = self.Kanto.PewterMuseumBasementCamera
        elif self.Events.Stage == "Mt.Moon":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Mt_MoonFloor1Camera.add(self.Player)
            self.Barriers = self.Kanto.Mt_MoonF1Barriers
            self.Camera = self.Kanto.Mt_MoonFloor1Camera
        elif self.Events.Stage == "Mt.Moon2":
            self.Kanto.Mt_MoonFloor1Camera.remove(self.Player)
            self.Kanto.Mt_MoonFloor2Camera.add(self.Player)
            self.Barriers = self.Kanto.Mt_MoonF2Barriers
            self.Camera = self.Kanto.Mt_MoonFloor2Camera
        elif self.Events.Stage == "Mt.Moon3":
            self.Kanto.Mt_MoonFloor2Camera.remove(self.Player)
            self.Kanto.Mt_MoonFloor3Camera.add(self.Player)
            self.Barriers = self.Kanto.Mt_MoonF3Barriers
            self.Camera = self.Kanto.Mt_MoonFloor3Camera
        elif self.Events.Stage == "CCH1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CCH1Camera.add(self.Player)
            self.Barriers = self.Kanto.CCH1Barriers
            self.Camera = self.Kanto.CCH1Camera
        elif self.Events.Stage == "CCH2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CCH2Camera.add(self.Player)
            self.Barriers = self.Kanto.CCH2Barriers
            self.Camera = self.Kanto.CCH2Camera
        elif self.Events.Stage == "Bike Shop":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Bike_ShopCamera.add(self.Player)
            self.Barriers = self.Kanto.BikeShopBarriers
            self.Camera = self.Kanto.Bike_ShopCamera
        elif self.Events.Stage == "CCGym":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CCGymCamera.add(self.Player)
            self.Barriers = self.Kanto.CeruleanGymBarriers
            self.Camera = self.Kanto.CCGymCamera
        elif self.Events.Stage == "Sea Cottage":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Sea_CottageCamera.add(self.Player)
            self.Barriers = self.Kanto.Sea_CottageBarriers
            self.Camera = self.Kanto.Sea_CottageCamera
        elif self.Events.Stage == "Robbed House":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Robbed_HouseCamera.add(self.Player)
            self.Barriers = self.Kanto.Robbed_HouseBarriers
            self.Camera = self.Kanto.Robbed_HouseCamera
        elif self.Events.Stage == "Daycare":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.DayCareCamera.add(self.Player)
            self.Barriers = self.Kanto.DayCareBarriers
            self.Camera = self.Kanto.DayCareCamera
        elif self.Events.Stage == "BetweenR5_SC":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.BetweenR5_SCCamera.add(self.Player)
            self.Barriers = self.Kanto.BetweenR5_SCBarriers
            self.Camera = self.Kanto.BetweenR5_SCCamera
        elif self.Events.Stage == "BetweenR6_SC":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.BetweenR6_SCCamera.add(self.Player)
            self.Barriers = self.Kanto.BetweenR5_SCBarriers
            self.Camera = self.Kanto.BetweenR6_SCCamera
        elif self.Events.Stage == "UnderGround Entrance":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.UndergroundEntranceCamera.add(self.Player)
            self.Barriers = self.Kanto.UndergroundEntranceBarriers
            self.Camera = self.Kanto.UndergroundEntranceCamera
        elif self.Events.Stage == "Underground RouteNS":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.UndergroundNSTunnelCamera.add(self.Player)
            self.Barriers = self.Kanto.UndergroundNSTunnelBarriers
            self.Camera = self.Kanto.UndergroundNSTunnelCamera
        elif self.Events.Stage == "UnderGroundS Entrance":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.UndergroundSEntranceCamera.add(self.Player)
            self.Barriers = self.Kanto.UndergroundSEntranceBarriers
            self.Camera = self.Kanto.UndergroundSEntranceCamera
        elif self.Events.Stage == "VCH1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.VCH1Camera.add(self.Player)
            self.Barriers = self.Kanto.VCH1Barriers
            self.Camera = self.Kanto.VCH1Camera
        elif self.Events.Stage == "VCH2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.VCH2Camera.add(self.Player)
            self.Barriers = self.Kanto.VCH2Barriers
            self.Camera = self.Kanto.VCH2Camera
        elif self.Events.Stage == "VCH3":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.VCH3Camera.add(self.Player)
            self.Barriers = self.Kanto.VCH3Barriers
            self.Camera = self.Kanto.VCH3Camera
        elif self.Events.Stage == "Pokemon Fan Club":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.PokemonFanClubCamera.add(self.Player)
            self.Barriers = self.Kanto.PokemonFanClubBarriers
            self.Camera = self.Kanto.PokemonFanClubCamera
        elif self.Events.Stage == "SS.Anne":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SS_AnneF1Camera.add(self.Player)
            self.Barriers = self.Kanto.SS_AnneF1Barriers
            self.Camera = self.Kanto.SS_AnneF1Camera
        elif self.Events.Stage == "SAF1Rooms":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SS_AnneF1Camera.remove(self.Player)
            self.Kanto.SS_AnneF1RoomsCamera.add(self.Player)
            self.Barriers = self.Kanto.SS_AnneF1RoomsBarriers
            self.Camera = self.Kanto.SS_AnneF1RoomsCamera
        elif self.Events.Stage == "SAF1Kitchen":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SS_AnneF1Camera.remove(self.Player)
            self.Kanto.SS_AnneF1KitchenCamera.add(self.Player)
            self.Barriers = self.Kanto.SS_AnneF1KitchenBarriers
            self.Camera = self.Kanto.SS_AnneF1KitchenCamera
        elif self.Events.Stage == "SS.AnneF0":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SS_AnneF1Camera.remove(self.Player)
            self.Kanto.SS_AnneF0Camera.add(self.Player)
            self.Barriers = self.Kanto.SS_AnneF0Barriers
            self.Camera = self.Kanto.SS_AnneF0Camera
        elif self.Events.Stage == "SAF0Rooms":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SS_AnneF0Camera.remove(self.Player)
            self.Kanto.SS_AnneF0RoomsCamera.add(self.Player)
            self.Barriers = self.Kanto.SS_AnneF0RoomsBarriers
            self.Camera = self.Kanto.SS_AnneF0RoomsCamera
        elif self.Events.Stage == "SS.AnneF2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SS_AnneF1Camera.remove(self.Player)
            self.Kanto.SS_AnneF2Camera.add(self.Player)
            self.Barriers = self.Kanto.SS_AnneF2Barriers
            self.Camera = self.Kanto.SS_AnneF2Camera
        elif self.Events.Stage == "SAHallway":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SS_AnneF2Camera.remove(self.Player)
            self.Kanto.SS_AnneF3HallWayCamera.add(self.Player)
            self.Barriers = self.Kanto.SS_AnneF3HallWayBarriers
            self.Camera = self.Kanto.SS_AnneF3HallWayCamera
        elif self.Events.Stage == "SS.AnneF3":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SS_AnneF3HallWayCamera.remove(self.Player)
            self.Kanto.SS_AnneF3Camera.add(self.Player)
            self.Barriers = self.Kanto.SS_AnneF3Barriers
            self.Camera = self.Kanto.SS_AnneF3Camera
        elif self.Events.Stage == "SAF2Rooms":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SS_AnneF2Camera.remove(self.Player)
            self.Kanto.SS_AnneF2RoomsCamera.add(self.Player)
            self.Barriers = self.Kanto.SS_AnneF2RoomsBarriers
            self.Camera = self.Kanto.SS_AnneF2RoomsCamera
        elif self.Events.Stage == "Captain Cabin":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SS_AnneF2Camera.remove(self.Player)
            self.Kanto.SS_AnneF2CaptainCamera.add(self.Player)
            self.Barriers = self.Kanto.SS_AnneF2CaptainBarriers
            self.Camera = self.Kanto.SS_AnneF2CaptainCamera
        elif self.Events.Stage == "VCGym":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.VCGymCamera.add(self.Player)
            self.Barriers = self.Kanto.VermilionGymBarriers
            self.Camera = self.Kanto.VCGymCamera
        elif self.Events.Stage == "Diglett's Cave Entrance":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.DiglettCaveEntranceCamera.add(self.Player)
            self.Barriers = self.Kanto.DiglettCaveEntranceBarriers
            self.Camera = self.Kanto.DiglettCaveEntranceCamera
        elif self.Events.Stage == "Diglett's Cave":
            self.Kanto.DiglettCaveEntranceCamera.remove(self.Player)
            self.Kanto.DiglettCaveCamera.add(self.Player)
            self.Barriers = self.Kanto.DiglettCaveBarriers
            self.Camera = self.Kanto.DiglettCaveCamera
        elif self.Events.Stage == "Diglett's Cave Exit":
            self.Kanto.DiglettCaveCamera.remove(self.Player)
            self.Kanto.DiglettCaveExitCamera.add(self.Player)
            self.Barriers = self.Kanto.DiglettCaveEntranceBarriers
            self.Camera = self.Kanto.DiglettCaveExitCamera
        elif self.Events.Stage == "R21H":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.R21HCamera.add(self.Player)
            self.Barriers = self.Kanto.R21HBarriers
            self.Camera = self.Kanto.R21HCamera
        elif self.Events.Stage == "R22H":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.R22HCamera.add(self.Player)
            self.Barriers = self.Kanto.R22HBarriers
            self.Camera = self.Kanto.R22HCamera
        elif self.Events.Stage == "R11H":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.R11HCamera.add(self.Player)
            self.Barriers = self.Kanto.R11HBarriers
            self.Camera = self.Kanto.R11HCamera
        elif self.Events.Stage == "R11HF2":
            self.Kanto.R11HCamera.remove(self.Player)
            self.Kanto.R11F2HCamera.add(self.Player)
            self.Barriers = self.Kanto.R11HF2Barriers
            self.Camera = self.Kanto.R11F2HCamera
        elif self.Events.Stage == "Rock TunnelF1":
            self.Kanto.OverworldCamera.remove(self.Player)
            if self.UseFlash:
                self.Kanto.Rock_TunnelF1LightCamera.add(self.Player)
                self.Camera = self.Kanto.Rock_TunnelF1LightCamera
            else:
                self.Kanto.Rock_TunnelF1DarkCamera.add(self.Player)
                self.Camera = self.Kanto.Rock_TunnelF1DarkCamera
            self.Barriers = self.Kanto.Rock_TunnelF1Barriers
        elif self.Events.Stage == "Rock TunnelF2":
            self.Kanto.OverworldCamera.remove(self.Player)
            if self.UseFlash:
                self.Kanto.Rock_TunnelF2LightCamera.add(self.Player)
                self.Camera = self.Kanto.Rock_TunnelF2LightCamera
            else:
                self.Kanto.Rock_TunnelF2DarkCamera.add(self.Player)
                self.Camera = self.Kanto.Rock_TunnelF2DarkCamera
            self.Barriers = self.Kanto.Rock_TunnelF2Barriers
        elif self.Events.Stage == "Lavender Volunteer Pokemon House":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.LTVolunteerHouseCamera.add(self.Player)
            self.Barriers = self.Kanto.LTVolunteerHouseBarriers
            self.Camera = self.Kanto.LTVolunteerHouseCamera
        elif self.Events.Stage == "LTH1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.LT1HCamera.add(self.Player)
            self.Barriers = self.Kanto.LT1HBarriers
            self.Camera = self.Kanto.LT1HCamera
        elif self.Events.Stage == "LTH2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.LT2HCamera.add(self.Player)
            self.Barriers = self.Kanto.LT2HBarriers
            self.Camera = self.Kanto.LT2HCamera
        elif self.Events.Stage == "SaffronEEntrance":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SaffronEEntranceCamera.add(self.Player)
            self.Barriers = self.Kanto.SaffronEEntranceBarriers
            self.Camera = self.Kanto.SaffronEEntranceCamera
        elif self.Events.Stage == "UnderGroundE Entrance":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Underground_EEntranceCamera.add(self.Player)
            self.Barriers = self.Kanto.Underground_EEntranceBarriers
            self.Camera = self.Kanto.Underground_EEntranceCamera
        elif self.Events.Stage == "UnderGroundW Entrance":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Underground_WEntranceCamera.add(self.Player)
            self.Barriers = self.Kanto.Underground_WEntranceBarriers
            self.Camera = self.Kanto.Underground_WEntranceCamera
        elif self.Events.Stage == "Underground TunnelWE":
            self.Kanto.Underground_EEntranceCamera.remove(self.Player)
            self.Kanto.Underground_WETunnelCamera.add(self.Player)
            self.Barriers = self.Kanto.Underground_WETunnelBarriers
            self.Camera = self.Kanto.Underground_WETunnelCamera
        elif self.Events.Stage == "SaffronWEntrance":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SaffronEEntranceCamera.add(self.Player)
            self.Barriers = self.Kanto.SaffronEEntranceBarriers
            self.Camera = self.Kanto.SaffronEEntranceCamera
        elif self.Events.Stage == "Game Corner":
            self.Kanto.OverworldCamera.remove(self.Player)
            if not self.Events.GCRocketEncounter:
                self.Kanto.Game_CornerNormalCamera.add(self.Player)
                self.Camera = self.Kanto.Game_CornerNormalCamera
            else:
                self.Kanto.Game_CornerSecretCamera.add(self.Player)
                self.Kanto.Game_CornerNormalCamera.remove(self.Player)
                self.Camera = self.Kanto.Game_CornerSecretCamera
            self.Barriers = self.Kanto.Game_CornerBarriers
        elif self.Events.Stage == "Prize Booth":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Prize_BoothCamera.add(self.Player)
            self.Barriers = self.Kanto.Prize_BoothBarriers
            self.Camera = self.Kanto.Prize_BoothCamera
        elif self.Events.Stage == "CERestourant":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CERestourantCamera.add(self.Player)
            self.Barriers = self.Kanto.CERestourantBarriers
            self.Camera = self.Kanto.CERestourantCamera
        elif self.Events.Stage == "CE1H":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CE1HCamera.add(self.Player)
            self.Barriers = self.Kanto.CE1HBarriers
            self.Camera = self.Kanto.CE1HCamera
        elif self.Events.Stage == "CE2H":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CE2HCamera.add(self.Player)
            self.Barriers = self.Kanto.CE2HBarriers
            self.Camera = self.Kanto.CE2HCamera
        elif self.Events.Stage == "CEMansionF1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CEMansionF1Camera.add(self.Player)
            self.Barriers = self.Kanto.CEMF1Barriers
            self.Camera = self.Kanto.CEMansionF1Camera
        elif self.Events.Stage == "CEMansionF2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CEMansionF2Camera.add(self.Player)
            self.Barriers = self.Kanto.CEMF2Barriers
            self.Camera = self.Kanto.CEMansionF2Camera
        elif self.Events.Stage == "CEMansionF3":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CEMansionF3Camera.add(self.Player)
            self.Barriers = self.Kanto.CEMF3Barriers
            self.Camera = self.Kanto.CEMansionF3Camera
        elif self.Events.Stage == "CEMansionF4":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CEMansionF4Camera.add(self.Player)
            self.Barriers = self.Kanto.CEMF4Barriers
            self.Camera = self.Kanto.CEMansionF4Camera
        elif self.Events.Stage == "CEMansionF4House":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CEMansionF4HouseCamera.add(self.Player)
            self.Barriers = self.Kanto.CEMF4HouseBarriers
            self.Camera = self.Kanto.CEMansionF4HouseCamera
        elif self.Events.Stage == "CEStoreF1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CEStoreF1Camera.add(self.Player)
            self.Barriers = self.Kanto.CEStoreF1Barriers
            self.Camera = self.Kanto.CEStoreF1Camera
        elif self.Events.Stage == "CEStoreF2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CEStoreF2Camera.add(self.Player)
            self.Barriers = self.Kanto.CEStoreF2Barriers
            self.Camera = self.Kanto.CEStoreF2Camera
        elif self.Events.Stage == "CEStoreF3":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CEStoreF3Camera.add(self.Player)
            self.Barriers = self.Kanto.CEStoreF3Barriers
            self.Camera = self.Kanto.CEStoreF3Camera
        elif self.Events.Stage == "CEStoreF4":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CEStoreF4Camera.add(self.Player)
            self.Barriers = self.Kanto.CEStoreF4Barriers
            self.Camera = self.Kanto.CEStoreF4Camera
        elif self.Events.Stage == "CEStoreF5":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CEStoreF5Camera.add(self.Player)
            self.Barriers = self.Kanto.CEStoreF5Barriers
            self.Camera = self.Kanto.CEStoreF5Camera
        elif self.Events.Stage == "CEStoreElevator":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CEStoreElevatorCamera.add(self.Player)
            self.Barriers = self.Kanto.CEStoreElevatorBarriers
            self.Camera = self.Kanto.CEStoreElevatorCamera
        elif self.Events.Stage == "CEStoreRoof":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CEStoreRooftopCamera.add(self.Player)
            self.Barriers = self.Kanto.CEStoreRooftopBarriers
            self.Camera = self.Kanto.CEStoreRooftopCamera
        elif self.Events.Stage == "CEGym":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CEGymCamera.add(self.Player)
            self.Barriers = self.Kanto.CeladonGymBarriers
            self.Camera = self.Kanto.CEGymCamera
        elif self.Events.Stage == "Rocket HideoutF1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Rocket_HideoutF1Camera.add(self.Player)
            self.Barriers = self.Kanto.RocketBaseF1Barriers
            self.Camera = self.Kanto.Rocket_HideoutF1Camera
        elif self.Events.Stage == "Rocket HideoutF2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Rocket_HideoutF2Camera.add(self.Player)
            self.Barriers = self.Kanto.RocketBaseF2Barriers
            self.Camera = self.Kanto.Rocket_HideoutF2Camera
        elif self.Events.Stage == "Rocket HideoutF3":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Rocket_HideoutF3Camera.add(self.Player)
            self.Barriers = self.Kanto.RocketBaseF3Barriers
            self.Camera = self.Kanto.Rocket_HideoutF3Camera
        elif self.Events.Stage == "Rocket HideoutF4":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Rocket_HideoutF4Camera.add(self.Player)
            self.Barriers = self.Kanto.RocketBaseF4Barriers
            self.Camera = self.Kanto.Rocket_HideoutF4Camera
        elif self.Events.Stage == "RocketBaseElevator":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Rocket_HideoutElevatorCamera.add(self.Player)
            self.Barriers = self.Kanto.RocketBaseElevatorBarriers
            self.Camera = self.Kanto.Rocket_HideoutElevatorCamera
        elif self.Events.Stage == "PokeTowerF1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Pokemon_TowerF1Camera.add(self.Player)
            self.Barriers = self.Kanto.PokeTowerF1Barriers
            self.Camera = self.Kanto.Pokemon_TowerF1Camera
        elif self.Events.Stage == "PokeTowerF2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Pokemon_TowerF2Camera.add(self.Player)
            self.Barriers = self.Kanto.PokeTowerF2Barriers
            self.Camera = self.Kanto.Pokemon_TowerF2Camera
        elif self.Events.Stage == "PokeTowerF3":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Pokemon_TowerF3Camera.add(self.Player)
            self.Barriers = self.Kanto.PokeTowerF3Barriers
            self.Camera = self.Kanto.Pokemon_TowerF3Camera
        elif self.Events.Stage == "PokeTowerF4":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Pokemon_TowerF4Camera.add(self.Player)
            self.Barriers = self.Kanto.PokeTowerF4Barriers
            self.Camera = self.Kanto.Pokemon_TowerF4Camera
        elif self.Events.Stage == "PokeTowerF5":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Pokemon_TowerF5Camera.add(self.Player)
            self.Barriers = self.Kanto.PokeTowerF5Barriers
            self.Camera = self.Kanto.Pokemon_TowerF5Camera
        elif self.Events.Stage == "PokeTowerF6":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Pokemon_TowerF6Camera.add(self.Player)
            self.Barriers = self.Kanto.PokeTowerF6Barriers
            self.Camera = self.Kanto.Pokemon_TowerF6Camera
        elif self.Events.Stage == "PokeTowerF7":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Pokemon_TowerF7Camera.add(self.Player)
            self.Barriers = self.Kanto.PokeTowerF7Barriers
            self.Camera = self.Kanto.Pokemon_TowerF7Camera
        elif self.Events.Stage == "R16GuardTower":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.R16GuardHouseCamera.add(self.Player)
            self.Barriers = self.Kanto.R16GuardHouseBarriers
            self.Camera = self.Kanto.R16GuardHouseCamera
        elif self.Events.Stage == "R16GuardTowerF2":
            self.Kanto.R16GuardHouseCamera.remove(self.Player)
            self.Kanto.R16GuardHouseF2Camera.add(self.Player)
            self.Barriers = self.Kanto.R16GuardHouseF2Barriers
            self.Camera = self.Kanto.R16GuardHouseF2Camera
        elif self.Events.Stage == "R16H2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.R16House2Camera.add(self.Player)
            self.Barriers = self.Kanto.R16House2Barriers
            self.Camera = self.Kanto.R16House2Camera
        elif self.Events.Stage == "R18GuardTower":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.R18GuardHouseCamera.add(self.Player)
            self.Barriers = self.Kanto.R18GuardHouseBarriers
            self.Camera = self.Kanto.R18GuardHouseCamera
        elif self.Events.Stage == "R18GuardTowerF2":
            self.Kanto.R18GuardHouseCamera.remove(self.Player)
            self.Kanto.R18GuardHouseF2Camera.add(self.Player)
            self.Barriers = self.Kanto.R18GuardHouseF2Barriers
            self.Camera = self.Kanto.R18GuardHouseF2Camera
        elif self.Events.Stage == "FCH1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.FCH1Camera.add(self.Player)
            self.Barriers = self.Kanto.FCH1Barriers
            self.Camera = self.Kanto.FCH1Camera
        elif self.Events.Stage == "FCH2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.FCH2Camera.add(self.Player)
            self.Barriers = self.Kanto.FCH2Barriers
            self.Camera = self.Kanto.FCH2Camera
        elif self.Events.Stage == "FCH3":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.FCH3Camera.add(self.Player)
            self.Barriers = self.Kanto.FCH3Barriers
            self.Camera = self.Kanto.FCH3Camera
        elif self.Events.Stage == "FCWH":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.FCWHCamera.add(self.Player)
            self.Barriers = self.Kanto.FCWHBarriers
            self.Camera = self.Kanto.FCWHCamera
        elif self.Events.Stage == "Safari Zone Entrance":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SZECamera.add(self.Player)
            self.Barriers = self.Kanto.SZEBarriers
            self.Camera = self.Kanto.SZECamera
        elif self.Events.Stage == "Safari Zone MA":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Safari_ZoneMZCamera.add(self.Player)
            self.Barriers = self.Kanto.SMZBarriers
            self.Camera = self.Kanto.Safari_ZoneMZCamera
        elif self.Events.Stage == "Safari Zone MAH1":
            self.Kanto.Safari_ZoneMZCamera.remove(self.Player)
            self.Kanto.SZMAH1Camera.add(self.Player)
            self.Barriers = self.Kanto.SZMAH1Barriers
            self.Camera = self.Kanto.SZMAH1Camera
        elif self.Events.Stage == "Safari Zone A1":
            self.Kanto.Safari_ZoneMZCamera.remove(self.Player)
            self.Kanto.Safari_ZoneA1Camera.add(self.Player)
            self.Barriers = self.Kanto.SA1Barriers
            self.Camera = self.Kanto.Safari_ZoneA1Camera
        elif self.Events.Stage == "Safari Zone A1RH":
            self.Kanto.Safari_ZoneA1Camera.remove(self.Player)
            self.Kanto.SZA1RestHouseCamera.add(self.Player)
            self.Barriers = self.Kanto.SZA1RHBarriers
            self.Camera = self.Kanto.SZA1RestHouseCamera
        elif self.Events.Stage == "Safari Zone A2":
            self.Kanto.Safari_ZoneA1Camera.remove(self.Player)
            self.Kanto.Safari_ZoneA2Camera.add(self.Player)
            self.Barriers = self.Kanto.SA2Barriers
            self.Camera = self.Kanto.Safari_ZoneA2Camera
        elif self.Events.Stage == "Safari Zone A2RH":
            self.Kanto.Safari_ZoneA2Camera.remove(self.Player)
            self.Kanto.SZA2RestHouseCamera.add(self.Player)
            self.Barriers = self.Kanto.SZA2RHBarriers
            self.Camera = self.Kanto.SZA2RestHouseCamera
        elif self.Events.Stage == "Safari Zone A3":
            self.Kanto.Safari_ZoneA2Camera.remove(self.Player)
            self.Kanto.Safari_ZoneA3Camera.add(self.Player)
            self.Barriers = self.Kanto.SA3Barriers
            self.Camera = self.Kanto.Safari_ZoneA3Camera
        elif self.Events.Stage == "Safari Zone A3RH":
            self.Kanto.Safari_ZoneA3Camera.remove(self.Player)
            self.Kanto.SZA3RestHouseCamera.add(self.Player)
            self.Barriers = self.Kanto.SZA3RHBarriers
            self.Camera = self.Kanto.SZA3RestHouseCamera
        elif self.Events.Stage == "Safari Zone SH":
            self.Kanto.Safari_ZoneA3Camera.remove(self.Player)
            self.Kanto.SZA3SHCamera.add(self.Player)
            self.Barriers = self.Kanto.SZA3SHBarriers
            self.Camera = self.Kanto.SZA3SHCamera
        elif self.Events.Stage == "FCGym":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.FCGymCamera.add(self.Player)
            self.Barriers = self.Kanto.FCGymBarriers
            self.Camera = self.Kanto.FCGymCamera
        elif self.Events.Stage == "SFH1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SFH1Camera.add(self.Player)
            self.Barriers = self.Kanto.SFH1Barriers
            self.Camera = self.Kanto.SFH1Camera
        elif self.Events.Stage == "Fighting Dojo":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Fighting_DojoCamera.add(self.Player)
            self.Barriers = self.Kanto.Fighting_DojoBarriers
            self.Camera = self.Kanto.Fighting_DojoCamera
        elif self.Events.Stage == "Silph Co. F1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Silph_CoF1Camera.add(self.Player)
            self.Barriers = self.Kanto.Silph_CoF1Barriers
            self.Camera = self.Kanto.Silph_CoF1Camera
        elif self.Events.Stage == "Silph Co. F2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Silph_CoF2Camera.add(self.Player)
            self.Barriers = self.Kanto.Silph_CoF2Barriers
            self.Camera = self.Kanto.Silph_CoF2Camera
        elif self.Events.Stage == "Silph Co. F3":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Silph_CoF3Camera.add(self.Player)
            self.Barriers = self.Kanto.Silph_CoF3Barriers
            self.Camera = self.Kanto.Silph_CoF3Camera
        elif self.Events.Stage == "Silph Co. F4":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Silph_CoF4Camera.add(self.Player)
            self.Barriers = self.Kanto.Silph_CoF4Barriers
            self.Camera = self.Kanto.Silph_CoF4Camera
        elif self.Events.Stage == "Silph Co. F5":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Silph_CoF5Camera.add(self.Player)
            self.Barriers = self.Kanto.Silph_CoF5Barriers
            self.Camera = self.Kanto.Silph_CoF5Camera
        elif self.Events.Stage == "Silph Co. F6":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Silph_CoF6Camera.add(self.Player)
            self.Barriers = self.Kanto.Silph_CoF6Barriers
            self.Camera = self.Kanto.Silph_CoF6Camera
        elif self.Events.Stage == "Silph Co. F7":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Silph_CoF7Camera.add(self.Player)
            self.Barriers = self.Kanto.Silph_CoF7Barriers
            self.Camera = self.Kanto.Silph_CoF7Camera
        elif self.Events.Stage == "Silph Co. F8":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Silph_CoF8Camera.add(self.Player)
            self.Barriers = self.Kanto.Silph_CoF8Barriers
            self.Camera = self.Kanto.Silph_CoF8Camera
        elif self.Events.Stage == "Silph Co. F9":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Silph_CoF9Camera.add(self.Player)
            self.Barriers = self.Kanto.Silph_CoF9Barriers
            self.Camera = self.Kanto.Silph_CoF9Camera
        elif self.Events.Stage == "Silph Co. F10":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Silph_CoF10Camera.add(self.Player)
            self.Barriers = self.Kanto.Silph_CoF10Barriers
            self.Camera = self.Kanto.Silph_CoF10Camera
        elif self.Events.Stage == "Silph Co. F11":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Silph_CoF11Camera.add(self.Player)
            self.Barriers = self.Kanto.Silph_CoF11Barriers
            self.Camera = self.Kanto.Silph_CoF11Camera
        elif self.Events.Stage == "SilCoElevator":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Silph_CoElevatorCamera.add(self.Player)
            self.Barriers = self.Kanto.Silph_CoElevatorBarriers
            self.Camera = self.Kanto.Silph_CoElevatorCamera
        elif self.Events.Stage == "SFH2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SFH2Camera.add(self.Player)
            self.Barriers = self.Kanto.SFH2Barriers
            self.Camera = self.Kanto.SFH2Camera
        elif self.Events.Stage == "SFH3F1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SFH3F1Camera.add(self.Player)
            self.Barriers = self.Kanto.SFH3F1Barriers
            self.Camera = self.Kanto.SFH3F1Camera
        elif self.Events.Stage == "SFH3F2":
            self.Kanto.SFH3F1Camera.remove(self.Player)
            self.Kanto.SFH3F2Camera.add(self.Player)
            self.Barriers = self.Kanto.SFH3F2Barriers
            self.Camera = self.Kanto.SFH3F2Camera
        elif self.Events.Stage == "SFGym":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SFGymCamera.add(self.Player)
            self.Barriers = self.Kanto.SFGymBarriers
            self.Camera = self.Kanto.SFGymCamera
        elif self.Events.Stage == "R12GH":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.R12GHCamera.add(self.Player)
            self.Barriers = self.Kanto.R12GuardHouseBarriers
            self.Camera = self.Kanto.R12GHCamera
        elif self.Events.Stage == "R12GHF2":
            self.Kanto.R12GHCamera.remove(self.Player)
            self.Kanto.R12GHF2Camera.add(self.Player)
            self.Barriers = self.Kanto.R12GuardHouseF2Barriers
            self.Camera = self.Kanto.R12GHF2Camera
        elif self.Events.Stage == "R12H":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.R12HCamera.add(self.Player)
            self.Barriers = self.Kanto.R12HBarriers
            self.Camera = self.Kanto.R12HCamera
        elif self.Events.Stage == "R15GH":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.R15GHCamera.add(self.Player)
            self.Barriers = self.Kanto.R15GuardHouseBarriers
            self.Camera = self.Kanto.R15GHCamera
        elif self.Events.Stage == "R15GHF2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.R15GHF2Camera.add(self.Player)
            self.Barriers = self.Kanto.R15GuardHouseF2Barriers
            self.Camera = self.Kanto.R15GHF2Camera
        elif self.Events.Stage == "Pokemon Lab Hall":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Pokemon_LabHallCamera.add(self.Player)
            self.Barriers = self.Kanto.Pokemon_LabHallBarriers
            self.Camera = self.Kanto.Pokemon_LabHallCamera
        elif self.Events.Stage == "Pokemon Lab Meeting Room":
            self.Kanto.Pokemon_LabHallCamera.remove(self.Player)
            self.Kanto.Pokemon_LabMRCamera.add(self.Player)
            self.Barriers = self.Kanto.Pokemon_LabMRBarriers
            self.Camera = self.Kanto.Pokemon_LabMRCamera
        elif self.Events.Stage == "Pokemon Lab R-and-D Room":
            self.Kanto.Pokemon_LabHallCamera.remove(self.Player)
            self.Kanto.Pokemon_LabRDCamera.add(self.Player)
            self.Barriers = self.Kanto.Pokemon_LabRDBarriers
            self.Camera = self.Kanto.Pokemon_LabRDCamera
        elif self.Events.Stage == "Pokemon Lab Testing Room":
            self.Kanto.Pokemon_LabHallCamera.remove(self.Player)
            self.Kanto.Pokemon_LabTRCamera.add(self.Player)
            self.Barriers = self.Kanto.Pokemon_LabTRBarriers
            self.Camera = self.Kanto.Pokemon_LabTRCamera
        elif self.Events.Stage == "Pokemon MansionF1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Pokemon_MansionF1Camera.add(self.Player)
            self.Barriers = self.Kanto.PokeMansionF1Barriers
            self.Camera = self.Kanto.Pokemon_MansionF1Camera
        elif self.Events.Stage == "Pokemon MansionF2":
            self.Kanto.Pokemon_MansionF1Camera.remove(self.Player)
            self.Kanto.Pokemon_MansionF2Camera.add(self.Player)
            self.Barriers = self.Kanto.PokeMansionF2Barriers
            self.Camera = self.Kanto.Pokemon_MansionF2Camera
        elif self.Events.Stage == "Pokemon MansionF3":
            self.Kanto.Pokemon_MansionF2Camera.remove(self.Player)
            self.Kanto.Pokemon_MansionF3Camera.add(self.Player)
            self.Barriers = self.Kanto.PokeMansionF3Barriers
            self.Camera = self.Kanto.Pokemon_MansionF3Camera
        elif self.Events.Stage == "Pokemon MansionFB1":
            self.Kanto.Pokemon_MansionF3Camera.remove(self.Player)
            self.Kanto.Pokemon_MansionFB1Camera.add(self.Player)
            self.Barriers = self.Kanto.PokeMansionFB1Barriers
            self.Camera = self.Kanto.Pokemon_MansionFB1Camera
        elif self.Events.Stage == "CGym":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.CGymCamera.add(self.Player)
            self.Barriers = self.Kanto.CGymBarriers
            self.Camera = self.Kanto.CGymCamera
        elif self.Events.Stage == "VGym":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.VGymCamera.add(self.Player)
            self.Barriers = self.Kanto.VGymBarriers
            self.Camera = self.Kanto.VGymCamera
        elif self.Events.Stage == "Victory Road F1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.VRoadF1Camera.add(self.Player)
            self.Barriers = self.Kanto.VRoadF1Barriers
            self.Camera = self.Kanto.VRoadF1Camera
        elif self.Events.Stage == "Victory Road F2":
            self.Kanto.VRoadF1Camera.remove(self.Player)
            self.Kanto.VRoadF2Camera.add(self.Player)
            self.Barriers = self.Kanto.VRoadF2Barriers
            self.Camera = self.Kanto.VRoadF2Camera
        elif self.Events.Stage == "Victory Road F3":
            self.Kanto.VRoadF2Camera.remove(self.Player)
            self.Kanto.VRoadF3Camera.add(self.Player)
            self.Barriers = self.Kanto.VRoadF3Barriers
            self.Camera = self.Kanto.VRoadF3Camera
        elif self.Events.Stage == "Indigo Plateau Entrance":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.IndigoPlateauEntranceCamera.add(self.Player)
            self.Barriers = self.Kanto.IndigoLeagueEntranceBarriers
            self.Camera = self.Kanto.IndigoPlateauEntranceCamera
        elif self.Events.Stage == "Indigo Plateau E1":
            self.Kanto.IndigoPlateauEntranceCamera.remove(self.Player)
            self.Kanto.IndigoPlateauE1Camera.add(self.Player)
            self.Barriers = self.Kanto.IndigoPlateauE1Barriers
            self.Camera = self.Kanto.IndigoPlateauE1Camera
        elif self.Events.Stage == "Indigo Plateau E2":
            self.Kanto.IndigoPlateauE1Camera.remove(self.Player)
            self.Kanto.IndigoPlateauE2Camera.add(self.Player)
            self.Barriers = self.Kanto.IndigoPlateauE2Barriers
            self.Camera = self.Kanto.IndigoPlateauE2Camera
        elif self.Events.Stage == "Indigo Plateau E3":
            self.Kanto.IndigoPlateauE2Camera.remove(self.Player)
            self.Kanto.IndigoPlateauE3Camera.add(self.Player)
            self.Barriers = self.Kanto.IndigoPlateauE3Barriers
            self.Camera = self.Kanto.IndigoPlateauE3Camera
        elif self.Events.Stage == "Indigo Plateau E4":
            self.Kanto.IndigoPlateauE3Camera.remove(self.Player)
            self.Kanto.IndigoPlateauE4Camera.add(self.Player)
            self.Barriers = self.Kanto.IndigoPlateauE4Barriers
            self.Camera = self.Kanto.IndigoPlateauE4Camera
        elif self.Events.Stage == "Indigo Plateau Champion":
            self.Kanto.IndigoPlateauE4Camera.remove(self.Player)
            self.Kanto.IndigoPlateauChampionCamera.add(self.Player)
            self.Barriers = self.Kanto.IndigoPlateauChampionBarriers
            self.Camera = self.Kanto.IndigoPlateauChampionCamera
        elif self.Events.Stage == "Hall of Fame":
            self.Kanto.IndigoPlateauChampionCamera.remove(self.Player)
            self.Kanto.Fame_HallCamera.add(self.Player)
            self.Barriers = []
            self.Camera = self.Kanto.Fame_HallCamera
        elif self.Events.Stage == "Power Plant":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Power_PlantCamera.add(self.Player)
            self.Barriers = self.Kanto.PowerPlantBarriers
            self.Camera = self.Kanto.Power_PlantCamera
        elif self.Events.Stage == "SeaFoam Islands F1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SeaFoam_IslandF1Camera.add(self.Player)
            self.Barriers = self.Kanto.SeaFoam_IslandF1Barriers
            self.Camera = self.Kanto.SeaFoam_IslandF1Camera
        elif self.Events.Stage == "SeaFoam Islands FB1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SeaFoam_IslandFB1Camera.add(self.Player)
            self.Barriers = self.Kanto.SeaFoam_IslandFB1Barriers
            self.Camera = self.Kanto.SeaFoam_IslandFB1Camera
        elif self.Events.Stage == "SeaFoam Islands FB2":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SeaFoam_IslandFB2Camera.add(self.Player)
            self.Barriers = self.Kanto.SeaFoam_IslandFB2Barriers
            self.Camera = self.Kanto.SeaFoam_IslandFB2Camera
        elif self.Events.Stage == "SeaFoam Islands FB3":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SeaFoam_IslandFB3Camera.add(self.Player)
            self.Barriers = self.Kanto.SeaFoam_IslandFB3Barriers
            self.Camera = self.Kanto.SeaFoam_IslandFB3Camera
        elif self.Events.Stage == "SeaFoam Islands FB4":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.SeaFoam_IslandFB4Camera.add(self.Player)
            self.Barriers = self.Kanto.SeaFoam_IslandFB4Barriers
            self.Camera = self.Kanto.SeaFoam_IslandFB4Camera
        elif self.Events.Stage == "Cerulean Cave F1":
            self.Kanto.OverworldCamera.remove(self.Player)
            self.Kanto.Cerulean_CaveF1Camera.add(self.Player)
            self.Barriers = self.Kanto.Cerulean_CaveF1Barriers
            self.Camera = self.Kanto.Cerulean_CaveF1Camera
        elif self.Events.Stage == "Cerulean Cave BF":
            self.Kanto.Cerulean_CaveF1Camera.remove(self.Player)
            self.Kanto.Cerulean_CaveBFCamera.add(self.Player)
            self.Barriers = self.Kanto.Cerulean_CaveBFBarriers
            self.Camera = self.Kanto.Cerulean_CaveBFCamera
        elif self.Events.Stage == "Cerulean Cave F2":
            self.Kanto.Cerulean_CaveF1Camera.remove(self.Player)
            self.Kanto.Cerulean_CaveF2Camera.add(self.Player)
            self.Barriers = self.Kanto.Cerulean_CaveF2Barriers
            self.Camera = self.Kanto.Cerulean_CaveF2Camera

    def NPC_Interaction(self,NPC,Colliderect:pygame.Rect = pygame.Rect(0,0,1,1),UseRect:bool = False):
        if self.Player.rect.colliderect(NPC.rect) or (UseRect and self.Player.rect.colliderect(Colliderect)):
            if NPC.type in ("Dialogue","Healer","Giver","AfterBattleDialogue"):
                if not self.No and not self.Yes:
                    self.Interact("Talk")
            if NPC.type == "Merchant":
                self.Interact("Do you want something")
            if NPC.type == "Dialogue":
                if self.Yes:
                    self.DialougePause = True
                    self.Events.Dialouge(f"{NPC.Name}:{NPC.Text1_a}",NPC.Text1_b,NPC.Text1_c)
                elif self.No:
                    self.No = False
            if NPC.type == "Healer":
                if self.Yes:
                    self.DialougePause = True
                    self.Player.Full_Team_Heal()
                    self.Events.Dialouge(f"{NPC.Name}:{NPC.Text1_a}",NPC.Text1_b,NPC.Text1_c)
                elif self.No:
                    self.No = False
            if NPC.type == "Giver":
                if self.Yes:
                    self.DialougePause = True
                    if not self.GiverNPCCheck:
                        if NPC.ItemAmount == 0:
                            self.NPC_CHange(NPC,NPC.IA1,"Giver",NPC.IA2,NPC.IA3)
                    self.Events.Dialouge(f"{NPC.Name}:{NPC.Text1_a}",NPC.Text1_b,NPC.Text1_c)
                    if NPC.ItemAmount > 0:
                        self.Player.Add_Bag(NPC.Item,NPC.ItemAmount)
                        NPC.ItemAmount = 0
                    self.GiverNPCCheck = True
                elif self.No:
                    self.No = False
            if NPC.type == "Merchant":
                if self.Yes:
                    self.DialougePause = True
                    self.Merchant_Store(NPC.Store)
                    if self.Back:
                        self.DialougePause = False
                        self.Yes = False
                elif self.No:
                    self.No = False
            if NPC.type == "Trader":
                if not NPC.Traded:
                    self.Interact(f"Want to trade your {NPC.YourPokemon} for my {NPC.HisPokemon}")
                    if self.Yes:
                        if self.Player.GetPokemon(NPC.YourPokemon):
                            self.Player.TradingPokemon(NPC.HisPokemon,NPC.YourPokemon,NPC.PokemonNickname)
                            self.Yes = False
                            Game.AddPokeDex(NPC.HisPokemon,True)
                            NPC.Traded = True
                        else:
                            self.Yes = False
                    else:self.No = False
                else:
                    self.Events.Dialouge(f"{NPC.Name}:{NPC.Text1_a}",NPC.Text1_b,NPC.Text1_c)
            if NPC.type == "AfterBattleDialogue":
                if self.Yes:
                    self.DialougePause = True
                    self.Events.Dialouge(f"{NPC.Name}:{NPC.Text[0]}",NPC.Text[1],NPC.Text[2])

    def NPC_CHange(self,NPC,NewText:str,Type:str,NewText2:str='0',NewText3:str='0'):
        NPC.Text1_a = NewText
        NPC.type = Type
        if NewText2 != '0': NPC.Text1_b = NewText2
        if NewText3 != '0':NPC.Text1_c = NewText3

    def AddPokeDex(self,PokeName:str,Caught:bool = False):
        if Caught:
            if  PokeName not in self.Pokemon_Caught: self.Pokemon_Caught.append(PokeName)
        if PokeName not in self.Pokemon_Seen:self.Pokemon_Seen.append(PokeName)

    def TerrainControl(self):
        for Landmark in self.Kanto.Terrains:
            if Landmark.Rect.contains(self.Player.rect):
                self.Events.OverworldLocation = Landmark.Land

    def Reset_Trainer_Positions(self):
        for trainers in self.OtherTrainers:
            for trainer in trainers:
                if self.Camera != trainer.group:
                    trainer.Back_to_Pos()

    def Make_RivalTeam(self,LV:int,CM:list[str],BM:list[str],SM:list[str],CT:list[Pokemon],BT:list[Pokemon],ST:list[Pokemon],Stage:int=1):
        RP = Pokemon
        Rival_Team = [Pokemon]
        if Stage == 1:
            if self.Events.PlayerPoke == "Bulbasaur":
                RP = Pokemon("Charmander",LV,CM,self.RivalName,"Charmander")
                Rival_Team = CT
            elif self.Events.PlayerPoke == "Squirtle":
                RP = Pokemon("Bulbasaur",LV,BM,self.RivalName,"Bulbasaur")
                Rival_Team = BT
            elif self.Events.PlayerPoke == "Charmander":
                RP = Pokemon("Squirtle",LV,SM,self.RivalName,"Squirtle")
                Rival_Team = ST
        elif Stage == 2:
            if self.Events.PlayerPoke == "Bulbasaur":
                RP = Pokemon("Charmeleon",LV,CM,self.RivalName,"Charmeleon")
                Rival_Team = CT
            elif self.Events.PlayerPoke == "Squirtle":
                RP = Pokemon("Ivysaur",LV,BM,self.RivalName,"Ivysaur")
                Rival_Team = BT
            elif self.Events.PlayerPoke == "Charmander":
                RP = Pokemon("Wartortle",LV,SM,self.RivalName,"Wartortle")
                Rival_Team = ST
        elif Stage == 3:
            if self.Events.PlayerPoke == "Bulbasaur":
                RP = Pokemon("Charizard",LV,CM,self.RivalName,"Charizard")
                Rival_Team = CT
            elif self.Events.PlayerPoke == "Squirtle":
                RP = Pokemon("Venusaur",LV,BM,self.RivalName,"Venusaur")
                Rival_Team = BT
            elif self.Events.PlayerPoke == "Charmander":
                RP = Pokemon("Blastoise",LV,SM,self.RivalName,"Blastoise")
                Rival_Team = ST
        Rival_Team.append(RP)
        return Rival_Team

    def Make_OakTeam(self):
        if self.Events.PlayerPoke == "Bulbasaur":
            RP = Pokemon("Charizard",69,["Rage","Slash","Flamethrower","Fire Spin"],"Oak","Charizard")
        elif self.Events.PlayerPoke == "Squirtle":
            RP = Pokemon("Venusaur",69,["Razor Leaf","Growth","Sleep Powder","SolarBeam"],"Oak","Venusaur")
        elif self.Events.PlayerPoke == "Charmander":
            RP = Pokemon("Blastoise",69,["Bite","Withdraw","Skull Bash","Hydro Pump"],"Oak","Blastoise")
        self.Kanto.BattlerOak.Team.insert(2,RP)

    def TrainerEncounters(self,Trainers):
        for trainer in Trainers:
            trainer.TextChange()
            if trainer.Vision != None and trainer.Vision.contains(self.Player.rect) and not trainer.Battled:
                self.Player_Pause = True
                self.TrainerSeen = True
                if trainer.Side == "Right":
                    trainer.rect.left = self.Player.rect.right + 6
                    if self.Player.Bike:self.Player.image = self.Player.Bike_Idle_Right
                    elif self.Player.Surf:self.Player.image = self.Player.Swim_Idle_Right
                    else:self.Player.image = self.Player.Idle_Right
                if trainer.Side == "Left":
                    trainer.rect.right = self.Player.rect.left - 6
                    if self.Player.Bike:self.Player.image = self.Player.Bike_Idle_Left
                    elif self.Player.Surf:self.Player.image = self.Player.Swim_Idle_Left
                    else:self.Player.image = self.Player.Idle_Left
                if trainer.Side == "Top":
                    trainer.rect.bottom = self.Player.rect.top + 0.5
                    if self.Player.Bike:self.Player.image = self.Player.Bike_Idle_Up
                    elif self.Player.Surf:self.Player.image = self.Player.Swim_Idle_Up
                    else:self.Player.image = self.Player.Idle_Up
                if trainer.Side == "Bottom":
                    trainer.rect.top = self.Player.rect.bottom - 1
                    if self.Player.Bike:self.Player.image = self.Player.Bike_Idle_Down
                    elif self.Player.Surf:self.Player.image = self.Player.Swim_Idle_Down
                    else:self.Player.image = self.Player.Idle_Down
                self.Events.Dialouge(*trainer.preBattleText)
                if self.NPCTrainerBattle:
                    self.TrainerBattle(trainer.Team,trainer.Name,trainer.WinnerText,[f"{trainer.Name}: Yeah! I win",'',''],trainer.Trainer_img,trainer.Money,trainer.Bag)
                    self.Start_Battle_Animation()
                    if self.ExitBattle:
                        self.NPCTrainerBattle = False
                        self.DialougePause = False
                        if self.State_of_Battle == "Win":trainer.Battled = True
                        self.Player_Pause = False
                        self.ExitBattle = False
            elif self.Player.rect.colliderect(trainer.rect):
                self.Interact("Talk")
                if self.Yes:
                    self.Events.Dialouge(*trainer.Text)
                    if not trainer.Battled:
                        self.TrainerSeen = True
                        self.Player_Pause = True
                        if self.NPCTrainerBattle:
                            self.TrainerBattle(trainer.Team,trainer.Name,trainer.WinnerText,[f"{trainer.Name}: Yeah! I win",'',''],trainer.Trainer_img,trainer.Money,trainer.Bag)
                            self.Start_Battle_Animation()
                            if self.ExitBattle:
                                self.NPCTrainerBattle = False
                                if self.State_of_Battle == "Win":trainer.Battled = True
                                self.Player_Pause = False
                                self.DialougePause = False
                                self.ExitBattle = False
                                self.Yes = False
                    else:
                        self.DialougePause = True
                if self.No:
                    self.No = False

    def GymLeaderEncounter(self,GymLeader):
        if self.Player.rect.colliderect(GymLeader.rect) and not self.GymLeaderGiveTM:
            self.Interact("Talk")
            if self.Yes:
                self.DialougePause = True
                if not self.GymLeaderBattle and not GymLeader.Battled:
                    self.GymLeaderStartText = True
                    self.DialougePause = True
                    self.Events.Dialouge(*GymLeader.BeginningText)
                elif GymLeader.Battled:
                    self.Events.Dialouge(*GymLeader.AftermathText)
            if self.No:self.No = False
        
    def E4Encounter(self,Member):
        if self.Player.rect.colliderect(Member.rect):
            self.Interact("Talk")
            if self.Yes:
                self.DialougePause = True
                if not self.E4Battle and not Member.Battled:
                    self.E4StartText = True
                    self.DialougePause = True
                    self.Events.Dialouge(*Member.BeginningText)
                elif Member.Battled and not self.E4Aftertext:
                    self.Events.Dialouge(*Member.AftermathText)
            if self.No:self.No = False

    def SwitchinCans(self) -> int:
        count = 0
        for i in self.Kanto.ThirdGymTrashcans:
            if i.HasSwitch:count += 1
        return count

    def ShuffleSwitchs(self):
        O = 0
        N = 0
        P = 0
        if self.SwitchinCans() < 2:
            Trashcan = random.choice(self.Kanto.ThirdGymTrashcans)
            if Trashcan.HasSwitch:Trashcan = random.choice(self.Kanto.ThirdGymTrashcans)
            if not Trashcan.HasSwitch:
                self.Kanto.ThirdGymTrashcans.remove(Trashcan)
                O = random.randint(0,len(self.Kanto.ThirdGymTrashcans) - 1)
                N= O +1
                P = O -1
                Trashcan.HasSwitch = True
                self.Kanto.ThirdGymTrashcans.insert(O,Trashcan)
                try:self.Kanto.ThirdGymTrashcans[N].HasSwitch = True
                except:self.Kanto.ThirdGymTrashcans[P].HasSwitch = True
    
    def EmptySwitches(self):
        for i in range(len(self.Kanto.ThirdGymTrashcans)):
            self.Kanto.ThirdGymTrashcans[i].HasSwitch = False
            self.Kanto.ThirdGymTrashcans[i].SwitchOn = False

    def GuessingSwitchs(self):
        for i,can in enumerate(self.Kanto.ThirdGymTrashcans):
            if self.Player.rect.colliderect(can.Rect):
                self.Interact("Check for Switches?")
                if self.Yes:
                    self.Player_Pause = True
                    if can.HasSwitch and not self.Kanto.ThirdGymTrashcans[i].SwitchOn:
                        if self.CheckSwitches() == 0:self.Events.Dialouge("Looks like there's a switch here")
                        else:self.Events.Dialouge("Looks like there's a switch here","And the barrier disappeared")
                    elif can.HasSwitch and self.Kanto.ThirdGymTrashcans[i].SwitchOn:
                        self.Events.Dialouge("The Switch is already on")
                    elif not can.HasSwitch:
                        if self.CheckSwitches() == 0:self.Events.Dialouge("No Switch")
                        else:self.Events.Dialouge("No Switch and it seems like the other switch shut off")

    def Put_PostGameNPCs(self):
        for npc in self.Kanto.PostgameNPCS:
            self.Kanto.OverworldCamera.add(npc)
            self.Kanto.OverworldNPCS.append(npc)
            self.Kanto.OverworldBarriers.append(npc.rect)

    def CheckSwitches(self) -> int:
        count = 0
        for i in self.Kanto.ThirdGymTrashcans:
            if i.HasSwitch and i.SwitchOn:count += 1
        return count

    def Interactions(self):
        spawnpoint1 = (0,0)
        spawnpoint2 = (0,0)
        self.PlayerSpeed()
        if self.Events.HiddenItemPickedup:self.Events.Dialouge("You found something")
        if self.Events.Stage in ("SPlayerRoom","PlayerRoom"):
            self.Readables(self.Kanto.PlayerRoomReadables)
            for object in self.Kanto.PlayerRoomInteracts:
                if self.Player.rect.colliderect(object.Rect):
                    self.Interact("Open?")
                    if self.Yes:
                        self.HomePC = True
                        self.Pc = True
                        self.PCItemsUpdate()
                        if self.ExitPC:
                            self.Yes = False
                            self.ExitPC = False
                    elif self.No:
                        self.No = False
            self.Transitions(self.Kanto.PlayerHouse1_0Transport,self.Kanto.PlayerDHouseSpawnpoint)
        elif self.Events.Stage in ("PlayerHouse_Ground"):
            if self.Player.Pokemon:
                self.NPC_CHange(self.Kanto.Mom,f"{self.PlayerName}! You should take a quick rest.","Healer","Oh good! You and your POKEMON are looking great! Take care now!")
            self.Readables(self.Kanto.PlayerHouse0Readables)
            self.Transitions(self.Kanto.PlayerHouse0_1Transport,self.Kanto.PlayerDHouseSpawnpoint)
            self.Transitions(self.Kanto.PlayerHouse0_OTransport,self.Kanto.PLayerHouseOSpawn)
            self.Healplace = ["OverWorld",self.Kanto.PLayerHouseOSpawn]
            if not Two_D_ListCheck(self.PlayerMap.FlyLocations,self.Events.OverworldLocation):self.PlayerMap.FlyLocations.append([self.Events.OverworldLocation,self.Kanto.PLayerHouseOSpawn])
            self.NPC_Interaction(self.Kanto.Mom)
        elif self.Events.Stage == "OverWorld": 
            for i,Item in enumerate(self.Kanto.OverworldHiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.OverworldHiddenItems[i].Picked = True
            self.TerrainControl()
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.OverworldHiddenItems)
                self.Player.ItemFinderPing = False
            if self.Player.Get_BadgeInfo("Cascade",Name=True):self.Use_Cut()
            self.Readables(self.Kanto.OverworldReadables)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.OverworldGrassBlocks)
            self.Cliff_Blocks()
            self.CheckFishingReq(self.Kanto.OverworldFishingPoint)
            if self.Events.FishingCutscene:
                self.Player_Pause = True
                self.Player.image = self.Player.Fishing_pos
                if self.Player.FishCaught:self.Events.Dialouge("You caught something!")
            if self.Events.FishFight:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.Player_Pause = False
                self.BattleStart = False
                self.Player.Moveable = True
                self.Events.FishFight = False
                self.Player.Fishing_Rod = ""
            self.Kanto.OverworldPickups,self.Kanto.OverworldCamera = self.Pickup(self.Kanto.OverworldPickups,self.Kanto.OverworldCamera)
            for npc in self.Kanto.OverworldNPCS: self.NPC_Interaction(npc)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.OverworldGrassBlocks)
                self.Player.Moveable = True
                self.WildBattle = False
            if self.Events.OverworldLocation == "Pallet Town":
                for sign in self.Kanto.OverworldReadables:
                    if sign.Name == "RedHouseSign":
                        sign.Text = f"{self.PlayerName}'s House"
                    elif sign.Name == "RivalHouseSign":
                        sign.Text = f"{self.RivalName}'s House"
                self.Transitions(self.Kanto.PlayerHouseO_0Transport,self.Kanto.PlayerHouseO_0Spawnpoint)
                self.Transitions(self.Kanto.Overworld_RivalHouseTransport,self.Kanto.RivalHouseSpawn)
                self.Transitions(self.Kanto.Overworld_OakLabTransport,self.Kanto.OakLabSpawn)
                if self.Kanto.Oak_Cutscene_Line.colliderect(self.Player.rect) and not self.Player.Pokemon:
                    self.Events.OakCutscene1 = True
                if self.Events.OakCutscene1:
                    self.Player_Pause = True
                    self.Kanto.OverworldCamera.add(self.Kanto.Cutscene1Oak)
                    self.Events.Dialouge("Oak :Hey! Wait! Don't go out! It's unsafe! Wild POKEMON live in tall grass!","I know! Here, come with me to my lab!")
            if self.Events.OverworldLocation == "Route 1":
                for npc in self.Kanto.R1NPCS:self.NPC_Interaction(npc)
            if self.Events.OverworldLocation == "Viridian City":
                for npc in self.Kanto.ViridainCityNPCS: self.NPC_Interaction(npc)
                self.Transitions(self.Kanto.O_VPokeMartDoor,self.Kanto.PokemonMartSpawn)
                self.Transitions(self.Kanto.O_VPokeCenterDoor,self.Kanto.PokemonCenterSpawn)
                self.Transitions(self.Kanto.VH1Door,self.Kanto.VH1Spawn)
                self.Transitions(self.Kanto.VH2Door,self.Kanto.VH2Spawn)
                self.Transitions(self.Kanto.O_VGymDoor,self.Kanto.O_VGymSpawn)
                if self.Player.Get_BadgeInfo() >= 7:
                    for npc in self.Kanto.ViridainCityNPCS:
                        if npc.Name == "Old Man":
                            self.NPC_CHange(npc,"VIRIDIAN GYM's LEADER returned!","Dialogue",NewText2="",NewText3="")
                if self.Player.rect.colliderect(self.Kanto.VGymBarrier) and self.Player.Get_BadgeInfo() < 7:
                    self.Player_Pause = True
                    self.Events.Dialouge("The Door is Locked")
                if not self.Events.HasPokeballs:
                    if self.Player.rect.colliderect(self.Kanto.PokeballLine):
                        self.Player_Pause = True
                        self.Events.Dialouge("You can't go through here! This is private property!")
                    self.Kanto.OverworldCamera.remove(self.Kanto.AVGrandpa)                 
                if self.Events.HasPokeballs:
                    if self.Kanto.AVGrandpa not in self.Kanto.ViridainCityNPCS: 
                        self.Kanto.ViridainCityNPCS.append(self.Kanto.AVGrandpa)
                        self.Kanto.OverworldBarriers.append(self.Kanto.AVGrandpa.rect)
                        self.Kanto.OverworldCamera.add(self.Kanto.AVGrandpa)
                        self.Kanto.OverworldCamera.remove(self.Kanto.VGrandpa)
                    try:
                        self.Kanto.ViridainCityNPCS.remove(self.Kanto.VGrandpa)
                        self.Kanto.OverworldBarriers.remove(self.Kanto.VGrandpa.rect)
                    except:pass
                    for npc in self.Kanto.ViridainCityNPCS:
                        if npc.Name == "Grandpa GrandDaughter":self.NPC_CHange(npc,"When I go shop in PEWTER CITY, I have to take the winding trail in VIRIDIAN FOREST.",npc.type)
            if self.Events.OverworldLocation == "Route 22":
                self.Transitions(self.Kanto.O_PokeLeagueDoor,self.Kanto.PokemonLeagueF1Spawn)
                if not self.Events.OptionalRivalFightDone:
                    if self.Player.rect.colliderect(self.Kanto.OptionalRivalBattleLine):
                        self.Player_Pause = True
                        self.Kanto.Rival.Team = self.Make_RivalTeam(8,["Scratch","Growl","Ember","-"],["Tackle","Growl","Leech Seed","-"],["Tackle","Tail Whip","Bubble","-"],[Pokemon("Pidgey",9,["Gust","Sand Attack",'-','-'],self.RivalName,"Pidgey")],[Pokemon("Pidgey",9,["Gust","Sand Attack",'-','-'],self.RivalName,"Pidgey")],[Pokemon("Pidgey",9,["Gust","Sand Attack",'-','-'],self.RivalName,"Pidgey")])
                        self.Kanto.Rival.image = pygame.image.load(r"Map\Tileset\NPCS\Rival_Idle_Left.png").convert_alpha()
                        self.Kanto.Rival.rect.center = self.Kanto.R22RivalSpot
                        self.Kanto.OverworldCamera.add(self.Kanto.Rival)
                        self.Player.image = self.Player.Idle_Right
                        if self.Events.OptionalRivalFightCutscene: self.Events.Dialouge(f"{self.RivalName}: Hey {self.PlayerName}, your going to the POKEMON LEAGUE","Forget it you probably don't have any Badges! The Guard wont let you","through. By the way did your POKEMON get any stronger")
                        if self.Events.OptionalRivalFight:
                            self.TrainerBattle(self.Kanto.Rival.Team,self.Kanto.Rival.Name,[f"{self.RivalName}: You just lucked out",'',''],[f"{self.RivalName}: Ha",'',''],self.Events.Rivalbattlestance,280,[])
                            self.Start_Battle_Animation()
                            if self.ExitBattle:
                                self.Events.OptionalRivalFight = False
                                if self.State_of_Battle == "Win":self.Events.OptionalRivalFightAftermath = True
                                else:
                                    self.Events.OptionalRivalFightCutscene = True
                                    self.Kanto.OverworldCamera.remove(self.Kanto.Rival)
                                self.ExitBattle = False
                        if self.Events.OptionalRivalFightAftermath:
                            self.Events.Dialouge(f"{self.RivalName}:I heard the POKEMON LEAGUE has many tough trainers","I have to figure out how to get past them!"," You should quit dawdling and get a move on!")
                if not self.Events.BPLRivalFightDone:
                    if self.Player.rect.colliderect(self.Kanto.BPLRivalBattleLine):
                        self.Player_Pause = True
                        self.Kanto.Rival.Team = self.Make_RivalTeam(53,["Rage","Slash","Flamethrower","Leer"],["Poison Powder","Razor Leaf","Growth","Vine Whip"],["Bite","Withdraw","Hydro Pump","Skull Bash"],
                                                                            [Pokemon("Pidgeot",47,["Wing Attack","Agility",'Quick Attack','Whirlwind'],self.RivalName,"Pidgeot"),Pokemon("Rhyhorn",45,["Fury Attack","Stomp",'Horn Attack','Tail Whip'],self.RivalName,"Rhyhorn"),Pokemon("Exeggcute",45,["SolarBeam","Poison Powder",'Leech Seed','Stun Spore'],self.RivalName,"Exeggcute"),Pokemon("Gyarados",47,["Leer","Dragon Rage",'Bite','Hydro Pump'],self.RivalName,"Gyarados"),Pokemon("Alakazam",50,["Psybeam","Psychic",'Reflect','Recover'],self.RivalName,"Alakazam")],
                                                                            [Pokemon("Pidgeot",47,["Wing Attack","Agility",'Quick Attack','Whirlwind'],self.RivalName,"Pidgeot"),Pokemon("Rhyhorn",45,["Fury Attack","Stomp",'Horn Attack','Tail Whip'],self.RivalName,"Rhyhorn"),Pokemon("Gyarados",45,["Leer","Dragon Rage",'Bite','Hydro Pump'],self.RivalName,"Gyarados"),Pokemon("Growlithe",47,["Leer","Agility",'Ember','Take Down'],self.RivalName,"Growlithe"),Pokemon("Alakazam",50,["Psybeam","Psychic",'Reflect','Recover'],self.RivalName,"Alakazam")],
                                                                            [Pokemon("Pidgeot",47,["Wing Attack","Agility",'Quick Attack','Whirlwind'],self.RivalName,"Pidgeot"),Pokemon("Rhyhorn",45,["Fury Attack","Stomp",'Horn Attack','Tail Whip'],self.RivalName,"Rhyhorn"),Pokemon("Growlithe",45,["Leer","Agility",'Ember','Take Down'],self.RivalName,"Growlithe"),Pokemon("Exeggcute",47,["SolarBeam","Poison Powder",'Leech Seed','Stun Spore'],self.RivalName,"Exeggcute"),Pokemon("Alakazam",50,["Psybeam","Psychic",'Reflect','Recover'],self.RivalName,"Alakazam")],Stage=3)
                        self.Kanto.Rival.image = pygame.image.load(r"Map\Tileset\NPCS\Rival_Idle_Right.png").convert_alpha()
                        self.Player.rect.centery = self.Kanto.BPLRivalSpot[1]
                        self.Kanto.Rival.rect.center = self.Kanto.BPLRivalSpot
                        self.Kanto.OverworldCamera.add(self.Kanto.Rival)
                        self.Player.image = self.Player.Idle_Left
                        if self.Events.BPLRivalFightCutscene: self.Events.Dialouge(f"{self.RivalName}:What? {self.PlayerName}! What a surprise to see you here! So you're going to","POKEMON LEAGUE? You collected all the BADGEs too? That's cool!",f"Then I'll whip you {self.PlayerName} as a warm up for POKEMON LEAGUE! Come on!")
                        if self.Events.BPLRivalFight:
                            self.TrainerBattle(self.Kanto.Rival.Team,self.Kanto.Rival.Name,[f"{self.RivalName}:What!? I was just careless!",'',''],[f"{self.RivalName}: Ha",'',''],self.Events.Rivalbattlestance,3445,[["Potion",6]])
                            self.Start_Battle_Animation()
                            if self.ExitBattle:
                                self.Events.BPLRivalFight = False
                                if self.State_of_Battle == "Win":self.Events.BPLRivalFightAftermath = True
                                else:
                                    self.Events.BPLRivalFightCutscene = True
                                    self.Kanto.OverworldCamera.remove(self.Kanto.Rival)
                                self.ExitBattle = False
                        if self.Events.BPLRivalFightAftermath:
                            self.Events.Dialouge(f"{self.RivalName}:That loosened me up! I'm ready for POKEMON LEAGUE! {self.PlayerName}, you","need more practice! But hey, you know that! I'm out of here. Smell ya!")
            if self.Events.OverworldLocation == "Route 2":
                self.Transitions(self.Kanto.R2_PVFTransport,self.Kanto.R2_PVFSpawn)
                self.Transitions(self.Kanto.O_AFDoor,self.Kanto.O_AFSpawn)
                self.Transitions(self.Kanto.O_DCExitDoor,self.Kanto.R11_DCESpawn)
                self.Transitions(self.Kanto.O_R21HDoor,self.Kanto.O_R21HSpawn)
                self.Transitions(self.Kanto.VO_R22HDoor,self.Kanto.VO_R22HSpawn)
                self.Transitions(self.Kanto.PO_R22HDoor,self.Kanto.PO_R22HSpawn)
            if self.Events.OverworldLocation == "Pewter City":
                self.Transitions(self.Kanto.PC_PH1Door,self.Kanto.O_PH1Spawn)
                self.Transitions(self.Kanto.PC_PH2Door,self.Kanto.O_PH2Spawn)
                self.Transitions(self.Kanto.PPokeCenterDoor,self.Kanto.PokemonCenterSpawn)
                self.Transitions(self.Kanto.PPokeMartDoor,self.Kanto.PokemonMartSpawn)
                self.Transitions(self.Kanto.O_PewterGymDoor,self.Kanto.O_PewterGymSpawn)
                self.Transitions(self.Kanto.O_PCMDoor,self.Kanto.O_PCM1Spawn)
                self.Transitions(self.Kanto.PCMuseum2Door,self.Kanto.O2_PCM1Spawn)
                if self.Player.rect.colliderect(self.Kanto.BrockBattleLine) and not self.Player.Get_BadgeInfo("Boulder",True):
                    self.DialougePause = True
                    self.Events.Dialouge("You're a trainer right? BROCK's looking for new challengers!")
            if self.Events.OverworldLocation == "Route 3":
                self.TrainerEncounters(self.OtherTrainers[2])
                for npc in self.Kanto.R3NPCS: self.NPC_Interaction(npc)
                self.Transitions(self.Kanto.R3_PokeCenterDoor,self.Kanto.PokemonCenterSpawn)
                self.Transitions(self.Kanto.R3_MtMoonDoor,self.Kanto.R3_MtMoonSpawn)
            if self.Events.OverworldLocation == "Route 4":
                self.TrainerEncounters(self.OtherTrainers[2])
                self.Transitions(self.Kanto.R4_MtMoonDoor,self.Kanto.R4_MtMoonSpawn)
            if self.Events.OverworldLocation == "Cerulean City":
                self.Transitions(self.Kanto.CC_PCDoor,self.Kanto.PokemonCenterSpawn)
                self.Transitions(self.Kanto.CC_PMDoor,self.Kanto.PokemonMartSpawn)
                self.Transitions(self.Kanto.O_CCH1Door,self.Kanto.O_InCCH1Spawn)
                self.Transitions(self.Kanto.BY_CCH1Door,self.Kanto.BY_CCH1Spawn)
                self.Transitions(self.Kanto.O_CCH2Door,self.Kanto.O_CCH2Spawn)
                self.Transitions(self.Kanto.O_BikeShopDoor,self.Kanto.O_BikeShopSpawn)
                self.Transitions(self.Kanto.O_CCGymDoor,self.Kanto.O_CeruleanGymSpawn)
                self.Transitions(self.Kanto.O_RHDoor,self.Kanto.O_RHSpawn)
                self.Transitions(self.Kanto.O2_RHDoor,self.Kanto.O2_RHSpawn)
                self.Transitions(self.Kanto.O_CCaveDoor,self.Kanto.O_CCaveSpawn)
                if not self.E4Beaten:self.NPC_Interaction(self.Kanto.CCaveMan)
                if self.E4Beaten:
                    try:
                        self.Kanto.OverworldCamera.remove(self.Kanto.CCaveMan)
                        self.Kanto.OverworldBarriers.remove(self.Kanto.CCaveMan.rect)
                    except:pass
                self.TrainerEncounters(self.OtherTrainers[2])
                for trainer in self.Kanto.OverworldTrainers:
                        if trainer.CompName == "CC1Rocket":
                            if (self.Player_Data["OtherTrainers28"] or trainer.Battled) and not self.Events.CCRocketFightDone:
                                self.Events.CCRocketFightDone = True
                                self.Player.Add_Bag("TM28",1)
                            elif self.Events.CCRocketFightDone:
                                self.Kanto.OverworldCamera.remove(trainer)
                                self.Kanto.OverworldTrainers.remove(trainer)
                                self.Kanto.OverworldBarriers.remove(trainer.rect)
                for i,npc in enumerate(self.Kanto.CCNPCS): 
                    if self.Events.SSTicketGot:
                        if npc.Name == "Police":
                            if npc.org_pos[0] == npc.rect.x:self.Kanto.CCNPCS[i].rect.centerx += 50
                    self.NPC_Interaction(npc)
                if not self.Events.CCRivalFightDone:
                    if self.Player.rect.colliderect(self.Kanto.CCRivalBattleLine):
                        self.Player_Pause = True
                        self.Kanto.Rival.Team = self.Make_RivalTeam(17,["Scratch","Growl","Ember","Leer"],["Tackle","Growl","Leech Seed","Vine Whip"],["Tackle","Tail Whip","Bubble","Water Gun"],[Pokemon("Pidgeotto",18,["Gust","Sand Attack",'Quick Attack','-'],self.RivalName,"Pidgeotto"),Pokemon("Abra",15,["Teleport","-",'-','-'],self.RivalName,"Abra"),Pokemon("Rattata",15,["Tackle","Tail Whip",'Quick Attack','Hyper Fang'],self.RivalName,"Rattata")],[Pokemon("Pidgeotto",18,["Gust","Sand Attack",'Quick Attack','-'],self.RivalName,"Pidgeotto"),Pokemon("Abra",15,["Teleport","-",'-','-'],self.RivalName,"Abra"),Pokemon("Rattata",15,["Tackle","Tail Whip",'Quick Attack','Hyper Fang'],self.RivalName,"Rattata")],[Pokemon("Pidgeotto",18,["Gust","Sand Attack",'Quick Attack','-'],self.RivalName,"Pidgeotto"),Pokemon("Abra",15,["Teleport","-",'-','-'],self.RivalName,"Abra"),Pokemon("Rattata",15,["Tackle","Tail Whip",'Quick Attack','Hyper Fang'],self.RivalName,"Rattata")])
                        self.Kanto.Rival.image = pygame.image.load(r"Map\Tileset\NPCS\Rival_Idle_Down.png").convert_alpha()
                        self.Player.rect.center = self.Kanto.CCRivalBattleSpot
                        self.Kanto.Rival.rect.center = (self.Kanto.CCRivalBattleSpot[0],self.Kanto.CCRivalBattleSpot[1] - 60)
                        self.Kanto.OverworldCamera.add(self.Kanto.Rival)
                        self.Player.image = self.Player.Idle_Up
                        if self.Events.CCRivalFightCutscene: self.Events.Dialouge(f"{self.RivalName}:Yo! {self.PlayerName}! You're still struggling along back here? I'm doing great!","I caught a bunch of strong and smart POKEMON!",f"Here,let me see what you caught, {self.PlayerName}!")
                        if self.Events.CCRivalFight:
                            self.TrainerBattle(self.Kanto.Rival.Team,self.Kanto.Rival.Name,[f"{self.RivalName}: Hey! Take it easy! You won already!",'',''],[f"{self.RivalName}: Ha",'',''],self.Events.Rivalbattlestance,595,[])
                            self.Start_Battle_Animation()
                            if self.ExitBattle:
                                self.Events.CCRivalFight = False
                                if self.State_of_Battle == "Win":self.Events.CCRivalFightAftermath = True
                                else:
                                    self.Events.CCRivalFightCutscene = True
                                    self.Kanto.OverworldCamera.remove(self.Kanto.Rival)
                                self.ExitBattle = False
                        if self.Events.CCRivalFightAftermath:
                            self.Events.Dialouge(f"{self.RivalName}:Hey, guess what? I went to BILL's and got him to show me his rare"," POKEMON! Added pages to my Pokedex.BILL's world famous as a ","POKEMANIAC! He invented the POKEMON Storage System on PC! You should go thank him.","Well, I better get rolling! Smell ya later!")
            if self.Events.OverworldLocation == "Route 24":
                self.TrainerEncounters(self.OtherTrainers[2])
                if not self.Events.NBRocketEncounter:
                    if self.Player.rect.colliderect(self.Kanto.NugEnd):
                        self.Player_Pause = True
                        if self.Events.NBRocketCutscene:self.Events.Dialouge("Congratulations! You beat our 5 contest trainers! You just earned a fabulous prize!","By the way, would you like to join TEAM ROCKET? We're a group dedicated to evil using POKEMON!","Want to join? Are you sure? Come on, join us! I'm telling you to join","OK, you need convincing! I'll make you an offer you can't refuse!")
                        if self.Events.NBRocketFight:
                            self.TrainerBattle(self.Kanto.NBRocket.Team,self.Kanto.NBRocket.Name,[*self.Kanto.NBRocket.WinnerText],[f"{self.Kanto.NBRocket.Name}: Ha",'',''],self.Kanto.NBRocket.Trainer_img,self.Kanto.NBRocket.Money,[])
                            self.Start_Battle_Animation()
                            if self.ExitBattle:
                                self.Events.NBRocketFight = False
                                if self.State_of_Battle == "Win":
                                    self.Events.NBRocketAftermath = True
                                    self.Player.Add_Bag("Nugget",1)
                                else:self.Events.NBRocketCutscene = True
                                self.ExitBattle = False
                        if self.Events.NBRocketAftermath:self.Events.Dialouge("With your ability, you could become a top leader in TEAM ROCKET!")                           
            if self.Events.OverworldLocation == "Route 25":
                self.TrainerEncounters(self.OtherTrainers[2])
                self.Transitions(self.Kanto.O_BillDoor,self.Kanto.O_BillSpawn)
                if self.Player.rect.colliderect(self.Kanto.OakBattle) and len(self.Pokemon_Caught) == 150:
                    self.Player_Pause = True
                    self.Kanto.OverworldCamera.add(self.Kanto.BattlerOak)
                    self.Kanto.BattlerOak.rect.y = self.Player.rect.y
                    if self.Events.OakFightCutscene:self.Events.Dialouge("In my days I used to be the champion before I decided to be a professor","So before I requilish the Mew I want to see what you're made of")
                    if self.Events.OakFight:
                        self.TrainerBattle(self.Kanto.BattlerOak.Team,"Oak",[f"Oak: Good work {self.PlayerName}",'You are worthy',''],["Oak: Try again next time",'',''],self.Events.Dr_OakfullSprite,6930,[["Full Restore",12]])
                        self.Start_Battle_Animation()
                        if self.ExitBattle:
                            self.Events.OakFight = False
                            if self.State_of_Battle == "Win":self.Events.OakFightAftermath = True
                            else:
                                self.Events.OakFightCutscene = True
                                self.Kanto.OverworldCamera.remove(self.Kanto.BattlerOak)
                            self.ExitBattle = False
                    if self.Events.OakFightAftermath:self.Events.Dialouge(f"I see how you beat {self.RivalName}","You and your pokemon certainly have a connection",f"{self.PlayerName}! Wherever you go from here, I know you'll be great","Like no one ever was")
            if self.Events.OverworldLocation == "Route 5":
                self.Transitions(self.Kanto.O_DaycareDoor,self.Kanto.O_DayCareSpawn)
                self.Transitions(self.Kanto.O_InterR5Door,self.Kanto.O_InterEnteranceSpawn)
                self.Transitions(self.Kanto.R5_UnderGEDoor,self.Kanto.R5_UnderGESpawn)
            if self.Events.OverworldLocation == "Route 6":
                self.TrainerEncounters(self.OtherTrainers[2])
                self.Transitions(self.Kanto.R6_UnderGSEDoor,self.Kanto.R5_UnderGESpawn)
                self.Transitions(self.Kanto.O_InterR6Door,self.Kanto.O_InterExitSpawn)
            if self.Events.OverworldLocation == "Vermilion City":
                if self.Events.SSCaptainDone:
                    try:
                        self.Kanto.OverworldCamera.remove(self.Kanto.SSShip)
                    except:pass
                self.Transitions(self.Kanto.O_VCH1Door,self.Kanto.O_VCH1Spawn)   
                self.Transitions(self.Kanto.O_VCH2Door,self.Kanto.O_VCH1Spawn)
                self.Transitions(self.Kanto.O_VCH3Door,self.Kanto.O_VCH1Spawn)
                self.Transitions(self.Kanto.O_VCPokeMartDoor,self.Kanto.PokemonMartSpawn)
                self.Transitions(self.Kanto.O_PFCDoor,self.Kanto.O_PFCSpawn)
                self.Transitions(self.Kanto.O_VCPokeCenterDoor,self.Kanto.PokemonCenterSpawn)
                self.Transitions(self.Kanto.O_VCDoor,self.Kanto.O_VCSpawn) 
                if not self.Events.SSCaptainDone:self.Transitions(self.Kanto.O_SS_AnneDoor,self.Kanto.O_SS_AnneF1Spawn)
                if not self.Events.SSTicketCheck:
                    if self.Player.rect.colliderect(self.Kanto.SSTicketCheck):
                        self.Player_Pause = True  
                        if Two_D_ListCheck(self.Player.Bag,"S.S.TICKET"):self.Events.Dialouge("Welcome to S.S.ANNE!")
                        else:self.Events.Dialouge("Sorry! You need a ticket to get aboard.")
            if self.Events.OverworldLocation == "Route 11":
                self.TrainerEncounters(self.OtherTrainers[2])
                self.Transitions(self.Kanto.R11_DCEDoor,self.Kanto.R11_DCESpawn)
                self.Transitions(self.Kanto.VCO_R11HDoor,self.Kanto.VCO_R11HSpawn)
                self.Transitions(self.Kanto.R12_R11HDoor,self.Kanto.R12_R11HSpawn)
            if self.Events.OverworldLocation == "Route 9":
                self.TrainerEncounters(self.OtherTrainers[2])
            if self.Events.OverworldLocation == "Route 10":
                self.TrainerEncounters(self.OtherTrainers[2])
                self.Transitions(self.Kanto.R10_PCDoor,self.Kanto.PokemonMartSpawn)   
                self.Transitions(self.Kanto.O_RTF1Door,self.Kanto.O_RTF1Spawn)
                self.Transitions(self.Kanto.Exit_RTF1Door,self.Kanto.Exit_RTF1Spawn)
                self.Transitions(self.Kanto.O_PPDoor,self.Kanto.O_PPSpawn)
            if self.Events.OverworldLocation == "Lavender Town":
                self.Transitions(self.Kanto.O_LPokeCenterDoor,self.Kanto.PokemonCenterSpawn)
                self.Transitions(self.Kanto.O_LPokeMartDoor,self.Kanto.PokemonMartSpawn)
                self.Transitions(self.Kanto.O_LTVHDoor,self.Kanto.O_LTVHSpawn)
                self.Transitions(self.Kanto.O_LTH1Door,self.Kanto.O_LTHSpawn)
                self.Transitions(self.Kanto.O_LTH2Door,self.Kanto.O_LTHSpawn)
                self.Transitions(self.Kanto.O_PokeTowerF1Door,self.Kanto.O_PokeTowerF1Spawn)
            if self.Events.OverworldLocation == "Route 8":
                self.TrainerEncounters(self.OtherTrainers[2])
                self.Transitions(self.Kanto.O_R8toSFDoor,self.Kanto.O_SaffronEEntranceSpawn)
                self.Transitions(self.Kanto.O_UGEWEntranceDoor,self.Kanto.O_UnderWEGESpawn)
            if self.Events.OverworldLocation == "Route 7":
                self.Transitions(self.Kanto.O_UGWEEntranceDoor,self.Kanto.O_UnderWEGESpawn)
                self.Transitions(self.Kanto.O_R7toSFDoor,self.Kanto.O_SaffronWExitSpawn)
            if self.Events.OverworldLocation == "Celadon City":
                self.Transitions(self.Kanto.O_CEPokeCenterDoor,self.Kanto.PokemonCenterSpawn)
                self.Transitions(self.Kanto.O_GCDoor,self.Kanto.O_GCSpawn)
                self.Transitions(self.Kanto.O_PrizeBoothDoor,self.Kanto.O_PrizeBoothSpawn)
                self.Transitions(self.Kanto.O_CERestourantDoor,self.Kanto.O_CERestourantSpawn)
                self.Transitions(self.Kanto.O_CE1HDoor,self.Kanto.O_CE1HSpawn)
                self.Transitions(self.Kanto.O_CE2HDoor,self.Kanto.O_CE2HSpawn)
                self.Transitions(self.Kanto.O_CEMansionDoor,self.Kanto.O_CEMF1Spawn)
                self.Transitions(self.Kanto.O_BCEMF1Door,self.Kanto.O_BCEMF1Spawn)
                self.Transitions(self.Kanto.O_CEStoreF1RightDoor,self.Kanto.O_CEStoreF1RightSpawn)
                self.Transitions(self.Kanto.O_CEStoreF1LeftDoor,self.Kanto.O_CEStoreF1LeftSpawn)
                self.Transitions(self.Kanto.O_CEGymDoor,self.Kanto.O_CEGymSpawn)              
            if self.Events.OverworldLocation == "Route 16":
                self.TrainerEncounters(self.OtherTrainers[2])
                self.Transitions(self.Kanto.O_R16H1Door,self.Kanto.O_R16H1Spawn)
                self.Transitions(self.Kanto.O_R16H1Door3,self.Kanto.O_R16H1Spawn3)
                self.Transitions(self.Kanto.O_R16H1Door2,self.Kanto.O_R16H1Spawn2)
                self.Transitions(self.Kanto.O_R16H1Door4,self.Kanto.O_R16H1Spawn4)
                self.Transitions(self.Kanto.O_R16H2Door,self.Kanto.O_R16H2Spawn)
                if not self.Events.CESnorlaxAwake:
                    if self.Player.rect.colliderect(self.Kanto.CESleepingSnorlax[1].Rect) and Two_D_ListCheck(self.Player.Bag,"Poke Flute"):
                        self.Interact("Use the flute")
                        if self.Yes:
                            self.Player_Pause = True
                            self.Events.Dialouge(f"{self.PlayerName} played the POKE FLUTE.","SNORLAX woke up!","It attacked in a grumpy rage!")
                            self.WildPoke = Pokemon("Snorlax",30,["Headbutt","Amnesia","Rest","-"],"Wild","Snorlax")
                    if self.Events.CESnorlaxFight:
                        self.BattleStart = True
                        self.Opponents_Pokemon = self.WildPoke
                        self.WIldBattle()
                        self.ExitBattle = False
                        self.Player_Pause = False
                        self.Player.Menu = False
                        self.BattleStart = False
                        self.Events.CESnorlaxFight = False
                        if self.State_of_Battle == "Win":self.Events.CESnorlaxAwake = True
                        self.WildBattle = False
                        self.Player.Moveable = True
                if self.Events.CESnorlaxAwake:
                    try:
                        self.Kanto.OverworldCamera.remove(self.Kanto.CESleepingSnorlax[0])
                        self.Kanto.OverworldReadables.remove(self.Kanto.CESleepingSnorlax[1])
                        self.Kanto.OverworldBarriers.remove(self.Kanto.CESleepingSnorlax[1].Rect)
                    except:pass
                if self.Kanto.Bike_OnlyZone.contains(self.Player.rect):self.Player.Bike = True
            if self.Events.OverworldLocation == "Route 17":
                self.TrainerEncounters(self.OtherTrainers[2])
                if not self.Player_Pause and not (pygame.key.get_pressed()[pygame.K_UP]or pygame.key.get_pressed()[pygame.K_DOWN] or pygame.key.get_pressed()[pygame.K_LEFT] or pygame.key.get_pressed()[pygame.K_RIGHT]):
                    self.Player.Bike = True
                    self.Player.Direction.y = self.Player.BikeSpeed
                    self.Player.rect.y += self.Player.Direction.y
                    self.Player.Vertical_Collison(self.Barriers)
                    self.Player.Horizontal_Collison(self.Barriers)
                    self.Player.Animations()
            if self.Events.OverworldLocation == "Route 18":
                if self.Kanto.Bike_OnlyZone2.contains(self.Player.rect):self.Player.Bike = True
                self.TrainerEncounters(self.OtherTrainers[2])
                self.Transitions(self.Kanto.O_R18GHDoor,self.Kanto.O_R18GHSpawn)
                self.Transitions(self.Kanto.O2_R18GHDoor,self.Kanto.O2_R18GHSpawn)
            if self.Events.OverworldLocation == "Fuchsia City":
                self.Transitions(self.Kanto.O_FPokeCenterDoor,self.Kanto.PokemonCenterSpawn)
                self.Transitions(self.Kanto.O_FPokeMartDoor,self.Kanto.PokemonMartSpawn)
                self.Transitions(self.Kanto.O_FCH1Door,self.Kanto.O_FCH1Spawn)
                self.Transitions(self.Kanto.O_FCH2Door,self.Kanto.O_FCH2Spawn)
                self.Transitions(self.Kanto.O_FCH3Door,self.Kanto.O_FCH3Spawn)
                self.Transitions(self.Kanto.O2_FCH3Door,self.Kanto.O2_FCH3Spawn)
                self.Transitions(self.Kanto.O_FCWHDoor,self.Kanto.O_FCWHSpawn)
                self.Transitions(self.Kanto.O_SZEDoor,self.Kanto.O_SZESpawn)
                self.Transitions(self.Kanto.O_FCGymDoor,self.Kanto.O_FCGymSpawn)
                self.Transitions(self.Kanto.FC_GHDoor,self.Kanto.FC_GHSpawn)
            if self.Events.OverworldLocation == "Saffron City":
                self.Transitions(self.Kanto.O_SPokeCenterDoor,self.Kanto.PokemonCenterSpawn)
                self.Transitions(self.Kanto.O_SPokeMartDoor,self.Kanto.PokemonMartSpawn)
                self.Transitions(self.Kanto.O_SFH1Door,self.Kanto.O_SFH1Spawn)
                self.Transitions(self.Kanto.O_SFH2Door,self.Kanto.O_SFH2Spawn)
                self.Transitions(self.Kanto.O_SFH3F1Door,self.Kanto.O_SFH3F1Spawn)
                self.Transitions(self.Kanto.O_FDDoor,self.Kanto.O_FDSpawn)
                self.Transitions(self.Kanto.O_SilCoF1Door,self.Kanto.O_SilCoF1Spawn)
                self.Transitions(self.Kanto.O_SFtoR7Door,self.Kanto.O_SaffronEEntranceSpawn)
                self.Transitions(self.Kanto.O_SFtoR8Door,self.Kanto.SaffronWExit_ODoor)
                self.Transitions(self.Kanto.O2_InterR5Door,self.Kanto.O_InterExitSpawn)
                self.Transitions(self.Kanto.O2_InterR6Door,self.Kanto.O_InterEnteranceSpawn)
                self.Transitions(self.Kanto.O_SFGymDoor,self.Kanto.O_SFGymSpawn)
                for i,npc in enumerate(self.Kanto.SFNPCS): 
                    if not self.Events.SilCoGioDone:
                        if self.Events.Mr_FujiSaved:
                            if npc.Name == "Rocket Guard":
                                if npc.org_pos[0] == npc.rect.x:
                                    self.Kanto.SFNPCS[i].Text1_a = "Snore...... Snore........"
                                    self.Kanto.SFNPCS[i].rect.centerx += 50       
                        if "Rocket" in npc.Name:  self.NPC_Interaction(npc)
                    else:
                        try:
                            if "Rocket" in npc.Name:
                                self.Kanto.OverworldCamera.remove(npc)
                                self.Kanto.OverworldBarriers.remove(npc.rect)
                            else:
                                self.Kanto.OverworldCamera.add(npc)
                                self.Kanto.OverworldBarriers.append(npc.rect)
                        except:pass
                        if "Rocket" not in npc.Name:  self.NPC_Interaction(npc)
            if self.Events.OverworldLocation == "Route 12":
                self.Transitions(self.Kanto.O_R12GuardHouseDoor,self.Kanto.O_R12GuardHouseSpawn)
                self.Transitions(self.Kanto.O2_R12GuardHouseDoor,self.Kanto.O2_R12GuardHouseSpawn)
                self.Transitions(self.Kanto.O_R12HDoor,self.Kanto.O_R12HSpawn)
                self.TrainerEncounters(self.OtherTrainers[2])
                if not self.Events.VCSnorlaxAwake:
                    if self.Player.rect.colliderect(self.Kanto.VCSleepingSnorlax[1].Rect) and Two_D_ListCheck(self.Player.Bag,"Poke Flute"):
                        self.Interact("Use the flute")
                        if self.Yes:
                            self.Player_Pause = True
                            self.Events.Dialouge(f"{self.PlayerName} played the POKE FLUTE.","SNORLAX woke up!","It attacked in a grumpy rage!")
                            self.WildPoke = Pokemon("Snorlax",30,["Headbutt","Amnesia","Rest","-"],"Wild","Snorlax")
                    if self.Events.VCSnorlaxFight:
                        self.BattleStart = True
                        self.Opponents_Pokemon = self.WildPoke
                        self.WIldBattle()
                        self.ExitBattle = False
                        self.Player_Pause = False
                        self.Player.Menu = False
                        self.BattleStart = False
                        self.Events.VCSnorlaxFight = False
                        if self.State_of_Battle == "Win":self.Events.VCSnorlaxAwake = True
                        self.WildBattle = False
                        self.Player.Moveable = True
                if self.Events.VCSnorlaxAwake:
                    try:
                        self.Kanto.OverworldCamera.remove(self.Kanto.VCSleepingSnorlax[0])
                        self.Kanto.OverworldReadables.remove(self.Kanto.VCSleepingSnorlax[1])
                        self.Kanto.OverworldBarriers.remove(self.Kanto.VCSleepingSnorlax[1].Rect)
                    except:pass              
            if self.Events.OverworldLocation == "Route 13":
                self.TrainerEncounters(self.OtherTrainers[2])
            if self.Events.OverworldLocation == "Route 14":
                self.TrainerEncounters(self.OtherTrainers[2])
            if self.Events.OverworldLocation == "Route 15":
                self.TrainerEncounters(self.OtherTrainers[2])
                self.Transitions(self.Kanto.R15_GHDoor,self.Kanto.R15_GHSpawn)
            if self.Events.OverworldLocation == "Route 19":
                self.TrainerEncounters(self.OtherTrainers[2])
            if self.Events.OverworldLocation == "Route 20":
                self.TrainerEncounters(self.OtherTrainers[2])
                self.Transitions(self.Kanto.O_LSFIF1Door,self.Kanto.O_LSFIF1Spawn)
                self.Transitions(self.Kanto.O_RSFIF1Door,self.Kanto.O_RSFIF1Spawn)
            if self.Events.OverworldLocation == "Cinnabar Island":
                self.Transitions(self.Kanto.O_CIPokeCenterDoor,self.Kanto.PokemonCenterSpawn)
                self.Transitions(self.Kanto.O_CIPokeMartDoor,self.Kanto.PokemonMartSpawn)
                self.Transitions(self.Kanto.O_PokeLabHallDoor,self.Kanto.O_PokeLabHallSpawn)
                self.Transitions(self.Kanto.O_PokeMansionF1Door,self.Kanto.O_PokeMansionF1Spawn)
                if self.Player.rect.colliderect(self.Kanto.O_CGymDoor.Rect):
                    if Two_D_ListCheck(self.Player.Bag,"Secret Key"):self.Transitions(self.Kanto.O_CGymDoor,self.Kanto.O_CGymSpawn)
                    else:
                        self.Player_Pause = True
                        self.Events.Dialouge("The Door is Locked!")
            if self.Events.OverworldLocation == "Route 21":
                self.TrainerEncounters(self.OtherTrainers[2])
            if self.Events.OverworldLocation == "Route 23":
                self.Transitions(self.Kanto.R23_PLF1Door,self.Kanto.R23_PLF1Spawn)
                self.Transitions(self.Kanto.O_VictoryRoadF1Door,self.Kanto.O_VictoryRoadF1Spawn)
                self.Transitions(self.Kanto.O_VictoryRoadF2Door,self.Kanto.O_VictoryRoadF2Spawn)
                if self.Player.rect.colliderect(self.Kanto.R23BadgeCheck1):
                    if not self.Player.Get_BadgeInfo("Cascade"): 
                        self.Player_Pause = True
                        self.Events.Dialouge("I'm sorry but it appears you dont have the Cascade Badge.","You can't pass")
                if self.Player.rect.colliderect(self.Kanto.R23BadgeCheck2):
                    if not self.Player.Get_BadgeInfo("Thunder"): 
                        self.Player_Pause = True
                        self.Events.Dialouge("I'm sorry but it appears you dont have the Thunder Badge.","You can't pass")
                if self.Player.rect.colliderect(self.Kanto.R23BadgeCheck3):
                    if not self.Player.Get_BadgeInfo("Rainbow"): 
                        self.Player_Pause = True
                        self.Events.Dialouge("I'm sorry but it appears you dont have the Rainbow Badge.","You can't pass")
                if self.Player.rect.colliderect(self.Kanto.R23BadgeCheck4):
                    if not self.Player.Get_BadgeInfo("Soul"): 
                        self.Player_Pause = True
                        self.Events.Dialouge("I'm sorry but it appears you dont have the Soul Badge.","You can't pass")
                if self.Player.rect.colliderect(self.Kanto.R23BadgeCheck5):
                    if not self.Player.Get_BadgeInfo("Marsh"): 
                        self.Player_Pause = True
                        self.Events.Dialouge("I'm sorry but it appears you dont have the Marsh Badge.","You can't pass")
                if self.Player.rect.colliderect(self.Kanto.R23BadgeCheck6):
                    if not self.Player.Get_BadgeInfo("Volcano"): 
                        self.Player_Pause = True
                        self.Events.Dialouge("I'm sorry but it appears you dont have the Volcano Badge.","You can't pass")
                if self.Player.rect.colliderect(self.Kanto.R23BadgeCheck7):
                    if not self.Player.Get_BadgeInfo("Earth"): 
                        self.Player_Pause = True
                        self.Events.Dialouge("I'm sorry but it appears you dont have the Earth Badge.","You can't pass")
            if self.Events.OverworldLocation == "Indigo Plateau":
                self.Transitions(self.Kanto.O_ILEDoor,self.Kanto.O_ILESpawn)
        elif self.Events.Stage == "Pre-Forest":
            for npc in self.Kanto.PreForestNPC:
                self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.PVF_R2Door,self.Kanto.PVF_R2Spawn)
            self.Transitions(self.Kanto.PVF_VFDoor,self.Kanto.PVF_VFSpawn)
        elif self.Events.Stage == "After Forest":
            self.Transitions(self.Kanto.AF_VFDoor,self.Kanto.AF_VFSpawn)
            self.Transitions(self.Kanto.AF_ODoor,self.Kanto.AF_OSpawn)
            for npc in self.Kanto.AfterForestNPC:
                self.NPC_Interaction(npc)
        elif self.Events.Stage == "Viridian Forest":
            self.Transitions(self.Kanto.VF_R2Door,self.Kanto.VF_PVFSpawn)
            self.TrainerEncounters(self.OtherTrainers[0])
            self.Transitions(self.Kanto.VF_AFDoor,self.Kanto.VF_AFSpawn)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.ViridainForestGrass)
            for npc in self.Kanto.ViridainForestNPCs: self.NPC_Interaction(npc)
            self.Readables(self.Kanto.ViridainForestReadables)
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.VFHiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.VFHiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.VFHiddenItems[i].Picked = True
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.ViridainForestGrass)
                self.Player.Moveable = True
                self.WildBattle = False
            self.Kanto.ViridainForestPickups,self.Kanto.ViridainForestCamera = self.Pickup(self.Kanto.ViridainForestPickups,self.Kanto.ViridainForestCamera)
        elif self.Events.Stage == "Poke Mart":
            if self.Events.OverworldLocation == "Viridian City": spawnpoint1 = self.Kanto.VPokeMart_OSpawnpoint
            elif self.Events.OverworldLocation == "Pewter City":spawnpoint1 = self.Kanto.PPokeMart_OSpawn
            elif self.Events.OverworldLocation == "Cerulean City":spawnpoint1 = self.Kanto.PM_CCSpawn
            elif self.Events.OverworldLocation == "Vermilion City":spawnpoint1 = self.Kanto.VCPokeMart_OSpawn
            elif self.Events.OverworldLocation == "Lavender Town":spawnpoint1 = self.Kanto.LPokeMart_OSpawn
            elif self.Events.OverworldLocation == "Fuchsia City":spawnpoint1 = self.Kanto.FPokeMart_OSpawn
            elif self.Events.OverworldLocation == "Saffron City":spawnpoint1 = self.Kanto.SPokeMart_OSpawn
            elif self.Events.OverworldLocation == "Cinnabar Island":spawnpoint1 = self.Kanto.CIPokeMartSpawn
            self.PokeMartItems()
            if self.Events.HasPokeballs: self.NPC_CHange(self.Kanto.PokeMartClerk,'',"Merchant")
            self.Transitions(self.Kanto.PokeMart_ODoor,spawnpoint1)
            self.NPC_Interaction(self.Kanto.PokeMartClerk,self.Kanto.PokeMartDesk,True)
            if not self.Events.PokeMartCutscene: 
                self.Player_Pause = True
                if self.Events.PokeMartCutscene2:
                    self.Player.rect.center = self.Kanto.CutscenePokeMart
                    self.Player.image = self.Player.Idle_Left
        elif self.Events.Stage == "RivalHouse":
            self.Transitions(self.Kanto.RivalHouse_OverworldTransport,self.Kanto.RH_OSpwnpoint)
            if not len(self.Player.Pokemon): self.NPC_CHange(self.Kanto.Rival_sis,f" Hi {self.PlayerName}! {self.RivalName} is out at Grandpa's lab.",self.Kanto.Rival_sis.type)
            self.Kanto.Rival_sis.Name = f"{self.RivalName}'s Sis" 
            self.NPC_Interaction(self.Kanto.Rival_sis)
        elif self.Events.Stage == "Oak Lab":
            self.Transitions(self.Kanto.OakLab_OverWorldTransport,self.Kanto.Oak_Overworldspawn)
            for npc in self.Kanto.OakLabAides:
                self.NPC_Interaction(npc)
            if not self.Events.PickinPoke and self.Events.PlayerPoke == "":
                self.NPC_CHange(self.Kanto.Rival,f"Yo {self.PlayerName}! Gramps isn't around!",self.Kanto.Rival.type)
                self.Kanto.Rival.Name = self.RivalName
                self.NPC_Interaction(self.Kanto.Rival)
                if self.Events.OakCutscene2 or self.Events.OakCutscene3 or self.Events.OakCutscene4 or self.Events.OakCutscene5:
                    self.Player.rect.center = self.Kanto.OakStoppoint
                    self.Player_Pause = True
                    if self.Events.OakCutscene2:self.Events.Dialouge(f"{self.RivalName}:Gramps! I'm fed up with waiting!",f"Oak: {self.RivalName}? Let me think... Oh, that's right, I told you to come!","Just wait!")
                    if self.Events.OakCutscene3:self.Events.Dialouge(f"Here, {self.PlayerName}! There are 3 POKEMON here! Haha! They are inside the","POKE BALLS. When I was young, I was a serious POKEMON trainer.","In my old age, I have only 3 left, but you can have one! Choose!")
                    if self.Events.OakCutscene4:self.Events.Dialouge(f"{self.RivalName}: Hey! Gramps! What about me?",f"Oak: Be patient! {self.RivalName}, you can have one too!")
                    if self.Events.OakCutscene5:self.Events.Dialouge(f"Oak: Now, {self.PlayerName}, which POKEMON do you want?",f"{self.RivalName}: Heh, I don't need to be greedy like you! Go ahead and choose, {self.PlayerName}!")
            if self.Events.PickinPoke:
                self.Player_Pause = False
                if self.Player.rect.colliderect(self.Kanto.PickinPokeLine):
                    self.Player.rect.center = self.Kanto.OakStoppoint
                self.Kanto.Rival.Text1_a = f"Heh, I don't need to be greedy like you! Go ahead and choose, {self.PlayerName}!"
                self.Kanto.Oak.Text1_a = f"Now, {self.PlayerName}, which POKEMON do you want?"
                self.NPC_Interaction(self.Kanto.Rival)
                self.NPC_Interaction(self.Kanto.Oak)
                for ball in self.Kanto.Starters:
                    if self.Player.rect.colliderect(ball.Rect):
                        self.Interact(ball.Text,"Oak: So is this your pick?")
                        if self.No: self.No = False
                        if self.Yes: 
                            self.Events.PlayerPoke = ball.Name
                            self.Events.PickinPoke = False
                            self.Events.PokemonPicked = True
                            self.Player_Pause = True
                            self.Yes = False
            if self.Events.PokemonPicked:
                self.Player_Pause = True
                self.Events.Dialouge(f"{self.PlayerName} chose {self.Events.PlayerPoke}","Oak: This POKEMON is really energetic!")
            if self.pre_NickName:
                self.Player_Pause = True
                self.Interact("Would you like to nickname this pokemon?")   
                if self.No:
                    self.No = False
                    self.Events.RPokemonPick = True
                    self.pre_NickName = False
                    self.Events.SPNickname = self.Events.PlayerPoke
                elif self.Yes:
                    self.Yes = False
                    self.Events.StarterNickname = True
                    self.pre_NickName = False
            if self.Events.RPokemonPick:
                if len(self.Player.Pokemon) == 0:
                    if self.Events.PlayerPoke == "Bulbasaur": 
                        self.Kanto.Rival.rect.center = self.Kanto.RPokepickspawn3
                        self.Events.RivalPoke = "Charmander"
                        self.Player.Add_Pokemon(Pokemon("Bulbasaur",5,["Tackle","Growl",'-','-'],self.PlayerName,self.Events.SPNickname,0))
                    elif self.Events.PlayerPoke == "Squirtle": 
                        self.Kanto.Rival.rect.center = self.Kanto.RPokepickspawn1
                        self.Events.RivalPoke = "Bulbasaur"
                        self.Player.Add_Pokemon(Pokemon("Squirtle",5,["Tackle","Tail Whip",'-','-'],self.PlayerName,self.Events.SPNickname,0))
                    elif self.Events.PlayerPoke == "Charmander":
                        self.Kanto.Rival.rect.center = self.Kanto.RPokepickspawn2
                        self.Events.RivalPoke = "Squirtle"
                        self.Player.Add_Pokemon(Pokemon("Charmander",5,["Scratch","Growl",'-','-'],self.PlayerName,self.Events.SPNickname,0))
                self.AddPokeDex(self.Events.RivalPoke)
                self.AddPokeDex(self.Player.Pokemon[0].Name,True)
                self.Events.Dialouge(f"{self.RivalName}: I'll take this one, then!",f"{self.RivalName} chose {self.Events.RivalPoke}")
            if self.Events.preFirstRivalBattle:
                for tile in self.Kanto.StartersSprites:
                    if tile.Name in (self.Events.PlayerPoke,self.Events.RivalPoke):
                        self.Kanto.OakLabCamera.remove(tile)
                self.NPC_Interaction(self.Kanto.Oak)
                self.NPC_Interaction(self.Kanto.Rival)
                self.Player_Pause = False
                self.Kanto.Rival.Text1_a = f"{self.RivalName}: My Pokemon looks alot stronger"
                self.Kanto.Oak.Text1_a = "These Pokemon can protect you from wild pokemon"
                if self.Player.rect.colliderect(self.Kanto.PickinPokeLine):
                    self.Player.rect.center = self.Kanto.Player_RivalBattlePoint
                    self.Player_Pause = True
                    self.Player.image = self.Player.Idle_Up
                    self.Kanto.Rival.rect.center = self.Kanto.Rival_RivalBattlePoint
                    self.Kanto.Rival.image = pygame.image.load(r'Map\Tileset\NPCS\Rival_Idle_Down.png').convert_alpha()
                    self.Events.Dialouge(f"{self.RivalName}:Wait {self.PlayerName}! Let's check out our POKEMON!","Come on, I'll take you on!")
                    self.Kanto.Rival.Team = self.Make_RivalTeam(5,["Scratch","Growl","-","-"],["Tackle","Growl","-","-"],["Tackle","Tail Whip","-","-"],[],[],[])
            if self.Events.RivalBattle:
                self.TrainerBattle(self.Kanto.Rival.Team,self.Kanto.Rival.Name,[f"{self.RivalName}:WHAT? Unbelievable! I picked the wrong POKEMON!",'',''],[f"{self.RivalName}: Yeah! Am I great or what?",'',''],self.Events.Rivalbattlestance,175,[])
                self.Start_Battle_Animation()
                if self.ExitBattle:
                    self.Events.RivalBattle = False
                    self.Events.PostRivalBattle = True
                    self.ExitBattle = False
                    self.Player.Full_Team_Heal()
            if self.Events.PostRivalBattle:self.Events.Dialouge(f"{self.RivalName}: Okay! I'll make my POKEMON fight to toughen it up!",f"{self.PlayerName}! Gramps! Smell you later!")
            if self.Events.OakPokeBallCutscene1:
                self.Player_Pause = True
                self.Player.rect.center = self.Kanto.OakStoppoint
                self.Events.Dialouge(f"Oak: Oh, {self.PlayerName}! How is my old POKEMON? Well, it seems to like you a lot.","You must be talented as a POKEMON trainer!","What? You have something for me?")
            if self.Events.OakPokeBallCutscene2:
                self.Player_Pause = True
                self.Events.Dialouge(f"{self.PlayerName} delivered OAK's PARCEL.","Oak: Ah! This is the custom POKE BALL I ordered! Thank you!",f"{self.RivalName}: Gramps! What did you call me for?")
            if self.Events.OakPokeBallCutscene3:
                self.Player_Pause = True
                self.Events.Dialouge("Oak: Oh right! I have a request of you two. On the desk there is my invention","POKEDEX! It automatically records data on POKEMON you've seen or caught!",f"It's a hi-tech encyclopedia! so {self.PlayerName} and {self.RivalName} take ths with you")
            if self.Events.OakPokeBallCutscene4:
                self.Player_Pause = True
                self.Events.Dialouge("Oak:To make a complete guide on all the POKEMON in the world was my dream..,P to use Pokedex","But, I'm too old! I can't do it! So, I want you two to fulfill my dream for me! ","Get moving, you two! This is a great undertaking in POKEMON history!")
            if self.Events.OakPokeBallCutscene5:
                self.Player_Pause = True
                self.Events.Dialouge(f"{self.RivalName}: Alright Gramps! Leave it all to me! {self.PlayerName}, I hate to say it","But I dont need you. I know! I'll borrow a TOWN MAP from my sis! ",f"I'll tell her not to lend you one, {self.PlayerName}! Hahaha!")
            if self.Events.HasPokeballs:
                self.Kanto.OakLabCamera.remove(self.Kanto.Rival)
                self.NPC_CHange(self.Kanto.Oak,f"POKEMON around the world wait for you, {self.PlayerName}!",self.Kanto.Oak.type,'','')
                self.NPC_CHange(self.Kanto.Rival_sis," Grandpa asked you to run an errand? Here, this will help you!","Giver",f"{self.PlayerName} got a MAP")
            if self.Events.OakinLab:
                if self.Kanto.Oak not in self.Kanto.OakLabCamera:
                    self.Kanto.OakLabCamera.add(self.Kanto.Oak)
                    self.Kanto.OakLabBarriers.append(self.Kanto.Oak.rect)
                if self.E4Beaten:
                    if len(self.Pokemon_Caught) < 150:self.NPC_CHange(self.Kanto.Oak,f"Hello {self.PlayerName}! I see your pokedex is growing.","Dialogue","I heard that other trainer came from around the world to meet the new champion","They're all around Kanto. Try finding and trading with them")
                    elif len(self.Pokemon_Caught) == 150:self.NPC_CHange(self.Kanto.Oak,f"Hello {self.PlayerName}! I see your pokedex is almost complete","Dialogue","Hmm that last pokemon is definitely hard to find","You know what! Come meet me at Bill's house.")
                    elif len(self.Pokemon_Caught) == 151:self.NPC_CHange(self.Kanto.Oak,f"The sky's the limit {self.PlayerName}!","Dialogue","","")
                self.NPC_Interaction(self.Kanto.Oak)
        elif self.Events.Stage == "Poke Center":
            if self.Events.OverworldLocation == "Viridian City": 
                spawnpoint2 = self.Kanto.PokemonCenter_VCOSpawn
                self.Healplace = ["OverWorld",self.Kanto.PokemonCenter_VCOSpawn]
            elif self.Events.OverworldLocation == "Pewter City":
                spawnpoint2 = self.Kanto.PPC_OSpawn
                self.Healplace = ["OverWorld",self.Kanto.PPC_OSpawn]
            elif self.Events.OverworldLocation == "Route 3":
                spawnpoint2 = self.Kanto.PC_R3Spawn
                self.Healplace = ["OverWorld",self.Kanto.PC_R3Spawn]
            elif self.Events.OverworldLocation == "Cerulean City":
                spawnpoint2 = self.Kanto.PC_CCSpawn
                self.Healplace = ["OverWorld",self.Kanto.PC_CCSpawn]
            elif self.Events.OverworldLocation == "Vermilion City":
                spawnpoint2 = self.Kanto.VCPokeCenter_OSpawn
                self.Healplace = ["OverWorld",self.Kanto.VCPokeCenter_OSpawn]
            elif self.Events.OverworldLocation == "Route 10":
                spawnpoint2 = self.Kanto.PC_R10Spawn
                self.Healplace = ["OverWorld",self.Kanto.PC_R10Spawn]
            elif self.Events.OverworldLocation == "Lavender Town":
                spawnpoint2 = self.Kanto.LPokeCenter_OSpawn
                self.Healplace = ["OverWorld",self.Kanto.LPokeCenter_OSpawn]
            elif self.Events.OverworldLocation == "Celadon City":
                spawnpoint2 = self.Kanto.CEPokeCenter_OSpawn
                self.Healplace = ["OverWorld",self.Kanto.CEPokeCenter_OSpawn]
            elif self.Events.OverworldLocation == "Fuchsia City":
                spawnpoint2 = self.Kanto.FPokeCenter_OSpawn
                self.Healplace = ["OverWorld",self.Kanto.FPokeCenter_OSpawn]
            elif self.Events.OverworldLocation == "Saffron City":
                spawnpoint2 = self.Kanto.SPokeCenter_OSpawn
                self.Healplace = ["OverWorld",self.Kanto.SPokeCenter_OSpawn]
            elif self.Events.OverworldLocation == "Cinnabar Island":
                spawnpoint2 = self.Kanto.CIPokeCenterSpawn
                self.Healplace = ["OverWorld",self.Kanto.CIPokeCenterSpawn]
            if not Two_D_ListCheck(self.PlayerMap.FlyLocations,self.Events.OverworldLocation):self.PlayerMap.FlyLocations.append([self.Events.OverworldLocation,spawnpoint2])
            self.Transitions(self.Kanto.PokeCenter_ODoor,spawnpoint2)
            self.NPC_Interaction(self.Kanto.Nurse_Joy,self.Kanto.Nurse_Joy_desk,True)
            if self.Player.rect.colliderect(self.Kanto.PokeCenterPC):
                    self.Interact("Open?")
                    if self.Yes:
                        self.Pc = True
                        if self.ExitPC:
                            self.Yes = False
                            self.ExitPC = False
                    elif self.No:
                        self.No = False
        elif self.Events.Stage == "VH1":
            self.Transitions(self.Kanto.VH1_ODoor,self.Kanto.VH1_VCOSpawn)
            for npc in self.Kanto.VH1NPCS: self.NPC_Interaction(npc)
            self.Readables(self.Kanto.VH1Readables)
        elif self.Events.Stage == "VH2":
            self.Transitions(self.Kanto.VH2_ODoor,self.Kanto.VH2_VCOSpawn)
            for npc in self.Kanto.VH2NPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "PH1":
            for npc in self.Kanto.PH1NPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.PH1_ODoor,self.Kanto.PH1_OSpawn)
        elif self.Events.Stage == "PH2":
            for npc in self.Kanto.PH2NPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.PH2_ODoor,self.Kanto.PH2_OSpawn)
        elif self.Events.Stage == "Pokemon LeagueF1":
            self.NPC_Interaction(self.Kanto.PLGuard1)
            if self.Player.Get_BadgeInfo("Boulder"): self.NPC_CHange(self.Kanto.PLGuard1,"It looks like you have the boulder badge. Go on ahead","Dialogue")
            self.Transitions(self.Kanto.PokeLeague_ODoor,self.Kanto.PL_OSpawn)
            self.Transitions(self.Kanto.PLF1_R23Door,self.Kanto.PLF1_R23Spawn)
            if self.Player.rect.colliderect(self.Kanto.BadgeCheck1):
                if not self.Player.Get_BadgeInfo("Boulder"): 
                    self.Player_Pause = True
                    self.Events.Dialouge("I'm sorry but it appears you dont have the Boulder Badge.","You can't pass")
        elif self.Events.Stage == "PCGym":
            self.Transitions(self.Kanto.PewterGym_ODoor,self.Kanto.PewterGym_OSpawn)
            for totem in self.Kanto.PewterGymReadables:totem.Text2 = self.RivalName
            self.Readables(self.Kanto.PewterGymReadables)
            self.TrainerEncounters(self.OtherTrainers[1])
            if not self.Player.Get_BadgeInfo("Boulder",Name=True):
                self.GymLeaderEncounter(self.Kanto.Brock)
                if self.GymLeaderBattle:
                    self.TrainerBattle(self.Kanto.Brock.Team,"Brock",self.Kanto.Brock.WinnerText,["Try again next time", "",""],self.Kanto.Brock.Trainer_img,self.Kanto.Brock.Money,self.Kanto.Brock.Bag)
                    self.Start_Battle_Animation()
                    if self.ExitBattle :
                        self.GymLeaderBattle = False
                        self.Player_Pause = False
                        self.ExitBattle = False
                        self.Yes = False
                        if self.State_of_Battle == "Win":
                            self.Kanto.Brock.Battled = True
                            for npc in self.OtherTrainers[1]: npc.Battled = True
                            self.NPC_CHange(self.Kanto.PewterGymNPCS[0],"Just as I thought! You're POKEMON champ material!","Dialogue",NewText2="",NewText3="")
                            for read in range(len(self.Kanto.PewterGymReadables)): self.Kanto.PewterGymReadables[read].Text3 = self.PlayerName
                            self.Player.Badges["Boulder"] = True
                            self.GymLeaderGiveTM = True
            if self.Player.Get_BadgeInfo("Boulder",Name=True):
                self.GymLeaderEncounter(self.Kanto.Brock)
                self.NPC_CHange(self.Kanto.PewterGymNPCS[0],"Just as I thought! You're POKEMON champ material!","Dialogue",NewText2="",NewText3="")
                for read in range(len(self.Kanto.PewterGymReadables)): self.Kanto.PewterGymReadables[read].Text3 = self.PlayerName
                self.Kanto.Brock.Battled = True
                self.Kanto.Brock.TextChange()
                for npc in self.OtherTrainers[1]: npc.Battled = True
            if self.GymLeaderGiveTM:
                self.DialougePause = True
                self.Events.Dialouge(*self.Kanto.Brock.ExtraWinner)
            for npc in [self.Kanto.PewterGymNPCS[0]]: 
                self.NPC_Interaction(npc)
        elif self.Events.Stage == "PCM":
            if self.Kanto.PCMBuyLine.colliderect(self.Player.rect) and not self.PCMMoney and self.Player.Money >= 50:
                self.Interact("It's P50 for a child's ticket. Would you like to come in?")
                self.Player_Pause = True
                if self.Yes:
                    self.PCMMoney = True
                    self.Yes = False
                    self.Player.Money -= 50
                    self.Player_Pause = False
                if self.No:
                    self.No = False
                    self.Player_Spawn("OverWorld",self.Kanto.PCM_OSpawn)
                    self.Player_Pause = False
            elif self.Kanto.PCMBuyLine.colliderect(self.Player.rect) and not self.PCMMoney and self.Player.Money < 50:
                self.Events.Dialouge("You're too broke to enter, LEAVE")
                self.Player_Pause = True
            for npc in self.Kanto.PCM1NPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.PCM1_ODoor,self.Kanto.PCM_OSpawn)
            self.Transitions(self.Kanto.PCM1_O2Door,self.Kanto.PCM_O2Spawn)
            self.Transitions(self.Kanto.PCM1_PCM2Stairs,self.Kanto.PCM1_PCM2Spawn)
            self.Readables(self.Kanto.PewterMuseumReadables)
        elif self.Events.Stage == "PCM2":
            for npc in self.Kanto.PCM2NPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.PCM2_PCM1Stairs,self.Kanto.PCM1_PCM2Spawn)
            self.Readables(self.Kanto.PewterMuseumBasementReadables)
        elif self.Events.Stage == "Mt.Moon":
            self.Transitions(self.Kanto.MtMoon_R3Door,self.Kanto.MtMoon_R3Spawn)
            self.Wild_Encounters(self.Kanto.Mt_MoonF1Rocks)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.Mt_MoonF1Rocks)
                self.Player.Moveable = True
                self.WildBattle = False 
            self.TrainerEncounters(self.OtherTrainers[3])
            self.Readables(self.Kanto.Mt_MoonF1Readables)
            self.Transitions(self.Kanto.R3_ATunnel,self.Kanto.R3_Aspawn)
            self.Transitions(self.Kanto.R3_BTunnel,self.Kanto.R3_BSpawn)
            self.Transitions(self.Kanto.R3_CTunnel,self.Kanto.R3_CSpawn)
            self.Kanto.MtMoonF1Pickups,self.Kanto.Mt_MoonFloor1Camera = self.Pickup(self.Kanto.MtMoonF1Pickups,self.Kanto.Mt_MoonFloor1Camera)
        elif self.Events.Stage == "Mt.Moon2":
            self.Transitions(self.Kanto.A_R3Tunnel,self.Kanto.A_R3Spawn)
            self.Transitions(self.Kanto.B_R3Tunnel,self.Kanto.B_R3Spawn)
            self.Transitions(self.Kanto.C_R3Tunnel,self.Kanto.C_R3Spawn)
            self.Transitions(self.Kanto.D_M3Tunnel,self.Kanto.D_M3Spawn)
            self.Transitions(self.Kanto.F_M3Tunnel,self.Kanto.F_M3Spawn)
            self.Transitions(self.Kanto.E_M3Tunnel,self.Kanto.E_M3Spawn)
            self.Transitions(self.Kanto.G_M3Tunnel,self.Kanto.G_M3Spawn)
            self.Transitions(self.Kanto.MtMoon_R4Tunnel,self.Kanto.MtMoon_R4Spawn)
            self.Wild_Encounters(self.Kanto.Mt_MoonF2Rocks)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.BattleStart = False
                self.Player.Menu = False
                self.Shuffle_Wild_Pokemon(self.Kanto.Mt_MoonF2Rocks)
                self.Player.Moveable = True
                self.WildBattle = False 
        elif self.Events.Stage == "Mt.Moon3":
            self.Transitions(self.Kanto.M3_DTunnel,self.Kanto.M3_DSpawn)
            self.Transitions(self.Kanto.M3_FTunnel,self.Kanto.M3_FSpawn)
            self.Transitions(self.Kanto.M3_ETunnel,self.Kanto.M3_ESpawn)
            self.Transitions(self.Kanto.M3_GTunnel,self.Kanto.M3_GSpawn)
            self.Kanto.MtMoonF3Pickups,self.Kanto.Mt_MoonFloor3Camera = self.Pickup(self.Kanto.MtMoonF3Pickups,self.Kanto.Mt_MoonFloor3Camera)
            self.Wild_Encounters(self.Kanto.Mt_MoonF3Rocks)
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.MtM3HiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.MtM3HiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.MtM3HiddenItems[i].Picked = True
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.Mt_MoonF3Rocks)
                self.Player.Menu = False
                self.Player.Moveable = True
                self.WildBattle = False 
            self.TrainerEncounters(self.OtherTrainers[4])
            for i,fossil in enumerate(self.Kanto.MtMoonFossils):
                if self.Player.rect.colliderect(fossil.Rect):
                    self.Interact(fossil.Text)
                    if self.Yes:
                        self.Player.Add_Bag(self.Kanto.MtMoonFossils[i].Name,1)
                        self.Kanto.Mt_MoonFloor3Camera.remove(self.Kanto.MtMoonFossils[i])
                        self.Kanto.Mt_MoonF3Barriers.remove(self.Kanto.MtMoonFossils[i].Rect)
                        self.Kanto.NPCFossilChoice = True
                        self.Kanto.MtMoonFossils.remove(self.Kanto.MtMoonFossils[i])
                        for o in self.Kanto.MtMoonFossilsTiles:
                            o.group.remove(o)
                        self.Yes = False
                    if self.No:self.No = False
            if self.Kanto.NPCFossilChoice:
                self.Player_Pause = True
                for t in self.OtherTrainers[4]:
                    if t.Name == "Super Nerd":
                        t.group.remove(t)
                        if t.rect in self.Kanto.Mt_MoonF3Barriers:
                            self.Kanto.Mt_MoonF3Barriers.remove(t.rect)
                            self.OtherTrainers[4].remove(t)
                        if self.Kanto.MtMoonFossils[0].Name == "Helix Fossil":
                            self.Kanto.NPCHelix.Group.add(self.Kanto.NPCHelix)
                            self.Kanto.Mt_MoonF3Barriers.append(self.Kanto.NPCHelix.rect)
                        else:
                            self.Kanto.NPCDome.Group.add(self.Kanto.NPCDome)
                            self.Kanto.Mt_MoonF3Barriers.append(self.Kanto.NPCDome.rect)
                    self.Events.Dialouge("Then I'll take this one")
        elif self.Events.Stage == "CCH1":
            self.Transitions(self.Kanto.InCCH1_ODoor,self.Kanto.InCCH1_OSpawn)
            self.Transitions(self.Kanto.InCCH1_BYDoor,self.Kanto.InCCH1_BYSpawn)
            for npc in self.Kanto.CCH1NPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "CCH2":
            self.Transitions(self.Kanto.CCH2_ODoor,self.Kanto.CCH2_OSpawn)
            for npc in self.Kanto.CCH2NPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "Robbed House":
            self.Transitions(self.Kanto.RH_ODoor,self.Kanto.RBH_OSpawn)
            self.Transitions(self.Kanto.RH_O2Door,self.Kanto.RH_O2Spawn)
            for npc in self.Kanto.Robbed_HouseNPCS: 
                if self.Events.CCRocketFightDone:
                    if npc.Name == "Man":
                        npc.Text1_a = "I figure what's lost is lost! I decided to teach DIGLETT how to DIG"
                        npc.Text1_b = "without a TM!"
                        npc.Text1_c = ""
                self.NPC_Interaction(npc)
        elif self.Events.Stage == "Bike Shop":
            self.Transitions(self.Kanto.BikeShop_ODoor,self.Kanto.BikeShopSpawn)
            for npc in self.Kanto.BikeShopNPCS: 
                if npc.Name == "Shop Owner":
                    if not self.Events.HaveBike:
                        if not Two_D_ListCheck(self.Player.Bag,"Bike Voucher"):self.NPC_Interaction(npc,self.Kanto.Bike_ShopDesk,True)
                        else:
                            if self.Player.rect.colliderect(self.Kanto.Bike_ShopDesk):
                                self.Interact("Talk")
                                if self.Yes:
                                    self.Events.BikeEvent = True
                                    self.DialougePause = True
                                    self.Events.Dialouge("Oh, that's... A BIKE VOUCHER! OK! Here you go!")
                    else:
                        if self.Player.rect.colliderect(self.Kanto.Bike_ShopDesk):
                            self.Interact("Talk")
                            if self.Yes:
                                self.DialougePause = True
                                self.Events.Dialouge("How do you like your new BICYCLE? You can take it on CYCLING ROAD","and in caves")
                else: self.NPC_Interaction(npc)
        elif self.Events.Stage == "CCGym":
            self.Transitions(self.Kanto.CeruleanGym_ODoor,self.Kanto.CCGym_OSpawn)
            for totem in self.Kanto.CeruleanGymReadables:totem.Text2 = self.RivalName
            self.Readables(self.Kanto.CeruleanGymReadables)
            self.TrainerEncounters(self.OtherTrainers[5])
            if not self.Player.Get_BadgeInfo("Cascade",Name=True):
                self.GymLeaderEncounter(self.Kanto.Misty)
                if self.GymLeaderBattle:
                    self.TrainerBattle(self.Kanto.Misty.Team,"Misty",self.Kanto.Misty.WinnerText,["Try again next time", "",""],self.Kanto.Misty.Trainer_img,self.Kanto.Misty.Money,self.Kanto.Misty.Bag)
                    self.Start_Battle_Animation()
                    if self.ExitBattle :
                        self.GymLeaderBattle = False
                        self.Player_Pause = False
                        self.ExitBattle = False
                        self.Yes = False
                        if self.State_of_Battle == "Win":
                            self.Kanto.Misty.Battled = True
                            for npc in self.OtherTrainers[5]: npc.Battled = True
                            self.NPC_CHange(self.Kanto.CeruleanGymNPCS[0],"You beat MISTY! What'd I tell ya? You and me kid, we make a great team","Dialogue",NewText2="",NewText3="")
                            for read in range(len(self.Kanto.CeruleanGymReadables)): self.Kanto.CeruleanGymReadables[read].Text3 = self.PlayerName
                            self.Player.Badges["Cascade"] = True
                            self.GymLeaderGiveTM = True
            if self.Player.Get_BadgeInfo("Cascade",Name=True):
                self.GymLeaderEncounter(self.Kanto.Misty)
                self.NPC_CHange(self.Kanto.CeruleanGymNPCS[0],"You beat MISTY! What'd I tell ya? You and me kid, we make a great team","Dialogue",NewText2="",NewText3="")
                for read in range(len(self.Kanto.CeruleanGymReadables)): self.Kanto.CeruleanGymReadables[read].Text3 = self.PlayerName
                self.Kanto.Misty.Battled = True
                self.Kanto.Misty.TextChange()
                for npc in self.OtherTrainers[5]: npc.Battled = True
            if self.GymLeaderGiveTM:
                self.DialougePause = True
                self.Events.Dialouge(*self.Kanto.Misty.ExtraWinner)
            for npc in [self.Kanto.CeruleanGymNPCS[0]]: 
                self.NPC_Interaction(npc)
        elif self.Events.Stage == "Sea Cottage":
            self.Transitions(self.Kanto.Bill_ODoor,self.Kanto.Bill_OSpawn)
            for npc in self.Kanto.SCNPCS: 
                if not self.Events.SSTicketGot:
                    if self.Events.BillEncounter or self.Events.BillSSTicket:
                        if npc.Name == "Bill":
                            self.Kanto.Sea_CottageCamera.add(npc)
                            self.Kanto.Sea_CottageBarriers.append(npc.rect)
                            self.Events.BillEncounter = False
                            self.Events.BillSSTicket = True
                        if npc.Name == "?":
                            try:
                                self.Kanto.Sea_CottageBarriers.remove(npc.rect)
                                self.Kanto.Sea_CottageCamera.remove(npc)
                                self.Kanto.SCNPCS.remove(npc)
                            except:pass
                    if self.Player.rect.colliderect(npc.rect):
                        if npc.Name == "?":
                            if self.Events.BillPokemonEncounter:
                                self.Interact("Talk")
                                if self.Yes:
                                    self.Player_Pause = True
                                    self.Events.Dialouge("Hiya! I'm a POKEMON... ...No I'm not! Call me BILL! I'm a true blue","POKEMANIAC! Hey! What's with that skeptical look? I'm not joshing","you, I screwed up an experiment and got combined with a POKEMON!")
                            elif self.Events.HelpBillPokemon:
                                self.Interact("So, how about it? Help me out here!")
                                if self.Yes:self.Events.Dialouge("When I'm in the TELEPORTER, go to my PC and run the Cell Separation","System")
                                elif self.No:self.Events.Dialouge("No!? Come on, you gotta help a guy in deep trouble! What do you say,","chief? Please? OK? All right!","When I'm in the TELEPORTER, go to my PC and run the Cell Separation","System")
                        if npc.Name == "Bill":
                            if self.Events.BillSSTicket or self.Events.BillSSTicketAftermath:
                                self.Interact("Talk")
                                if self.Yes:
                                    self.Player_Pause = True
                                    if self.Events.BillSSTicket:self.Events.Dialouge("Yeehah! Thanks, bud! I owe you one! So, did you come to see my","POKEMON collection? You didn't? That's a bummer. I've got to thank","you... Oh here, maybe this'll do. A SS Ticket")
                                    elif self.Events.BillSSTicketAftermath:self.Events.Dialouge("That cruise ship, S.S.ANNE, is in VERMILION CITY. Its passengers","are all trainers! They invited me to their party, but I can't stand","fancy do's. Why don't you go instead of me?")
                else:
                    self.NPC_Interaction(npc)
                    if npc.Name == "Bill":
                        self.Kanto.Sea_CottageCamera.add(npc)
                        self.Kanto.Sea_CottageBarriers.append(npc.rect)
                    if npc.Name == "?":
                        try:
                            self.Kanto.Sea_CottageBarriers.remove(npc.rect)
                            self.Kanto.Sea_CottageCamera.remove(npc)
                            self.Kanto.SCNPCS.remove(npc)
                        except:pass
        elif self.Events.Stage == "Daycare":
            self.Transitions(self.Kanto.DayCare_ODoor,self.Kanto.Daycare_OSpawn)
            if self.Player.rect.colliderect(self.Kanto.DaycareWorker.rect):
                if len(self.DayCarePokemon) == 0:
                    self.Interact("I run a DAYCARE. Would you like me to raise one of your POKEMON?")
                    if self.Yes:
                        self.DayCareDeposit()
                if len(self.DayCarePokemon) == 1:
                    try:
                        self.Interact(f"You owe me {100+(100*(self.DayCarePokemon[0][0].Level-self.DayCarePokemon[0][1]))} for the return of this POKEMON.",f"Your Pokemon has gained {(self.DayCarePokemon[0][0].Level-self.DayCarePokemon[0][1])} Levels","Do want to take them back")
                        if self.Yes and self.Player.Money - 100+(100*(self.DayCarePokemon[0][0].Level-self.DayCarePokemon[0][1])) >= 0:
                            self.Player.Pokemon.append(self.DayCarePokemon[0][0])
                            self.DayCarePokemon.clear()
                            self.Yes = False
                            self.DCWithdrawl = True
                            self.Player.Money -= 100+(100*(self.DayCarePokemon[0][0].Level-self.DayCarePokemon[0][1]))
                        elif self.Yes and self.Player.Money - 100+(100*(self.DayCarePokemon[0][0].Level-self.DayCarePokemon[0][1])) < 0:self.Yes = False
                    except:pass
                if self.DCDeposit:
                    self.Events.Dialouge(f"Fine, I'll look after {self.DCChoicePokemon.NickName} for a while. Come see me in a while.")
                if self.DCWithdrawl:
                    self.Events.Dialouge(f"Come again")
        elif self.Events.Stage == "BetweenR5_SC":
            self.Transitions(self.Kanto.InterEnterance_ODoor,self.Kanto.InterEnterance_OSpawn)
            self.Transitions(self.Kanto.InterExit_ODoor,self.Kanto.InterR5_O2Spawn)
            if self.Player.rect.colliderect(self.Kanto.GuardBoundry):
                if not self.Events.GuardDrinkGiven:
                    self.Player_Pause = True
                    if not (Two_D_ListCheck(self.Player.Bag,"Fresh Water") or Two_D_ListCheck(self.Player.Bag,"Soda Pop") or Two_D_ListCheck(self.Player.Bag,"Lemonade")):
                        self.Events.Dialouge("I'm on guard duty. Gee, I'm thirsty, though! Oh wait there,","the road's closed.")
                    else:self.Events.Dialouge(" Whoa, boy! I'm parched! ... Huh? I can have this drink? Gee, thanks!","... Glug glug... ... Gulp... If you want to go to SAFFRON CITY..","... You can go on through. I'll share this with the other guards!")
        elif self.Events.Stage == "BetweenR6_SC":
            self.Transitions(self.Kanto.InterExit_ODoor,self.Kanto.InterR6_OSpawn)
            self.Transitions(self.Kanto.InterEnterance_ODoor,self.Kanto.InterR6_O2Spawn)
            if self.Player.rect.colliderect(self.Kanto.GuardBoundry):
                if not self.Events.GuardDrinkGiven:
                    self.Player_Pause = True
                    if not (Two_D_ListCheck(self.Player.Bag,"Fresh Water") or Two_D_ListCheck(self.Player.Bag,"Soda Pop") or Two_D_ListCheck(self.Player.Bag,"Lemonade")):
                        self.Events.Dialouge("I'm on guard duty. Gee, I'm thirsty, though! Oh wait there,","the road's closed.")
                    else:self.Events.Dialouge(" Whoa, boy! I'm parched! ... Huh? I can have this drink? Gee, thanks!","... Glug glug... ... Gulp... If you want to go to SAFFRON CITY..","... You can go on through. I'll share this with the other guards!")
        elif self.Events.Stage == "UnderGround Entrance":
            self.Transitions(self.Kanto.UnderGE_R5Door,self.Kanto.UnderGE_R5Spawn)
            self.Transitions(self.Kanto.UnderGE_UnderGRDoor,self.Kanto.UnderGE_UnderGNSTunnelSpawn)
            for npc in self.Kanto.UndergroundEntranceNPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "UnderGroundS Entrance":
            self.Transitions(self.Kanto.UnderGE_R5Door,self.Kanto.UnderGSE_R6Spawn)
            self.Transitions(self.Kanto.UnderGE_UnderGRDoor,self.Kanto.UnderGSE_UnderGNSTunnelSpawn)
            for npc in self.Kanto.UndergroundSEntranceNPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "Underground RouteNS":
            self.Transitions(self.Kanto.UnderGNSTunnel_UnderGSEDoor,self.Kanto.UnderGR_UnderGESpawn)
            self.Transitions(self.Kanto.UnderGNSTunnel_UnderGEDoor,self.Kanto.UnderGR_UnderGESpawn)
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.UGNSHiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.UGNSHiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.UGNSHiddenItems[i].Picked = True
        elif self.Events.Stage == "VCH1":
            for npc in self.Kanto.VCH1NPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.VCH1_ODoor,self.Kanto.VCH1_OSpawn)  
        elif self.Events.Stage == "VCH2":
            for npc in self.Kanto.VCH2NPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.VCH1_ODoor,self.Kanto.VCH2_OSpawn)
        elif self.Events.Stage == "VCH3":
            for npc in self.Kanto.VCH3NPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.VCH1_ODoor,self.Kanto.VCH3_OSpawn)
            self.Readables(self.Kanto.VCH3Readables)
        elif self.Events.Stage == "Pokemon Fan Club":
            self.Readables(self.Kanto.PokemonFanClubReadables)
            for npc in self.Kanto.PokemonFanClubNPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.PFC_ODoor,self.Kanto.PFC_OSpawn) 
            if self.Player.rect.colliderect(self.Kanto.PFCChairman.rect):
                if not self.Events.PFCSpeech:
                    self.Interact("I chair the POKEMON Fan Club! I have collected over 100 POKEMON!","I'm very fussy when it comes to POKEMON! So... Did you come visit","to hear about my POKEMON?")
                    if self.Yes:
                        self.Player_Pause = True
                        if self.Events.PFCp1:self.Events.Dialouge("Good! Then listen up! My favorite RAPIDASH... It...cute...lovely..","smart...plus...amazing...you think so?...oh yes...it...stunning...","kindly...love it! Hug it...when...sleeping...warm and cuddly...","spectacular...ravishing... ...Oops! Look at the time! I kept you too long!")
                        elif self.Events.PFCp2:self.Events.Dialouge("Thanks for hearing me out! I want you to have this Bike Voucher!","Exchange that for a BICYCLE! Don't worry, my FEAROW will FLY me","anywhere! So, I don't need a BICYCLE! I hope you like cycling!")
                    if self.No:
                        self.Player_Pause = True
                        self.Events.Dialouge("Oh. Come back when you want to hear my story!")
                else:
                    self.NPC_CHange(self.Kanto.PFCChairman,f"Hello, {self.PlayerName}! Did you come see me about my POKEMON again?",self.Kanto.PFCChairman.type,"No? Too bad")
                    self.Kanto.PokemonFanClubNPCS.append(self.Kanto.PFCChairman)
        elif self.Events.Stage == "SS.Anne":
            for npc in self.Kanto.SS_AnneF1NPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.SS_AnneF1_ODoor,self.Kanto.SS_Anne_OSpawn)
            self.Transitions(self.Kanto.SAF1_SAF2Door,self.Kanto.SAF1_SAF2Spawn)
            self.Transitions(self.Kanto.SAF1_SAF0Door,self.Kanto.SAF1_SAF0Spawn)
            self.Transitions(self.Kanto.SAF1_R1Door,self.Kanto.SAF1_R1Spawn)
            self.Transitions(self.Kanto.SAF1_R2Door,self.Kanto.SAF1_R2Spawn)
            self.Transitions(self.Kanto.SAF1_R3Door,self.Kanto.SAF1_R3Spawn)
            self.Transitions(self.Kanto.SAF1_R4Door,self.Kanto.SAF1_R4Spawn)
            self.Transitions(self.Kanto.SAF1_R5Door,self.Kanto.SAF1_R5Spawn)
            self.Transitions(self.Kanto.SAF1_R6Door,self.Kanto.SAF1_R6Spawn)
            self.Transitions(self.Kanto.SAF1_KitDoor,self.Kanto.SAF1_KSpawn)
        elif self.Events.Stage == "SAF1Rooms":
            self.TrainerEncounters(self.OtherTrainers[6])
            for npc in self.Kanto.SS_AnneF1RoomsNPCs: self.NPC_Interaction(npc)
            self.Kanto.SS_AnneF1RoomsPickups,self.Kanto.SS_AnneF1RoomsCamera = self.Pickup(self.Kanto.SS_AnneF1RoomsPickups,self.Kanto.SS_AnneF1RoomsCamera)
            self.Transitions(self.Kanto.R1_SAF1Door,self.Kanto.R1_SAF1Spawn)
            self.Transitions(self.Kanto.R2_SAF1Door,self.Kanto.R2_SAF1Spawn)
            self.Transitions(self.Kanto.R3_SAF1Door,self.Kanto.R3_SAF1Spawn)
            self.Transitions(self.Kanto.R4_SAF1Door,self.Kanto.R4_SAF1Spawn)
            self.Transitions(self.Kanto.R5_SAF1Door,self.Kanto.R5_SAF1Spawn)
            self.Transitions(self.Kanto.R6_SAF1Door,self.Kanto.R6_SAF1Spawn)
        elif self.Events.Stage == "SAF1Kitchen":
            for npc in self.Kanto.SS_AnneF1KitchenNPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.Kit_SAF1Door,self.Kanto.Kit_SAF1Spawn)
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.KitchenHiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.KitchenHiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.KitchenHiddenItems[i].Picked = True
        elif self.Events.Stage == "SS.AnneF0":
            self.Transitions(self.Kanto.SAF0_SAF1Door,self.Kanto.SAF0_SAF1Spawn)
            self.Transitions(self.Kanto.SAF0_R1Door,self.Kanto.SAF0_R1Spawn)
            self.Transitions(self.Kanto.SAF0_R2Door,self.Kanto.SAF0_R2Spawn)
            self.Transitions(self.Kanto.SAF0_R3Door,self.Kanto.SAF0_R3Spawn)
            self.Transitions(self.Kanto.SAF0_R4Door,self.Kanto.SAF0_R4Spawn)
            self.Transitions(self.Kanto.SAF0_R5Door,self.Kanto.SAF0_R5Spawn)
        elif self.Events.Stage == "SAF0Rooms":
            self.TrainerEncounters(self.OtherTrainers[7])
            for npc in self.Kanto.SS_AnneF0RoomsNPCs: self.NPC_Interaction(npc)
            for i,Item in enumerate(self.Kanto.SAF0RoomsHiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.SAF0RoomsHiddenItems[i].Picked = True
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.SAF0RoomsHiddenItems)
                self.Player.ItemFinderPing = False
            self.Kanto.SS_AnneF0RoomsPickups,self.Kanto.SS_AnneF0RoomsCamera = self.Pickup(self.Kanto.SS_AnneF0RoomsPickups,self.Kanto.SS_AnneF0RoomsCamera)
            self.Transitions(self.Kanto.R1_SAF0Door,self.Kanto.R1_SAF0Spawn)
            self.Transitions(self.Kanto.R2_SAF0Door,self.Kanto.R2_SAF0Spawn)
            self.Transitions(self.Kanto.R3_SAF0Door,self.Kanto.R3_SAF0Spawn)
            self.Transitions(self.Kanto.R4_SAF0Door,self.Kanto.R4_SAF0Spawn)
            self.Transitions(self.Kanto.R5_SAF0Door,self.Kanto.R5_SAF0Spawn)
        elif self.Events.Stage == "SS.AnneF2":
            for npc in self.Kanto.SS_AnneF2NPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.SAF2_SAF1Door,self.Kanto.SAF2_SAF1Spawn)
            self.Transitions(self.Kanto.SAF2_HWDoor,self.Kanto.SAF2_HWSpawn)
            self.Transitions(self.Kanto.SAF2_R1Door,self.Kanto.SAF2_R1Spawn)
            self.Transitions(self.Kanto.SAF2_R2Door,self.Kanto.SAF2_R2Spawn)
            self.Transitions(self.Kanto.SAF2_R3Door,self.Kanto.SAF2_R3Spawn)
            self.Transitions(self.Kanto.SAF2_R4Door,self.Kanto.SAF2_R4Spawn)
            self.Transitions(self.Kanto.SAF2_R5Door,self.Kanto.SAF2_R5Spawn)
            self.Transitions(self.Kanto.SAF2_R6Door,self.Kanto.SAF2_R6Spawn)
            self.Transitions(self.Kanto.SAF2_CCDoor,self.Kanto.SAF2_CCSpawn)
            if not self.Events.SSRivalBattleDone:
                if self.Player.rect.colliderect(self.Kanto.SSBattleLine):
                    self.Player_Pause = True
                    self.Kanto.Rival.Team = self.Make_RivalTeam(20,["Scratch","Growl","Ember","Leer"],["Tackle","Growl","Leech Seed","Vine Whip"],["Tackle","Tail Whip","Bubble","Water Gun"],[Pokemon("Pidgeotto",19,["Gust","Sand Attack",'Quick Attack','-'],self.RivalName,"Pidgeotto"),Pokemon("Kadabra",18,["Teleport","Confusion",'Disable','-'],self.RivalName,"Kadabra"),Pokemon("Raticate",16,["Tackle","Tail Whip",'Quick Attack','Hyper Fang'],self.RivalName,"Raticate")],[Pokemon("Pidgeotto",19,["Gust","Sand Attack",'Quick Attack','-'],self.RivalName,"Pidgeotto"),Pokemon("Kadabra",18,["Teleport","Confusion",'Disable','-'],self.RivalName,"Kadabra"),Pokemon("Raticate",16,["Tackle","Tail Whip",'Quick Attack','Hyper Fang'],self.RivalName,"Raticate")],[Pokemon("Pidgeotto",19,["Gust","Sand Attack",'Quick Attack','-'],self.RivalName,"Pidgeotto"),Pokemon("Kadabra",18,["Teleport","Confusion",'Disable','-'],self.RivalName,"Kadabra"),Pokemon("Raticate",16,["Tackle","Tail Whip",'Quick Attack','Hyper Fang'],self.RivalName,"Raticate")],Stage=2)
                    self.Kanto.Rival.image = pygame.image.load(r"Map\Tileset\NPCS\Rival_Idle_Down.png").convert_alpha()
                    self.Player.rect.center = self.Kanto.SSBattleSpot
                    self.Kanto.Rival.rect.center = (self.Kanto.SSBattleSpot[0],self.Kanto.SSBattleSpot[1] - 60)
                    self.Kanto.SS_AnneF2Camera.add(self.Kanto.Rival)
                    self.Player.image = self.Player.Idle_Up
                    if self.Events.SSRivalFightCutscene: self.Events.Dialouge(f"{self.RivalName}:Bonjour! {self.PlayerName}! Imagine seeing you here! {self.PlayerName}, were you really ","invited? So how's your POKEDEX coming? I already caught 40 kinds,pal!",f"Different kinds are everywhere! Crawl around in grassy areas!")
                    if self.Events.SSRivalFight:
                        self.TrainerBattle(self.Kanto.Rival.Team,self.Kanto.Rival.Name,[f"{self.RivalName}: Humph! At least you're raising your POKEMON!",'',''],[f"{self.RivalName}: Ha",'',''],self.Events.Rivalbattlestance,1300,[])
                        self.Start_Battle_Animation()
                        if self.ExitBattle:
                            self.Events.SSRivalFight = False
                            if self.State_of_Battle == "Win":self.Events.SSRivalFightAftermath = True
                            else:
                                self.Events.SSRivalFightCutscene = True
                                self.Kanto.SS_AnneF2Camera.remove(self.Kanto.Rival)
                            self.ExitBattle = False
                    if self.Events.SSRivalFightAftermath:
                        self.Events.Dialouge(f"{self.RivalName}:I heard there was a CUT master on board. But, he was just a","seasick, old man! But, CUT itself is really useful! You should","go see him! Smell ya!")
        elif self.Events.Stage == "SAHallway":
            for npc in self.Kanto.SS_AnneF3HallWayNPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.HW_SAF2Door,self.Kanto.HW_SAF2Spawn)
            self.Transitions(self.Kanto.HW_SAF3Door,self.Kanto.HW_SAF3Spawn)
        elif self.Events.Stage == "SS.AnneF3":
            for npc in self.Kanto.SS_AnneF3NPCs: self.NPC_Interaction(npc)
            self.TrainerEncounters(self.OtherTrainers[8])
            self.Transitions(self.Kanto.SAF3_HWDoor,self.Kanto.SAF3_HWSpawn)
        elif self.Events.Stage == "SAF2Rooms":
            for npc in self.Kanto.SS_AnneF2RoomsNPCs: self.NPC_Interaction(npc)
            self.TrainerEncounters(self.OtherTrainers[9])
            self.Transitions(self.Kanto.R1_SAF2Door ,self.Kanto.R1_SAF2Spawn)
            self.Transitions(self.Kanto.R2_SAF2Door ,self.Kanto.R2_SAF2Spawn)
            self.Transitions(self.Kanto.R3_SAF2Door ,self.Kanto.R3_SAF2Spawn)
            self.Transitions(self.Kanto.R4_SAF2Door ,self.Kanto.R4_SAF2Spawn)
            self.Transitions(self.Kanto.R5_SAF2Door ,self.Kanto.R5_SAF2Spawn)
            self.Transitions(self.Kanto.R6_SAF2Door ,self.Kanto.R6_SAF2Spawn)
        elif self.Events.Stage == "Captain Cabin":
            self.Transitions(self.Kanto.CC_SAF2Door,self.Kanto.CC_SAF2Spawn)
            if self.Player.rect.colliderect(self.Kanto.SSCaptain.rect):
                self.Interact("Talk")
                if self.Yes:
                    self.Player_Pause = True
                    if self.Events.SSCaptainCutscene:self.Events.Dialouge(f"{self.Kanto.SSCaptain.Name}:Ooargh... I feel hideous... Urrp! Seasick...",f"{self.PlayerName} rubbed his back","Whew! Thank you! I feel much better!")
                    elif self.Events.SSCaptainHMGet:self.Events.Dialouge("You want to see my CUT technique? I could show you if I wasn't ill...","I know! You can have this! Teach it to your POKEMOn and you can see it CUT","any time! Whew! Now that I'm not sick any more, I guess it's time.")
                elif self.Events.SSCaptainDone:
                    self.Events.Stage = "OverWorld"
                    self.Player.rect.center = self.Kanto.SS_Anne_OSpawn
        elif self.Events.Stage == "VCGym":
            self.Transitions(self.Kanto.VC_ODoor,self.Kanto.VC_OSpawn)
            for totem in self.Kanto.VermilionGymReadables:
                if totem != self.Kanto.VCDoors:totem.Text2 = self.RivalName
            self.Readables(self.Kanto.VermilionGymReadables)
            self.TrainerEncounters(self.OtherTrainers[10])
            if not self.Player.Get_BadgeInfo("Thunder",Name=True):
                self.ShuffleSwitchs()
                self.GuessingSwitchs()
                if self.CheckSwitches() == 2:
                    try:
                        self.Kanto.VermilionGymBarriers.remove(self.Kanto.VCDoors.Rect)
                        self.Kanto.VermilionGymReadables.remove(self.Kanto.VCDoors)
                    except:pass
                self.GymLeaderEncounter(self.Kanto.Surge)
                if self.GymLeaderBattle:
                    self.TrainerBattle(self.Kanto.Surge.Team,"Lt.Surge",self.Kanto.Surge.WinnerText,["Try again next time", "",""],self.Kanto.Surge.Trainer_img,self.Kanto.Surge.Money,self.Kanto.Surge.Bag)
                    self.Start_Battle_Animation()
                    if self.ExitBattle :
                        self.GymLeaderBattle = False
                        self.Player_Pause = False
                        self.ExitBattle = False
                        self.Yes = False
                        if self.State_of_Battle == "Win":
                            self.Kanto.Surge.Battled = True
                            for npc in self.OtherTrainers[10]: npc.Battled = True
                            self.NPC_CHange(self.Kanto.VermilionGymCNPCS[0],"Whew! That match was electric!","Dialogue",NewText2="",NewText3="")
                            for read in range(len(self.Kanto.VermilionGymReadables)): 
                                if self.Kanto.VermilionGymReadables[read] != self.Kanto.VCDoors:self.Kanto.VermilionGymReadables[read].Text3 = self.PlayerName
                            self.Player.Badges["Thunder"] = True
                            self.GymLeaderGiveTM = True
            if self.Player.Get_BadgeInfo("Thunder",Name=True):
                try:
                    self.Kanto.VermilionGymBarriers.remove(self.Kanto.VCDoors.Rect)
                    self.Kanto.VermilionGymReadables.remove(self.Kanto.VCDoors)
                except:pass
                self.GymLeaderEncounter(self.Kanto.Surge)
                self.NPC_CHange(self.Kanto.VermilionGymCNPCS[0],"Whew! That match was electric!","Dialogue",NewText2="",NewText3="")
                for read in range(len(self.Kanto.VermilionGymReadables)):
                    if self.Kanto.VermilionGymReadables[read] != self.Kanto.VCDoors:self.Kanto.VermilionGymReadables[read].Text3 = self.PlayerName
                self.Kanto.Surge.Battled = True
                self.Kanto.Surge.TextChange()
                for npc in self.OtherTrainers[10]: npc.Battled = True
            if self.GymLeaderGiveTM:
                self.DialougePause = True
                self.Events.Dialouge(*self.Kanto.Surge.ExtraWinner)
            for npc in [self.Kanto.VermilionGymCNPCS[0]]: 
                self.NPC_Interaction(npc)
        elif self.Events.Stage == "Diglett's Cave Entrance":
            for npc in self.Kanto.DiglettCaveEntranceNPCS: self.NPC_Interaction(npc)
            try:
                self.Kanto.DiglettCaveEntranceBarriers.remove(self.Kanto.DiglettCaveExitNPCS[0].rect)
                self.Kanto.DiglettCaveEntranceBarriers.append(self.Kanto.DiglettCaveEntranceNPCS[0].rect)
            except:pass
            self.Transitions(self.Kanto.DCE_R11Door,self.Kanto.DCE_R11Spawn)
            self.Transitions(self.Kanto.DCE_DCDoor,self.Kanto.DCE_DCSpawn)
        elif self.Events.Stage == "Diglett's Cave":
            self.Transitions(self.Kanto.DC_DCEDoor,self.Kanto.DC_DCESpawn)
            self.Transitions(self.Kanto.DC_2DCEDoor,self.Kanto.DC_DCESpawn)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.DiglettCaveRocks)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.DiglettCaveRocks)
                self.Player.Moveable = True
                self.WildBattle = False
        elif self.Events.Stage == "Diglett's Cave Exit":
            for npc in self.Kanto.DiglettCaveExitNPCS: self.NPC_Interaction(npc)
            try:
                self.Kanto.DiglettCaveEntranceBarriers.remove(self.Kanto.DiglettCaveEntranceNPCS[0].rect)
                self.Kanto.DiglettCaveEntranceBarriers.append(self.Kanto.DiglettCaveExitNPCS[0].rect)
            except:pass
            self.Transitions(self.Kanto.DCE_R11Door,self.Kanto.DCExit_OSpawn)
            self.Transitions(self.Kanto.DCE_DCDoor,self.Kanto.DCExit_DCSpawn)
        elif self.Events.Stage == "R21H":
            for npc in self.Kanto.R21NPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.R21H_ODoor,self.Kanto.R21H_OSpawn)
        elif self.Events.Stage == "R22H":
            for npc in self.Kanto.R22NPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.R22H_VODoor,self.Kanto.R22H_VOSpawn)
            self.Transitions(self.Kanto.R22H_PODoor,self.Kanto.R22H_POSpawn)
            if not self.Events.HMFlashGet:
                if self.Player.rect.colliderect(self.Kanto.R22HAide.rect):
                    self.Interact("Hi! Remember me? I'm PROF.OAK's AIDE! If you caught 10 kinds",f"of POKEMON, I'm supposed to give you an Hm05! So, {self.PlayerName}! Have you","caught at least 10 kinds of POKEMON?")
                    if self.Yes:
                        self.Player_Pause = True
                        if len(self.Pokemon_Caught) >= 10:self.Events.Dialouge(f"Great! You have caught {len(self.Pokemon_Caught)} kinds of POKEMON! Congratulations","Here's FLASH")
                        else:self.Events.Dialouge(f"You only have {len(self.Pokemon_Caught)} kinds")
        elif self.Events.Stage == "R11H":
            self.NPC_Interaction(self.Kanto.R111HNPCS[0],self.Kanto.R11HDesk,True)
            self.Transitions(self.Kanto.R11H_VCODoor,self.Kanto.R11H_VCOSpawn)
            self.Transitions(self.Kanto.R11H_R12Door,self.Kanto.R11H_R12Spawn)
            self.Transitions(self.Kanto.R11H_R11HF2Door,self.Kanto.R11H_R11HF2Spawn)
        elif self.Events.Stage == "R11HF2":
            self.NPC_Interaction(self.Kanto.R112NPCS[0])
            self.Readables(self.Kanto.R11HF2Readables)
            self.Transitions(self.Kanto.R11HF2_R11HDoor,self.Kanto.R11HF2_R11HSpawn)
            if not self.Events.ItemFinderGet:
                if self.Player.rect.colliderect(self.Kanto.R11HAide.rect):
                    self.Interact("Hi! Remember me? I'm PROF.OAK's AIDE! If you caught 30 kinds",f"of POKEMON, I'm supposed to give you an ITEMFINDER! So, {self.PlayerName}! Have you","caught at least 30 kinds of POKEMON?")
                    if self.Yes:
                        self.Player_Pause = True
                        if len(self.Pokemon_Caught) >= 30:self.Events.Dialouge(f"Great! You have caught {len(self.Pokemon_Caught)} kinds of POKEMON! Congratulations","Here's an ITEMFINDER")
                        else:self.Events.Dialouge(f"You only have {len(self.Pokemon_Caught)} kinds")
        elif self.Events.Stage == "Rock TunnelF1":
            if not self.FlashPrompt and self.Player.Check_Moves("Flash"):
                self.Player_Pause = True 
                self.Interact("Do you want to use flash")
                if self.Yes:
                    self.FlashPrompt = True
                    self.UseFlash = True
                    self.Yes = False
                    self.Player_Pause = False
                elif self.No:
                    self.No = False
                    self.FlashPrompt = True
                    self.UseFlash = False
                    self.Player_Pause = False
            self.TrainerEncounters(self.OtherTrainers[11])
            self.Transitions(self.Kanto.RTF1_ODoor,self.Kanto.RTF1_OSpawn) 
            self.Transitions(self.Kanto.RTF1_ADoor,self.Kanto.RTF1_ASpawn) 
            self.Transitions(self.Kanto.RTF1_BDoor,self.Kanto.RTF1_BSpawn) 
            self.Transitions(self.Kanto.RTF1_CDoor,self.Kanto.RTF1_CSpawn) 
            self.Transitions(self.Kanto.RTF1_DDoor,self.Kanto.RTF1_DSpawn) 
            self.Transitions(self.Kanto.RTF1_ExitDoor,self.Kanto.RTF1_ExitSpawn) 
            if not True in (self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.Rock_TunnelF1WildBlocks)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.Rock_TunnelF1WildBlocks)
                self.Player.Moveable = True
                self.WildBattle = False
        elif self.Events.Stage == "Rock TunnelF2":
            if not self.FlashPrompt and self.Player.Check_Moves("Flash"):
                self.Player_Pause = True 
                self.Interact("Do you want to use flash")
                if self.Yes:
                    self.FlashPrompt = True
                    self.UseFlash = True
                    self.Yes = False
                    self.Player_Pause = False
                elif self.No:
                    self.No = False
                    self.FlashPrompt = True
                    self.UseFlash = False
                    self.Player_Pause = False
            self.TrainerEncounters(self.OtherTrainers[12])
            self.Transitions(self.Kanto.A_RTF1Door,self.Kanto.A_RTF1Spawn)
            self.Transitions(self.Kanto.B_RTF1Door,self.Kanto.B_RTF1Spawn)
            self.Transitions(self.Kanto.C_RTF1Door,self.Kanto.C_RTF1Spawn)
            self.Transitions(self.Kanto.D_RTF1Door,self.Kanto.D_RTF1Spawn)
            if not True in (self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.Rock_TunnelF2WildBlocks)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.Rock_TunnelF2WildBlocks)
                self.Player.Moveable = True
                self.WildBattle = False
        elif self.Events.Stage == "Lavender Volunteer Pokemon House":
            self.Transitions(self.Kanto.LTVH_ODoor,self.Kanto.LTVH_OSpawn)
            for npc in self.Kanto.LTVolunteerHouseNPCS: self.NPC_Interaction(npc)
            self.Readables(self.Kanto.LTVolunteerHouseReadables)
            if self.Events.Mr_FujiSaved:
                if self.Kanto.LTVHMr_Fuji not in self.Kanto.LTVolunteerHouseNPCS:
                    self.Kanto.LTVolunteerHouseBarriers.append(self.Kanto.LTVHMr_Fuji.rect)
                    self.Kanto.LTVolunteerHouseNPCS.append(self.Kanto.LTVHMr_Fuji)
                    self.Kanto.LTVolunteerHouseCamera.add(self.Kanto.LTVHMr_Fuji)
                for npc in self.Kanto.LTVolunteerHouseNPCS:
                    if npc.Name == "Man":
                            npc.Text1_a = "MR.FUJI had been praying alone for CUBONE's mother."
                            npc.Text1_b = ""
                            npc.Text1_c = ""
                    elif npc.Name == "Girl":
                            npc.Text1_a = "It's so warm! POKEMON are so nice to hug!"
                            npc.Text1_b = ""
                            npc.Text1_c = ""
            if not self.Events.Mr_FujiSaved:
                try:
                    self.Kanto.LTVolunteerHouseCamera.remove(self.Kanto.LTVHMr_Fuji)
                    self.Kanto.LTVolunteerHouseBarriers.remove(self.Kanto.LTVHMr_Fuji.rect)
                    self.Kanto.LTVolunteerHouseNPCS.remove(self.Kanto.LTVHMr_Fuji)
                except:pass
        elif self.Events.Stage == "LTH1":
            self.Transitions(self.Kanto.LTH_ODoor,self.Kanto.LTH1_OSpawn)
            for npc in self.Kanto.LT1HNPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "LTH2":
            self.Transitions(self.Kanto.LTH_ODoor,self.Kanto.LTH2_OSpawn)
            if self.Player.rect.colliderect(self.Kanto.Name_Rater.rect):
                self.Interact("Would you like to change your pokemon's nickname")
                if self.Yes:
                    self.Player_Pause = True
                    if self.ChangePokeName not in self.Player.Pokemon:self.NameRater()
                    else:self.ChangeNickName()
        elif self.Events.Stage == "SaffronEEntrance":
            self.Transitions(self.Kanto.SaffronEEntrance_ODoor,self.Kanto.R8toSF_OSpawn)
            self.Transitions(self.Kanto.SaffronWExit_ODoor,self.Kanto.SFtoR8_OSpawn)
            if self.Player.rect.colliderect(self.Kanto.EWGuardBoundry):
                if not self.Events.GuardDrinkGiven:
                    self.Player_Pause = True
                    if not (Two_D_ListCheck(self.Player.Bag,"Fresh Water") or Two_D_ListCheck(self.Player.Bag,"Soda Pop") or Two_D_ListCheck(self.Player.Bag,"Lemonade")):
                        self.Events.Dialouge("I'm on guard duty. Gee, I'm thirsty, though! Oh wait there,","the road's closed.")
                    else:self.Events.Dialouge(" Whoa, boy! I'm parched! ... Huh? I can have this drink? Gee, thanks!","... Glug glug... ... Gulp... If you want to go to SAFFRON CITY..","... You can go on through. I'll share this with the other guards!")
        elif self.Events.Stage == "UnderGroundE Entrance":
            for npc in self.Kanto.Underground_EEntranceNPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.UnderWEGE_ODoor,self.Kanto.UGEWEntrance_OSpawn) 
            self.Transitions(self.Kanto.UnderGE_WETunnelDoor,self.Kanto.UnderGE_UnderGWETunnelSpawn) 
        elif self.Events.Stage == "UnderGroundW Entrance":
            for npc in self.Kanto.Underground_WEntranceNPCS: self.NPC_Interaction(npc)
            self.Transitions(self.Kanto.UnderGE_WETunnelDoor,self.Kanto.UnderGWE_UnderGWETunnelSpawn)
            self.Transitions(self.Kanto.UnderWEGE_ODoor,self.Kanto.UGWEEntrance_OSpawn)
        elif self.Events.Stage == "Underground TunnelWE":
            self.Transitions(self.Kanto.UnderGWETunnel_UnderGEDoor,self.Kanto.WETunnel_UnderGESpawn)
            self.Transitions(self.Kanto.UnderGWETunnel_UnderGWEDoor,self.Kanto.WETunnel_UnderGESpawn)
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.UGWEHiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.UGWEHiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.UGWEHiddenItems[i].Picked = True
        elif self.Events.Stage == "SaffronWEntrance":
            self.Transitions(self.Kanto.SaffronWExit_ODoor,self.Kanto.R7toSF_OSpawn)
            self.Transitions(self.Kanto.SaffronEEntrance_ODoor,self.Kanto.SFtoR7_OSpawn)
            if self.Player.rect.colliderect(self.Kanto.EWGuardBoundry):
                if not self.Events.GuardDrinkGiven:
                    self.Player_Pause = True
                    if not (Two_D_ListCheck(self.Player.Bag,"Fresh Water") or Two_D_ListCheck(self.Player.Bag,"Soda Pop") or Two_D_ListCheck(self.Player.Bag,"Lemonade")):
                        self.Events.Dialouge("I'm on guard duty. Gee, I'm thirsty, though! Oh wait there,","the road's closed.")
                    else:self.Events.Dialouge(" Whoa, boy! I'm parched! ... Huh? I can have this drink? Gee, thanks!","... Glug glug... ... Gulp... If you want to go to SAFFRON CITY..","... You can go on through. I'll share this with the other guards!")
        elif self.Events.Stage == "Game Corner":
            self.Transitions(self.Kanto.GC_ODoor,self.Kanto.GC_OSpawn)
            self.Readables(self.Kanto.Game_CornerReadables)
            if self.Events.GCRocketEncounter:
                try:
                    self.Kanto.Game_CornerBarriers.remove(self.Kanto.GCRocket.rect)
                except:pass
                self.Transitions(self.Kanto.GC_RocketBaseF1Door,self.Kanto.GC_RocketBaseF1Spawn)
                if self.Kanto.GCLever not in self.Kanto.Game_CornerReadables:self.Kanto.Game_CornerReadables.append(self.Kanto.GCLever)  
            if not self.Events.GCRocketEncounter:
                if self.Player.rect.colliderect(self.Kanto.GCRocket.rect):
                    self.Interact("Talk?")
                    if self.Yes:
                        self.Player_Pause = True
                        if self.Events.GCRocketCutscene:self.Events.Dialouge("I'm guarding this poster! Go away, or else!")
                    if self.Events.GCRocketFight:
                        self.TrainerBattle(self.Kanto.GCRocket.Team,self.Kanto.GCRocket.Name,[*self.Kanto.GCRocket.WinnerText],[f"{self.Kanto.GCRocket.Name}: Ha",'',''],self.Kanto.GCRocket.Trainer_img,self.Kanto.GCRocket.Money,[])
                        self.Start_Battle_Animation()
                        if self.ExitBattle:
                            self.Events.GCRocketFight = False
                            if self.State_of_Battle == "Win":self.Events.GCRocketAftermath = True
                            else:self.Events.GCRocketCutscene = True
                            self.ExitBattle = False
                    if self.Events.GCRocketAftermath:self.Events.Dialouge("Our hideout might be discovered! I better tell BOSS!")
            for npc in self.Kanto.Game_CornerNPCS: 
                if npc.Name == "Worker":self.NPC_Interaction(npc,self.Kanto.Game_CornerWorkerDesk,True)
                else:self.NPC_Interaction(npc)
            if self.Player.rect.colliderect(self.Kanto.Game_CornerTradeDesk):
                if not Two_D_ListCheck(self.Player.Bag,"Coin Case"):
                    self.Events.Dialouge("You need a coin case to buy coins")
                else:
                    self.Interact("Would you like to buy coins. $1000 for 50 coins",f"${self.Player.Money}",f"Coins: {self.Player.Coins}")
                    if self.Yes:
                        if self.Player.Money >= 1000:
                            self.Player.Money -= 1000
                            self.Player.Coins += 50
                        self.Yes = False
                    if self.No:self.No = False
        elif self.Events.Stage == "Prize Booth":
            self.Transitions(self.Kanto.PrizeBooth_ODoor,self.Kanto.PrizeBooth_OSpawn)
            for npc in self.Kanto.Prize_BoothNPCS:self.NPC_Interaction(npc)
            self.Prize_Booth_Store(self.Kanto.Booth1,[("Abra",120),("Clefairy",750),("Nidorino",1200)])
            self.Prize_Booth_Store(self.Kanto.Booth2,[("Pinsir",2500),("Dratini",4600),("Porygon",6500)])
            self.Prize_Booth_Store(self.Kanto.Booth3,[("TM23",3300),("TM15",5500),("TM50",7700)])
        elif self.Events.Stage == "CERestourant":
            self.Transitions(self.Kanto.CERestourant_ODoor,self.Kanto.CERestourant_OSpawn)
            for npc in self.Kanto.CERestourantNPCS: 
                if npc.Name == "Maid":self.NPC_Interaction(npc,self.Kanto.MaidDesk,True)
                elif npc.Name == "Chef":self.NPC_Interaction(npc,self.Kanto.ChefDesk,True)
                else:self.NPC_Interaction(npc)
        elif self.Events.Stage == "CE1H":
            self.Transitions(self.Kanto.CE1H_ODoor,self.Kanto.CE1H_OSpawn)
            for npc in self.Kanto.CE1HNPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "CE2H":
            self.Transitions(self.Kanto.CE2H_ODoor,self.Kanto.CE2H_OSpawn)
            for npc in self.Kanto.CE2HNPCS: 
                if npc.Name == "Woman":self.NPC_Interaction(npc,self.Kanto.CE2HDesk,True)
                else:self.NPC_Interaction(npc)
        elif self.Events.Stage == "CEMansionF1":
            self.Transitions(self.Kanto.CEMF1_ODoor,self.Kanto.CEMansion_OSpawn)
            self.Transitions(self.Kanto.CEMF1_CEMF2Door,self.Kanto.CEMF1_CEMF2Spawn)
            self.Transitions(self.Kanto.BCEMF1_ODoor,self.Kanto.BCEMF1_OSpawn)
            self.Transitions(self.Kanto.BCEMF1_BCEMF2Door,self.Kanto.BCEMF1_BCEMF2Spawn)
            for npc in self.Kanto.CEMF1NPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "CEMansionF2":
            self.Transitions(self.Kanto.CEMF2_CEMF1Door,self.Kanto.CEMF2_CEMF1Spawn)
            self.Transitions(self.Kanto.BCEMF2_BCEMF1Door,self.Kanto.O_BCEMF1Spawn)
            self.Transitions(self.Kanto.CEMF2_CEMF3Door,self.Kanto.CEMF2_CEMF3Spawn)
            self.Transitions(self.Kanto.BCEMF2_BCEMF3Door,self.Kanto.BCEMF4_BCEMF3Spawn)
        elif self.Events.Stage == "CEMansionF3":
            self.Transitions(self.Kanto.CEMF3_CEMF2Door,self.Kanto.CEMF3_CEMF2Spawn)
            self.Transitions(self.Kanto.BCEMF3_BCEMF2Door,self.Kanto.BCEMF1_BCEMF2Spawn)
            self.Transitions(self.Kanto.CEMF3_CEMF4Door,self.Kanto.CEMF3_CEMF4Spawn)
            self.Transitions(self.Kanto.BCEMF3_BCEMF4Door,self.Kanto.BCEMF3_BCEMF4Spawn)
            if not self.E4Beaten or len(self.Pokemon_Caught) < 151:
                if self.Player.rect.colliderect(self.Kanto.Creator.rect):
                    self.Interact("Talk")
                    if self.Yes:
                        self.DialougePause = True
                        self.Events.Dialouge("Hi! I am the sole develper of this game. I hope you enjoy playing.","Come back after getting all 151 pokemon for a surprise.")
            elif len(self.Pokemon_Caught) == 151 and self.Player.rect.colliderect(self.Kanto.Creator.rect):
                self.Interact("Talk")
                if self.Yes:
                    if not self.Events.CFightDone:
                        self.Player_Pause = True
                        if self.Events.CFightCutscene:self.Events.Dialouge("Well. I guess if you're here, then you pretty much have beaten the game.","Well done and thanks for playing. But before you go, let's fight","I just pulled my old save file so my team is fully ready to go","How about you?")
                        if self.Events.CFight:
                            self.TrainerBattle(self.Kanto.Creator.Team,"Creator",["Wow",'You truly are the best',''],["You're still not there",'',''],self.Kanto.Creator.Trainer_img,100,[["Full Restore",12]])
                            self.Start_Battle_Animation()
                            if self.ExitBattle:
                                self.Events.CFight = False
                                if self.State_of_Battle == "Win":self.Events.CFightAftermath = True
                                else:self.Events.CFightCutscene = True
                                self.ExitBattle = False
                        if self.Events.CFightAftermath:self.Events.Dialouge("I have nothing left to say","Have a great day and thanks for playing","You beat the Game")
                    else:
                        self.DialougePause = True
                        self.Events.Dialouge("I have nothing left to say","Have a great day and thanks for playing","You beat the Game")
        elif self.Events.Stage == "CEMansionF4":
            self.Transitions(self.Kanto.CEMF4_CEMF3Door,self.Kanto.CEMF4_CEMF3Spawn)
            self.Transitions(self.Kanto.BCEMF4_BCEMF3Door,self.Kanto.BCEMF4_BCEMF3Spawn)
            self.Transitions(self.Kanto.BCEMF4_BCEMF4HDoor,self.Kanto.BCEMF4_BCEMF4HSpawn)
        elif self.Events.Stage == "CEMansionF4House":
            self.Transitions(self.Kanto.BCEMF4H_BCEMF4Door,self.Kanto.BCEMF4H_BCEMF4Spawn)
            for npc in self.Kanto.CEMF4HNPCS: self.NPC_Interaction(npc)
            if self.F4Eevee:
                self.Kanto.CEMansionF4HouseCamera.remove(self.Kanto.F4Eevee)
            if not self.F4Eevee:
                if self.Player.rect.colliderect(self.Kanto.F4Eevee.rect):
                    self.Interact("This looks like an Eevee. Wanna pick it up")
                    if self.Yes:
                        self.Player.Add_Pokemon(Pokemon("Eevee",25,["Tackle","Sand Attack"],self.PlayerName,"Eevee"))
                        Game.AddPokeDex("Eevee",True)
                        self.Player_Data["F4Eevee"] = True
                        self.Yes = False
                    if self.No:self.No = False
        elif self.Events.Stage == "CEStoreF1":
            self.Transitions(self.Kanto.CEStoreF1Right_ODoor,self.Kanto.CEStoreF1Right_OSpawn)
            self.Transitions(self.Kanto.CEStoreF1Left_ODoor,self.Kanto.CEStoreF1Left_OSpawn)
            self.Transitions(self.Kanto.CEStoreF1_CEStoreF2Door,self.Kanto.CEStoreF1_CEStoreF2Spawn)
            self.Transitions(self.Kanto.CEStoreF1_ElevatorDoor,self.Kanto.ElevatorSpawn)
            for npc in self.Kanto.CEStoreF1NPCS: self.NPC_Interaction(npc,self.Kanto.F1Desk,True)
            self.Readables(self.Kanto.CEStoreF1Readables)
        elif self.Events.Stage == "CEStoreF2":
            self.Transitions(self.Kanto.CEStoreF2_CEStoreF1Door,self.Kanto.CEStoreF2_CEStoreF1Spawn)
            self.Transitions(self.Kanto.CEStoreF2_ElevatorDoor,self.Kanto.ElevatorSpawn)
            self.Transitions(self.Kanto.CEStoreF2_CEStoreF3Door,self.Kanto.CEStoreF2_CEStoreF3Spawn)
            self.Readables(self.Kanto.CEStoreF2Readables)
            self.CEDeptStore([["TM32",1000],["TM33",1000],["TM02",2000],["TM07",2000],["TM37",2000],["TM01",3000],["TM05",3000],["TM09",3000],["TM17",3000]],self.Kanto.F2RightDesk)
            self.CEDeptStore([["Great Ball",600],["Super Potion",700],["Revive",1500],["Super Repel",500],["Antidote",100],["Burn Heal",250],["Ice Heal",250],["Awakening",200],["Parlyz Heal",200]],self.Kanto.F2LeftDesk)
            for npc in self.Kanto.CEStoreF2NPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "CEStoreF3":
            self.Transitions(self.Kanto.CEStoreF3_CEStoreF2Door,self.Kanto.CEStoreF3_CEStoreF2Spawn)
            self.Transitions(self.Kanto.CEStoreF3_ElevatorDoor,self.Kanto.ElevatorSpawn)
            self.Transitions(self.Kanto.CEStoreF3_CEStoreF4Door,self.Kanto.CEStoreF3_CEStoreF4Spawn)
            self.Readables(self.Kanto.CEStoreF3Readables)
            for npc in self.Kanto.CEStoreF3NPCS: 
                if npc.Name == "Worker":self.NPC_Interaction(npc,self.Kanto.F3Desk,True)
                else:self.NPC_Interaction(npc)
        elif self.Events.Stage == "CEStoreF4":
            self.Transitions(self.Kanto.CEStoreF4_CEStoreF3Door,self.Kanto.CEStoreF4_CEStoreF3Spawn)
            self.Transitions(self.Kanto.CEStoreF4_ElevatorDoor,self.Kanto.ElevatorSpawn)
            self.Transitions(self.Kanto.CEStoreF4_CEStoreF5Door,self.Kanto.CEStoreF4_CEStoreF5Spawn)
            self.Readables(self.Kanto.CEStoreF4Readables)
            self.CEDeptStore([("Poke Doll",1000),("Fire Stone",2100),("Thunder Stone",2100),("Water Stone",2100),("Leaf Stone",2100)],self.Kanto.F4Desk)
            for npc in self.Kanto.CEStoreF4NPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "CEStoreF5":
            self.Transitions(self.Kanto.CEStoreF5_CEStoreF4Door,self.Kanto.CEStoreF5_CEStoreF4Spawn)
            self.Transitions(self.Kanto.CEStoreF5_CEStoreRoofDoor,self.Kanto.CEStoreF5_CEStoreRoofSpawn)
            self.Transitions(self.Kanto.CEStoreF5_ElevatorDoor,self.Kanto.ElevatorSpawn)
            self.Readables(self.Kanto.CEStoreF5Readables)
            self.CEDeptStore([["Hp Up",9800],["Protein",9800],["Iron",9800],["Carbos",9800],["Calcium",9800]],self.Kanto.F5RightDesk)
            self.CEDeptStore([["X Accuracy",950],["Guard Spec",700],["Dire Hit",650],["X Attack",500],["X Defend",550],["X Speed",350],["X Special",350]],self.Kanto.F5LeftDesk)
            for npc in self.Kanto.CEStoreF5NPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "CEStoreRoof":
            self.Transitions(self.Kanto.CEStoreRoof_CEStoreF5Door,self.Kanto.CEStoreRoof_CEStoreF5Spawn)
            self.Readables(self.Kanto.CEStoreRooftopReadables)
            for npc in self.Kanto.CEStoreRooftopNPCS: 
                if npc.Name == "Sister":
                    if self.Player.rect.colliderect(npc.rect):
                        if False in [self.Events.GirlGotWater,self.Events.GirlGotLemons,self.Events.GirlGotPop]:
                            if self.RooftopDrinkGirlText() != "":
                                self.Interact("I'm thirsty",self.RooftopDrinkGirlText())
                                if self.Yes:
                                    if self.RooftopDrinkGirlText() == "Can I have that Water your holding":
                                        self.Player_Pause = True
                                        self.Events.Dialouge("Yay! Water! Thank you! You can have this from me!","TM13 contains ICE BEAM! It can freeze the target sometimes!")
                                    elif self.RooftopDrinkGirlText() == "Can I have that Pop your holding":
                                        self.Player_Pause = True
                                        self.Events.Dialouge("Yay! Soda! Thank you! You can have this from me!","TM48 contains ROCK SLIDE! It can spook the target sometimes!")
                                    elif self.RooftopDrinkGirlText() == "Can I have that Lemonade your holding":
                                        self.Player_Pause = True
                                        self.Events.Dialouge("Yay! Lemonade! Thank you! You can have this from me!","TM49 contains TRI ATTACK!")
                            else:self.Events.Dialouge("I'm thirsty")
                        else:self.Events.Dialouge("Stranger Danger!")   
                else:self.NPC_Interaction(npc)
            for m in self.Kanto.RooftopVendingMachines:self.VendingMachines(m)
        elif self.Events.Stage == "CEStoreElevator":
            self.CEStoreElevator()
        elif self.Events.Stage == "CEGym":
            self.Transitions(self.Kanto.CEGym_ODoor,self.Kanto.CEGym_OSpawn)
            if self.Player.Get_BadgeInfo("Cascade",Name=True):self.Use_Cut()
            for totem in self.Kanto.CeladonGymReadables:totem.Text2 = self.RivalName
            self.Readables(self.Kanto.CeladonGymReadables)
            self.TrainerEncounters(self.OtherTrainers[13])
            if not self.Player.Get_BadgeInfo("Rainbow",Name=True):
                self.GymLeaderEncounter(self.Kanto.Erika)
                if self.GymLeaderBattle:
                    self.TrainerBattle(self.Kanto.Erika.Team,"Erika",self.Kanto.Erika.WinnerText,["Try again next time", "",""],self.Kanto.Erika.Trainer_img,self.Kanto.Erika.Money,self.Kanto.Erika.Bag)
                    self.Start_Battle_Animation()
                    if self.ExitBattle :
                        self.GymLeaderBattle = False
                        self.Player_Pause = False
                        self.ExitBattle = False
                        self.Yes = False
                        if self.State_of_Battle == "Win":
                            self.Kanto.Erika.Battled = True
                            for npc in self.OtherTrainers[13]: npc.Battled = True
                            for read in range(len(self.Kanto.CeladonGymReadables)): self.Kanto.CeladonGymReadables[read].Text3 = self.PlayerName
                            self.Player.Badges["Rainbow"] = True
                            self.GymLeaderGiveTM = True
            if self.Player.Get_BadgeInfo("Rainbow",Name=True):
                self.GymLeaderEncounter(self.Kanto.Erika)
                for read in range(len(self.Kanto.CeladonGymReadables)): self.Kanto.CeruleanGymReadables[read].Text3 = self.PlayerName
                self.Kanto.Erika.Battled = True
                self.Kanto.Erika.TextChange()
                for npc in self.OtherTrainers[13]: npc.Battled = True
            if self.GymLeaderGiveTM:
                self.DialougePause = True
                self.Events.Dialouge(*self.Kanto.Erika.ExtraWinner)
        elif self.Events.Stage == "Rocket HideoutF1":
            self.TrainerEncounters(self.OtherTrainers[14])
            self.Transitions(self.Kanto.RocketBaseF1_GCDoor,self.Kanto.RocketBaseF1_GCSpawn)
            self.Kanto.Rocket_HideoutF1Pickups,self.Kanto.Rocket_HideoutF1Camera = self.Pickup(self.Kanto.Rocket_HideoutF1Pickups,self.Kanto.Rocket_HideoutF1Camera)
            self.Transitions(self.Kanto.RocketBaseF1_RocketBaseF2Door,self.Kanto.RocketBaseF1_RocketBaseF2Spawn)
            self.Transitions(self.Kanto.RocketBaseF1_2RocketBaseF2Door,self.Kanto.RocketBaseF1_2RocketBaseF2Spawn)
            self.Transitions(self.Kanto.RocketBaseF1_ElevatorDoor,self.Kanto.RocketBase_ElevatorSpawn)
            self.Readables(self.Kanto.RocketBaseF1Readables)
            if self.Events.RBaseGiovanniEncounter:
                for npc in self.OtherTrainers[14]: npc.Battled = True
            if Two_D_ListCheck(self.Player.Bag,"Lift Key"):
                try:
                    self.Kanto.RocketBaseF1Readables.remove(self.Kanto.RocketBaseF1Doors)
                    self.Kanto.RocketBaseF1Barriers.remove(self.Kanto.RocketBaseF1Doors.Rect)
                except:pass
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.Rocket_HideoutF1HiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.Rocket_HideoutF1HiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.Rocket_HideoutF1HiddenItems[i].Picked = True
        elif self.Events.Stage == "Rocket HideoutF2":
            self.TrainerEncounters(self.OtherTrainers[15])
            self.Transitions(self.Kanto.RocketBaseF2_RocketBaseF1Door,self.Kanto.RocketBaseF2_RocketBaseF1Spawn)
            self.Transitions(self.Kanto.RocketBaseF2_2RocketBaseF1Door,self.Kanto.RocketBaseF2_2RocketBaseF1Spawn)
            self.Transitions(self.Kanto.RocketBaseF2_RocketBaseF3Door,self.Kanto.RocketBaseF2_RocketBaseF3Spawn)
            self.Transitions(self.Kanto.RocketBaseF2_ElevatorDoor,self.Kanto.RocketBase_ElevatorSpawn)
            self.Kanto.Rocket_HideoutF2Pickups,self.Kanto.Rocket_HideoutF2Camera = self.Pickup(self.Kanto.Rocket_HideoutF2Pickups,self.Kanto.Rocket_HideoutF2Camera)
            self.MovingBlocks(self.Kanto.MovingRocketBaseF2Blocks)
            self.Readables(self.Kanto.RocketBaseF2Readables)
            if self.Events.RBaseGiovanniEncounter:
                for npc in self.OtherTrainers[15]: npc.Battled = True
            if Two_D_ListCheck(self.Player.Bag,"Lift Key"):
                try:
                    self.Kanto.RocketBaseF2Readables.remove(self.Kanto.RocketBaseF2Doors)
                    self.Kanto.RocketBaseF2Barriers.remove(self.Kanto.RocketBaseF2Doors.Rect)
                except:pass
        elif self.Events.Stage == "Rocket HideoutF3":
            self.TrainerEncounters(self.OtherTrainers[16])
            self.Transitions(self.Kanto.RocketBaseF3_RocketBaseF2Door,self.Kanto.RocketBaseF3_RocketBaseF2Spawn)
            self.Transitions(self.Kanto.RocketBaseF3_RocketBaseF4Door,self.Kanto.RocketBaseF3_RocketBaseF4Spawn)
            self.MovingBlocks(self.Kanto.MovingRocketBaseF3Blocks)
            self.Kanto.Rocket_HideoutF3Pickups,self.Kanto.Rocket_HideoutF3Camera = self.Pickup(self.Kanto.Rocket_HideoutF3Pickups,self.Kanto.Rocket_HideoutF3Camera)
            if self.Events.RBaseGiovanniEncounter:
                for npc in self.OtherTrainers[16]: npc.Battled = True
            for i,Item in enumerate(self.Kanto.Rocket_HideoutF3HiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.Rocket_HideoutF3HiddenItems[i].Picked = True
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.Rocket_HideoutF3HiddenItems)
                self.Player.ItemFinderPing = False
        elif self.Events.Stage == "Rocket HideoutF4":
            self.TrainerEncounters(self.OtherTrainers[17])
            self.Transitions(self.Kanto.RocketBaseF4_RocketBaseF3Door,self.Kanto.RocketBaseF4_RocketBaseF3Spawn)
            self.Transitions(self.Kanto.RocketBaseF4_ElevatorDoor,self.Kanto.RocketBase_ElevatorSpawn)
            self.Kanto.Rocket_HideoutF4Pickups,self.Kanto.Rocket_HideoutF4Camera = self.Pickup(self.Kanto.Rocket_HideoutF4Pickups,self.Kanto.Rocket_HideoutF4Camera)
            if self.Events.RBaseGiovanniEncounter:
                try:
                    self.Kanto.Rocket_HideoutF4Camera.remove(self.Kanto.RBaseGiovanni)
                    self.Kanto.RocketBaseF4Barriers.remove(self.Kanto.RBaseGiovanni.rect)
                except:pass
                for npc in self.OtherTrainers[17]: npc.Battled = True
            if not self.Events.RBaseGiovanniEncounter:
                if self.Player.rect.colliderect(self.Kanto.RBaseGiovanni.rect):
                    self.Interact("Talk?")
                    if self.Yes:
                        self.Player_Pause = True
                        if self.Events.RBaseGiovanniCutscene:self.Events.Dialouge(*self.Kanto.RBaseGiovanni.preBattleText)
                    if self.Events.RBaseGiovanniFight:
                        self.TrainerBattle(self.Kanto.RBaseGiovanni.Team,self.Kanto.RBaseGiovanni.Name,[*self.Kanto.RBaseGiovanni.WinnerText],[f"{self.Kanto.RBaseGiovanni.Name}: Ha",'',''],self.Kanto.RBaseGiovanni.Trainer_img,self.Kanto.RBaseGiovanni.Money,self.Kanto.RBaseGiovanni.Bag)
                        self.Start_Battle_Animation()
                        if self.ExitBattle:
                            self.Events.RBaseGiovanniFight = False
                            if self.State_of_Battle == "Win":self.Events.RBaseGiovanniAftermath = True
                            else:self.Events.RBaseGiovanniCutscene = True
                            self.ExitBattle = False
                    if self.Events.RBaseGiovanniAftermath:self.Events.Dialouge(*self.Kanto.RBaseGiovanni.AftermathText)
            for i,Item in enumerate(self.Kanto.Rocket_HideoutF4HiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.Rocket_HideoutF4HiddenItems[i].Picked = True
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.Rocket_HideoutF4HiddenItems)
                self.Player.ItemFinderPing = False
        elif self.Events.Stage == "RocketBaseElevator":
            self.RocketBaseElevator()
        elif self.Events.Stage == "PokeTowerF1":
            self.Transitions(self.Kanto.PokeTowerF1_ODoor,self.Kanto.PokeTowerF1_OSpawn)
            self.Transitions(self.Kanto.PokeTowerF1_PokeTowerF2Door,self.Kanto.PokeTowerF1_PokeTowerF2Spawn)
            for npc in self.Kanto.Pokemon_TowerF1NPCS: 
                if npc.Name == "Employee":self.NPC_Interaction(npc,self.Kanto.PokemonTowerF1Desk,True)
                else:self.NPC_Interaction(npc)
        elif self.Events.Stage == "PokeTowerF2":
            self.Transitions(self.Kanto.PokeTowerF2_PokeTowerF1Door,self.Kanto.PokeTowerF2_PokeTowerF1Spawn)
            self.Transitions(self.Kanto.PokeTowerF2_PokeTowerF3Door,self.Kanto.PokeTowerF2_PokeTowerF3Spawn)
            for npc in self.Kanto.Pokemon_TowerF2NPCS:self.NPC_Interaction(npc)
            if self.Events.PokeTowerRivalFightDone:
                try:
                    self.Kanto.Pokemon_TowerF2Camera.remove(self.Kanto.PokeTowerRival)
                    self.Kanto.PokeTowerF2Barriers.remove(self.Kanto.PokeTowerRival.rect)
                except:pass
            if not self.Events.PokeTowerRivalFightDone:
                if self.Player.rect.colliderect(self.Kanto.PokeTowerBattleLine):
                    self.Player_Pause = True
                    self.Kanto.PokeTowerRival.Team = self.Make_RivalTeam(25,["Rage","Growl","Ember","Leer"],["Poison Powder","Growl","Leech Seed","Vine Whip"],["Bite","Tail Whip","Bubble","Water Gun"],
                                                                         [Pokemon("Pidgeotto",25,["Gust","Sand Attack",'Quick Attack','Whirlwind'],self.RivalName,"Pidgeotto"),Pokemon("Exeggcute",23,["Barrage","Hypnosis",'-','-'],self.RivalName,"Exeggcute"),Pokemon("Gyarados",22,["Leer","Dragon Rage",'Bite','Hydro Pump'],self.RivalName,"Gyarados"),Pokemon("Kadabra",20,["Teleport","Confusion",'Disable','-'],self.RivalName,"Kadabra")],
                                                                         [Pokemon("Pidgeotto",25,["Gust","Sand Attack",'Quick Attack','Whirlwind'],self.RivalName,"Pidgeotto"),Pokemon("Gyarados",23,["Leer","Dragon Rage",'Bite','Hydro Pump'],self.RivalName,"Gyarados"),Pokemon("Growlithe",22,["Bite","Roar",'Ember','-'],self.RivalName,"Growlithe"),Pokemon("Kadabra",20,["Teleport","Confusion",'Disable','-'],self.RivalName,"Kadabra")],
                                                                         [Pokemon("Pidgeotto",25,["Gust","Sand Attack",'Quick Attack','Whirlwind'],self.RivalName,"Pidgeotto"),Pokemon("Growlithe",23,["Bite","Roar",'Ember','-'],self.RivalName,"Growlithe"),Pokemon("Exeggcute",22,["Barrage","Hypnosis",'-','-'],self.RivalName,"Exeggcute"),Pokemon("Kadabra",20,["Teleport","Confusion",'Disable','-'],self.RivalName,"Kadabra")],Stage=2)
                    self.Kanto.Pokemon_TowerF2Camera.add(self.Kanto.Rival)
                    if self.Events.PokeTowerRivalFightCutscene: self.Events.Dialouge(f"Hey, {self.PlayerName}! What brings you here? Your POKEMON don't look dead!","I can at least make them faint! Let's go, pal!")
                    if self.Events.PokeTowerRivalFight:
                        self.TrainerBattle(self.Kanto.PokeTowerRival.Team,self.Kanto.PokeTowerRival.Name,[f"{self.RivalName}:What? You stinker! I took it easy on you too!",'',''],[f"{self.RivalName}: Ha",'',''],self.Events.Rivalbattlestance,1625,[])
                        self.Start_Battle_Animation()
                        if self.ExitBattle:
                            self.Events.PokeTowerRivalFight = False
                            if self.State_of_Battle == "Win":self.Events.PokeTowerRivalFightAftermath = True
                            else:
                                self.Events.PokeTowerRivalFightCutscene = True
                                self.Kanto.Pokemon_TowerF2Camera.remove(self.Kanto.Rival)
                            self.ExitBattle = False
                    if self.Events.PokeTowerRivalFightAftermath:
                        self.Events.Dialouge(f"{self.RivalName}:How's your POKEDEX coming, pal? I just caught a CUBONE! I can't","find the grown-up MAROWAK yet! I doubt there are any left!","Well, I better get going! I've got a lot to accomplish, pal!","Smell ya later!")
        elif self.Events.Stage == "PokeTowerF3":
            self.TrainerEncounters(self.OtherTrainers[18])
            self.Transitions(self.Kanto.PokeTowerF3_PokeTowerF2Door,self.Kanto.PokeTowerF3_PokeTowerF2Spawn)
            self.Transitions(self.Kanto.PokeTowerF3_PokeTowerF4Door,self.Kanto.PokeTowerF3_PokeTowerF4Spawn)
            self.Kanto.Pokemon_TowerF3Pickups,self.Kanto.Pokemon_TowerF3Camera = self.Pickup(self.Kanto.Pokemon_TowerF3Pickups,self.Kanto.Pokemon_TowerF3Camera)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.PokemonTowerF3Tiles)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.PokemonTowerF3Tiles)
                self.Player.Moveable = True
                self.WildBattle = False
        elif self.Events.Stage == "PokeTowerF4":
            self.TrainerEncounters(self.OtherTrainers[19])
            self.Transitions(self.Kanto.PokeTowerF4_PokeTowerF3Door,self.Kanto.PokeTowerF4_PokeTowerF3Spawn)
            self.Transitions(self.Kanto.PokeTowerF4_PokeTowerF5Door,self.Kanto.PokeTowerF4_PokeTowerF5Spawn)
            self.Kanto.Pokemon_TowerF4Pickups,self.Kanto.Pokemon_TowerF4Camera = self.Pickup(self.Kanto.Pokemon_TowerF4Pickups,self.Kanto.Pokemon_TowerF4Camera)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.PokemonTowerF4Tiles)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.PokemonTowerF4Tiles)
                self.Player.Moveable = True
                self.WildBattle = False
        elif self.Events.Stage == "PokeTowerF5":
            self.TrainerEncounters(self.OtherTrainers[20])
            for npc in self.Kanto.Pokemon_TowerF5NPCS:self.NPC_Interaction(npc)
            if self.Kanto.PokeTowerSafeZone.contains(self.Player.rect):self.Player.Full_Team_Heal()
            self.Transitions(self.Kanto.PokeTowerF5_PokeTowerF4Door,self.Kanto.PokeTowerF5_PokeTowerF4Spawn)
            self.Transitions(self.Kanto.PokeTowerF5_PokeTowerF6Door,self.Kanto.PokeTowerF5_PokeTowerF6Spawn)
            self.Kanto.Pokemon_TowerF5Pickups,self.Kanto.Pokemon_TowerF5Camera = self.Pickup(self.Kanto.Pokemon_TowerF5Pickups,self.Kanto.Pokemon_TowerF5Camera)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.PokemonTowerF5Tiles)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.PokemonTowerF5Tiles)
                self.Player.Moveable = True
                self.WildBattle = False
        elif self.Events.Stage == "PokeTowerF6":
            self.TrainerEncounters(self.OtherTrainers[21])
            if not self.Events.PokeTowerGhost:
                if self.Player.rect.colliderect(self.Kanto.PokeTowerGhostLine):
                    self.Player_Pause=  True
                    if self.Events.PokeTowerGhostEncounter:
                        self.Events.Dialouge("Be gone... Intruders...")
                if self.Events.PokeTowerGhostReveal:
                    self.Events.Dialouge("SILPH SCOPE unveiled the GHOST's identity!","Wild MAROWAK appeared!")
                    self.WildPoke = Pokemon("Marowak",30,["Bone Club","Growl","Leer","Focus Energy"],"Wild","Marowak")
                if self.Events.PokeTowerGhostFight:
                    self.BattleStart = True
                    self.Opponents_Pokemon = self.WildPoke
                    self.WIldBattle()
                    self.ExitBattle = False
                    self.Player.Menu = False
                    self.BattleStart = False
                    if self.State_of_Battle == "Win":self.Events.PokeTowerGhostFightAftermath = True
                    else:self.Events.PokeTowerGhostEncounter = True
                    self.Events.PokeTowerGhostFight = False
                    self.WildBattle = False
                    self.Player.Moveable = True
                if self.Events.PokeTowerGhostFightAftermath:
                    self.Events.Dialouge("The GHOST was the restless soul of CUBONE's mother!","The mother's soul was calmed. It departed to the afterlife!")
            self.Transitions(self.Kanto.PokeTowerF6_PokeTowerF5Door,self.Kanto.PokeTowerF6_PokeTowerF5Spawn)
            self.Transitions(self.Kanto.PokeTowerF6_PokeTowerF7Door,self.Kanto.PokeTowerF6_PokeTowerF7Spawn)
            self.Kanto.Pokemon_TowerF6Pickups,self.Kanto.Pokemon_TowerF6Camera = self.Pickup(self.Kanto.Pokemon_TowerF6Pickups,self.Kanto.Pokemon_TowerF6Camera)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.PokemonTowerF6Tiles)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.PokemonTowerF6Tiles)
                self.Player.Moveable = True
                self.WildBattle = False
        elif self.Events.Stage == "PokeTowerF7":
            self.Transitions(self.Kanto.PokeTowerF7_PokeTowerF6Door,self.Kanto.PokeTowerF7_PokeTowerF6Spawn)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.PokemonTowerF7Tiles)
            self.TrainerEncounters(self.OtherTrainers[22])
            for trainer in self.OtherTrainers[22]:
                if trainer.Battled: 
                    try:
                        self.Kanto.Pokemon_TowerF7Camera.remove(trainer)
                        self.Kanto.PokeTowerF7Barriers.remove(trainer.rect)
                        trainer.rect = pygame.Rect(0,0,1,1)
                    except:pass
            if self.Player.rect.colliderect(self.Kanto.Mr_Fuji.rect):
                self.Interact("Talk")
                if self.Yes:
                    if not self.Events.Mr_FujiTalk1:
                        self.Player_Pause = True
                        self.Events.Dialouge("Heh? You came to save me? Thank you. But, I came here of my own","free will. I came to calm the soul of CUBONE's mother. I think","MAROWAK's spirit has gone to the afterlife. I must thank you for your kind","concern! Follow me to my home, POKEMON HOUSE at the foot of the tower.")
            if self.Events.Mr_FujiSaved:
                try:
                    self.Kanto.Pokemon_TowerF7Camera.remove(self.Kanto.Mr_Fuji)
                    self.Kanto.PokeTowerF7Barriers.remove(self.Kanto.Mr_Fuji.rect)
                except:pass
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.PokemonTowerF7Tiles)
                self.Player.Moveable = True
                self.WildBattle = False
        elif self.Events.Stage == "R16GuardTower":
            self.Transitions(self.Kanto.R16H1_ODoor3,self.Kanto.R16H1_OSpawn3)
            self.Transitions(self.Kanto.R16H1_ODoor,self.Kanto.R16H1_OSpawn)
            self.Transitions(self.Kanto.R16H1_ODoor2,self.Kanto.R16H1_OSpawn2)
            self.Transitions(self.Kanto.R16H1_ODoor4,self.Kanto.R16H1_OSpawn4)
            self.Transitions(self.Kanto.R16H1_R16H1F2Door,self.Kanto.R16H1_R16H1F2Spawn)
            for npc in self.Kanto.R16GuardHouseNPCS:self.NPC_Interaction(npc)
            if self.Player.rect.colliderect(self.Kanto.BikeLine):
                if not Two_D_ListCheck(Game.Player.Bag,"Bike"):
                    self.Player_Pause = True
                    self.Events.Dialouge("Excuse me! Wait up please! No pedestrians are allowed on CYCLING ROAD")
                else:self.Player.Bike = True
        elif self.Events.Stage == "R16GuardTowerF2":
            self.Transitions(self.Kanto.R16H1F2_R16H1Door,self.Kanto.R16H1F2_R16H1Spawn)
            self.Readables(self.Kanto.R16GuardHouseF2Readables)
            for npc in self.Kanto.R16GuardHouseF2NPCS:self.NPC_Interaction(npc)
        elif self.Events.Stage == "R16H2":
            self.Transitions(self.Kanto.R16H2_ODoor,self.Kanto.R16H2_OSpawn)
            for npc in self.Kanto.R16House2NPCS:self.NPC_Interaction(npc)
        elif self.Events.Stage == "R18GuardTower":
            self.Transitions(self.Kanto.R18GH_ODoor,self.Kanto.R18GH_OSpawn)
            self.Transitions(self.Kanto.R18GH_O2Door,self.Kanto.R18GH_O2Spawn)
            self.Transitions(self.Kanto.R18GH_R18GHF2Door,self.Kanto.R18GH_R18GHF2Spawn)
        elif self.Events.Stage == "R18GuardTowerF2":
            self.Transitions(self.Kanto.R18GHF2_R18GHDoor,self.Kanto.R18GHF2_R18GHSpawn)
            self.Readables(self.Kanto.R18GuardHouseF2Readables)
            for npc in self.Kanto.R18GuardHouseF2NPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "FCH1":
            self.Transitions(self.Kanto.FCH1_ODoor,self.Kanto.FCH1_OSpawn)
            for npc in self.Kanto.FCH1NPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "FCH2":
            self.Transitions(self.Kanto.FCH2_ODoor,self.Kanto.FCH2_OSpawn)
            for npc in self.Kanto.FCH2NPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "FCH3":
            self.Transitions(self.Kanto.FCH3_ODoor,self.Kanto.FCH3_OSpawn)
            self.Transitions(self.Kanto.FCH3_O2Door,self.Kanto.FCH3_O2Spawn)
            for npc in self.Kanto.FCH3NPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "FCWH":
            self.Transitions(self.Kanto.FCWH_ODoor,self.Kanto.FCWH_OSpawn)
            self.Kanto.FCWHPickups,self.Kanto.FCWHCamera = self.Pickup(self.Kanto.FCWHPickups,self.Kanto.FCWHCamera)
            self.Use_Strength()
            for npc in self.Kanto.FCWHNPCS: 
                if npc.Name == "Warden":
                    if self.Player.rect.colliderect(npc.rect):
                        self.Interact("Talk")
                        if self.Yes:
                            self.DialougePause = True
                            if not Two_D_ListCheck(self.Player.Bag,"Gold Teeth"):
                                self.Events.Dialouge(*npc.Text)
                            else:
                                self.Events.Dialouge("Thanks, kid! No one could understand a word that I said.","I couldn't work that way.","Let me give you something for your trouble.")
        elif self.Events.Stage == "Safari Zone Entrance":
            self.Transitions(self.Kanto.SZE_ODoor,self.Kanto.SZE_OSpawn)
            for npc in self.Kanto.SZENPCS: self.NPC_Interaction(npc,self.Kanto.SZEDesk,True)
            if self.Player.rect.colliderect(self.Kanto.SZPayLine):
                self.Player_Pause = True
                self.Interact("Welcome to the SAFARI ZONE! For just P500, you can catch all the","POKEMON you want in the park! Would you like to join the hunt?")
                if self.Yes:
                    if self.Player.Money >= 500:
                        self.Player_Pause = False
                        self.Events.Stage = "Safari Zone MA"
                        self.Player.Money -= 500
                        self.Player.rect.center = self.Kanto.O_SMZSpawn
                    self.Yes = False
                if self.No:
                    self.Player_Pause = False
                    self.Player.rect.center = self.Kanto.O_SZESpawn
                    self.No = False
        elif self.Events.Stage == "Safari Zone MA":
            self.SafariZoneSteps()
            self.Transitions(self.Kanto.SZMA_H1Door,self.Kanto.SZMA_H1Spawn)
            self.Transitions(self.Kanto.SZMZ_A1Door,self.Kanto.SZMZ_A1Spawn)
            self.Transitions(self.Kanto.SZMZ_A2Door,self.Kanto.SZMZ_A2Spawn)
            self.Transitions(self.Kanto.SZMZ_A3Door,self.Kanto.SZMZ_A3Spawn)
            self.Readables(self.Kanto.SMZReadables)
            self.CheckFishingReq(self.Kanto.OverworldFishingPoint)
            self.Kanto.Safari_ZoneMZPickups,self.Kanto.Safari_ZoneMZCamera = self.Pickup(self.Kanto.Safari_ZoneMZPickups,self.Kanto.Safari_ZoneMZCamera)
            if self.Events.FishingCutscene:
                self.Player_Pause = True
                self.Player.image = self.Player.Fishing_pos
                if self.Player.FishCaught:self.Events.Dialouge("You caught something!")
            if self.Events.FishFight:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.Player_Pause = False
                self.BattleStart = False
                self.Player.Moveable = True
                self.Events.FishFight = False
                self.Player.Fishing_Rod = ""
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.SMZGrassBlocks)
            if self.Player.rect.colliderect(self.Kanto.SMZ_ODoor.Rect):
                self.Player_Pause = True
                self.Interact("You sure? If you walk out you have to pay another $500 to come back")
                if self.Yes:
                    self.Player_Pause = False
                    self.Transitions(self.Kanto.SMZ_ODoor,self.Kanto.O_SZESpawn)
                    self.Yes = False
                elif self.No:
                    self.No = False
                    self.Player.rect.center = self.Kanto.O_SZESpawn
                    self.Player_Pause = False
            if self.WildBattle:
                self.BattleStart = True
                self.SafariBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.SMZGrassBlocks)
                self.Player.Moveable = True
                self.WildBattle = False
        elif self.Events.Stage == "Safari Zone MAH1":
            self.Transitions(self.Kanto.H1_SZMADoor,self.Kanto.H1_SZMASpawn)
            for npc in self.Kanto.SZMAH1NPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "Safari Zone A1":
            self.SafariZoneSteps()
            self.Transitions(self.Kanto.SZA1_MZDoor,self.Kanto.SZA1_MZSpawn)
            self.Transitions(self.Kanto.SZA1_H1Door,self.Kanto.H1_SZMASpawn)
            self.Transitions(self.Kanto.SZA1_A2Door,self.Kanto.SZA1_A2Spawn)
            self.Readables(self.Kanto.SA1Readables)
            self.Kanto.Safari_ZoneA1Pickups,self.Kanto.Safari_ZoneA1Camera = self.Pickup(self.Kanto.Safari_ZoneA1Pickups,self.Kanto.Safari_ZoneA1Camera)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.SA1GrassBlocks)
            if self.WildBattle:
                self.BattleStart = True
                self.SafariBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.SA1GrassBlocks)
                self.Player.Moveable = True
                self.WildBattle = False
            self.CheckFishingReq(self.Kanto.SA1FishingPoint)
            if self.Events.FishingCutscene:
                self.Player_Pause = True
                self.Player.image = self.Player.Fishing_pos
                if self.Player.FishCaught:self.Events.Dialouge("You caught something!")
            if self.Events.FishFight:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.Player_Pause = False
                self.BattleStart = False
                self.Player.Moveable = True
                self.Events.FishFight = False
                self.Player.Fishing_Rod = ""
        elif self.Events.Stage == "Safari Zone A1RH":
            if self.Kanto.H1_SZMADoor.Rect.colliderect(self.Player.rect):
                self.Player_Spawn("Safari Zone A2",self.Kanto.H1_SZA1Spawn)
            for npc in self.Kanto.SZA1RHNPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "Safari Zone A2":
            self.SafariZoneSteps()
            self.Transitions(self.Kanto.SZA2_A1Door,self.Kanto.SZA2_A1Spawn)
            self.Transitions(self.Kanto.SZA2_H1Door,self.Kanto.SZMA_H1Spawn)
            self.Transitions(self.Kanto.SZA2_MZDoor,self.Kanto.SZA2_MZSpawn)
            self.Transitions(self.Kanto.SZA2_A3Door,self.Kanto.SZA2_A3Spawn)
            self.Transitions(self.Kanto.SZA2_A3Door2,self.Kanto.SZA2_A3Spawn2)
            self.Readables(self.Kanto.SA2Readables)
            self.Kanto.Safari_ZoneA2Pickups,self.Kanto.Safari_ZoneA2Camera = self.Pickup(self.Kanto.Safari_ZoneA2Pickups,self.Kanto.Safari_ZoneA2Camera)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.SA2GrassBlocks)
            if self.WildBattle:
                self.BattleStart = True
                self.SafariBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.SA2GrassBlocks)
                self.Player.Moveable = True
                self.WildBattle = False
            self.CheckFishingReq(self.Kanto.SA2FishingPoint)
            if self.Events.FishingCutscene:
                self.Player_Pause = True
                self.Player.image = self.Player.Fishing_pos
                if self.Player.FishCaught:self.Events.Dialouge("You caught something!")
            if self.Events.FishFight:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.Player_Pause = False
                self.BattleStart = False
                self.Player.Moveable = True
                self.Events.FishFight = False
                self.Player.Fishing_Rod = ""
        elif self.Events.Stage == "Safari Zone A2RH":
            for npc in self.Kanto.SZA2RHNPCS: self.NPC_Interaction(npc)
            if self.Kanto.H1_SZMADoor.Rect.colliderect(self.Player.rect):
                self.Player_Spawn("Safari Zone A2",self.Kanto.H1_SZA2Spawn)
        elif self.Events.Stage == "Safari Zone A3":
            self.SafariZoneSteps()
            self.Readables(self.Kanto.SA3Readables)
            self.Transitions(self.Kanto.SZA3_RHDoor,self.Kanto.SZMA_H1Spawn)
            self.Transitions(self.Kanto.SZA3_A2Door,self.Kanto.SZA3_A2Spawn)
            self.Transitions(self.Kanto.SZA3_A2Door2,self.Kanto.SZA3_A2Spawn2)
            self.Transitions(self.Kanto.SZA3_SHDoor,self.Kanto.SZA3_SHSpawn)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.SA3GrassBlocks)
            if self.WildBattle:
                self.BattleStart = True
                self.SafariBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.SA3GrassBlocks)
                self.Player.Moveable = True
                self.WildBattle = False
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.SZA3HiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.SZA3HiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.SZA3HiddenItems[i].Picked = True
            self.Kanto.Safari_ZoneA3Pickups,self.Kanto.Safari_ZoneA3Camera = self.Pickup(self.Kanto.Safari_ZoneA3Pickups,self.Kanto.Safari_ZoneA3Camera)
        elif self.Events.Stage == "Safari Zone A3RH":
            if self.Kanto.H1_SZMADoor.Rect.colliderect(self.Player.rect):
                self.Player_Spawn("Safari Zone A3",self.Kanto.RH_SZA3Spawn)
            for npc in self.Kanto.SZA3RHNPCS: self.NPC_Interaction(npc)
        elif self.Events.Stage == "Safari Zone SH":
            self.Transitions(self.Kanto.SH_SZA3Door,self.Kanto.SH_SZA3Spawn)
            self.NPC_Interaction(self.Kanto.SHGuy)
        elif self.Events.Stage == "FCGym":
            self.Transitions(self.Kanto.FCGym_ODoor,self.Kanto.FCGym_OSpawn)
            for totem in self.Kanto.FCGymReadables:totem.Text2 = self.RivalName
            self.Readables(self.Kanto.FCGymReadables)
            self.TrainerEncounters(self.OtherTrainers[23])
            if not self.Player.Get_BadgeInfo("Soul",Name=True):
                self.GymLeaderEncounter(self.Kanto.Koga)
                if self.GymLeaderBattle:
                    self.TrainerBattle(self.Kanto.Koga.Team,"Koga",self.Kanto.Koga.WinnerText,["Try again next time", "",""],self.Kanto.Koga.Trainer_img,self.Kanto.Koga.Money,self.Kanto.Koga.Bag)
                    self.Start_Battle_Animation()
                    if self.ExitBattle :
                        self.GymLeaderBattle = False
                        self.Player_Pause = False
                        self.ExitBattle = False
                        self.Yes = False
                        if self.State_of_Battle == "Win":
                            self.Kanto.Koga.Battled = True
                            for npc in self.OtherTrainers[23]: npc.Battled = True
                            self.NPC_CHange(self.Kanto.FCGymNPCS[0],"It's amazing how ninja can terrify even now!","Dialogue",NewText2="",NewText3="")
                            for read in range(len(self.Kanto.FCGymReadables)): self.Kanto.FCGymReadables[read].Text3 = self.PlayerName
                            self.Player.Badges["Soul"] = True
                            self.GymLeaderGiveTM = True
            if self.Player.Get_BadgeInfo("Soul",Name=True):
                self.GymLeaderEncounter(self.Kanto.Koga)
                self.NPC_CHange(self.Kanto.FCGymNPCS[0],"It's amazing how ninja can terrify even now!","Dialogue",NewText2="",NewText3="")
                for read in range(len(self.Kanto.FCGymReadables)): self.Kanto.FCGymReadables[read].Text3 = self.PlayerName
                self.Kanto.Koga.Battled = True
                self.Kanto.Koga.TextChange()
                for npc in self.OtherTrainers[23]: npc.Battled = True
            if self.GymLeaderGiveTM:
                self.DialougePause = True
                self.Events.Dialouge(*self.Kanto.Koga.ExtraWinner)
            for npc in [self.Kanto.FCGymNPCS[0]]: 
                self.NPC_Interaction(npc)
        elif self.Events.Stage == "SFH1":
            self.Transitions(self.Kanto.SFH1_ODoor,self.Kanto.SFH1_OSpawn)
            self.NPC_Interaction(self.Kanto.MrPsychic)
        elif self.Events.Stage == "Fighting Dojo":
            self.Transitions(self.Kanto.FD_ODoor,self.Kanto.FD_OSpawn)
            self.Readables(self.Kanto.Fighting_DojoReadables)
            self.TrainerEncounters(self.OtherTrainers[24])
            if self.Events.Fighting_DojoFightDone:
                self.Kanto.Fighting_DojoLeader.Battled = True
                for trainer in self.OtherTrainers[24]:trainer.Battled = True
                if self.Events.Fighting_DojoPokePick:
                    for ball in self.Kanto.Fighting_DojoPokemon:
                        if self.Player.rect.colliderect(ball[0].Rect):
                            self.Interact(ball[0].Text)
                            if self.No: self.No = False
                            if self.Yes: 
                                self.Events.Fighting_DojoPokemon = ball[0].Name
                                if ball[0].Name == "Hitmonlee":
                                    self.Player.Add_Pokemon(Pokemon("Hitmonlee",30,["Double Kick","Meditate"],self.PlayerName,"Hitmonlee"))
                                    Game.AddPokeDex("Hitmonleee",True)
                                else:
                                    self.Player.Add_Pokemon(Pokemon("Hitmonchan",30,["Comet Punch","Agility"],self.PlayerName,"Hitmonchan"))
                                    Game.AddPokeDex("Hitmonchan",True)
                                self.Events.Fighting_DojoPokePick = False
                                self.Events.Fighting_DojoPokePickDone = True
                                self.Yes = False
                if self.Events.Fighting_DojoPokePickDone:
                    for ball in self.Kanto.Fighting_DojoPokemon:
                        try:
                            self.Kanto.Fighting_DojoReadables.remove(ball[0])
                            if ball[0].Name == self.Events.Fighting_DojoPokemon:
                                self.Kanto.Fighting_DojoPokemon.remove(ball)
                                self.Kanto.Fighting_DojoCamera.remove(ball[1])
                        except:pass
            if not self.Events.Fighting_DojoFightDone:
                if self.Player.rect.colliderect(self.Kanto.DojoFightLine):
                    self.Player_Pause = True
                    if self.Events.Fighting_DojoFightCutscene: self.Events.Dialouge("Grunt! I am the KARATE MASTER! I am the LEADER here!","You wish to challenge us? Expect no mercy! Fwaaa!")
                    if self.Events.Fighting_DojoFight:
                        self.TrainerBattle(self.Kanto.Fighting_DojoLeader.Team,self.Kanto.Fighting_DojoLeader.Name,["Hwa! Arrgh! Beaten!",'',''],["Ha",'',''],self.Kanto.Fighting_DojoLeader.Trainer_img,925,self.Kanto.Fighting_DojoLeader.Bag)
                        self.Start_Battle_Animation()
                        if self.ExitBattle:
                            self.Events.Fighting_DojoFight = False
                            if self.State_of_Battle == "Win":self.Events.Fighting_DojoFightAftermath = True
                            else:self.Events.Fighting_DojoFightCutscene = True
                            self.ExitBattle = False
                    if self.Events.Fighting_DojoFightAftermath:
                        self.Events.Dialouge("Indeed, I have lost! But, I beseech you, do not take our emblem","as your trophy! In return, I will give you a prized fighting","POKEMON! Choose wichever one you like!")
        elif self.Events.Stage == "Silph Co. F1":
            self.Transitions(self.Kanto.SilCoF1_ODoor,self.Kanto.SilCoF1_OSpawn)
            self.Transitions(self.Kanto.SilCoF1_SilCoEDoor,self.Kanto.SilCo_SilCoESpawn)
            self.Transitions(self.Kanto.SilCoF1_SilCoF2Door,self.Kanto.SilCoF1_SilCoF2Spawn)
        elif self.Events.Stage == "Silph Co. F2":
            self.Transitions(self.Kanto.SilCoF2_SilCoF1Door,self.Kanto.SilCoF2_SilCoF1Spawn)
            self.Transitions(self.Kanto.SilCoF2_SilCoF3Door,self.Kanto.SilCoF2_SilCoF3Spawn)
            self.Transitions(self.Kanto.SilCoF2_SilCoEDoor,self.Kanto.SilCo_SilCoESpawn)
            self.Transitions(self.Kanto.SilCoD1_SilCoD2Door,self.Kanto.SilCoD1_SilCoD2Spawn)
            self.Transitions(self.Kanto.SilCoI1_SilCoI2Door,self.Kanto.SilCoI1_SilCoI2Spawn)
            self.Transitions(self.Kanto.SilCoA1_SilCoA2Door,self.Kanto.SilCoA1_SilCoA2Spawn)
            self.Transitions(self.Kanto.SilCoB1_SilCoB2Door,self.Kanto.SilCoB1_SilCoB2Spawn)
            self.TrainerEncounters(self.OtherTrainers[25])
            if self.Events.SilCoGioDone:
                for npc in self.OtherTrainers[25]:
                    try:
                        self.Kanto.Silph_CoF2Camera.remove(npc)
                        self.Kanto.Silph_CoF2Barriers.remove(npc.rect)
                        self.OtherTrainers[25].remove(npc)
                    except:pass
            self.NPC_Interaction(self.Kanto.SilCoF2Woman)
            if Two_D_ListCheck(self.Player.Bag,"Card Key"):
                try:
                    for i in self.Kanto.Silph_CoF2InvisableBarrier:
                        self.Kanto.Silph_CoF2Readables.remove(i)
                        self.Kanto.Silph_CoF2Barriers.remove(i.Rect)
                except:pass
            self.Readables(self.Kanto.Silph_CoF2Readables)
        elif self.Events.Stage == "Silph Co. F3":
            self.Transitions(self.Kanto.SilCoF3_SilCoF2Door,self.Kanto.SilCoF3_SilCoF2Spawn)
            self.Transitions(self.Kanto.SilCoF3_SilCoF4Door,self.Kanto.SilCoF3_SilCoF4Spawn)
            self.Transitions(self.Kanto.SilCoF3_SilCoEDoor,self.Kanto.SilCo_SilCoESpawn)
            self.Transitions(self.Kanto.SilCoD2_SilCoD1Door,self.Kanto.SilCoD2_SilCoD1Spawn)
            self.Transitions(self.Kanto.SilCoN1_SilCoN2Door,self.Kanto.SilCoN1_SilCoN2Spawn)
            self.Transitions(self.Kanto.SilCoN2_SilCoN1Door,self.Kanto.SilCoN2_SilCoN1Spawn)
            self.Transitions(self.Kanto.SilCoE1_SilCoE2Door,self.Kanto.SilCoE1_SilCoE2Spawn)
            self.Transitions(self.Kanto.SilCoH1_SilCoH2Door,self.Kanto.SilCoH1_SilCoH2Spawn)
            self.Transitions(self.Kanto.SilCoO1_SilCoO2Door,self.Kanto.SilCoO1_SilCoO2Spawn)
            self.Transitions(self.Kanto.SilCoQ1_SilCoQ2Door,self.Kanto.SilCoQ1_SilCoQ2Spawn)
            self.NPC_Interaction(self.Kanto.SilCoF3Man)
            self.TrainerEncounters(self.OtherTrainers[26])
            self.Readables(self.Kanto.Silph_CoF3Readables)
            if self.Events.SilCoGioDone:
                for npc in self.OtherTrainers[26]:
                    try:
                        self.Kanto.Silph_CoF3Camera.remove(npc)
                        self.Kanto.Silph_CoF3Barriers.remove(npc.rect)
                        self.OtherTrainers[26].remove(npc)
                    except:pass    
                self.NPC_CHange(self.Kanto.SilCoF3Man,f"{self.PlayerName}! You and your POKEMON saved us!","Dialogue",NewText2="",NewText3="")            
            if Two_D_ListCheck(self.Player.Bag,"Card Key"):
                try:
                    for i in self.Kanto.Silph_CoF3InvisableBarrier:
                        self.Kanto.Silph_CoF3Readables.remove(i)
                        self.Kanto.Silph_CoF3Barriers.remove(i.Rect)
                except:pass
            self.Kanto.SilCoF3Pickups,self.Kanto.Silph_CoF3Camera = self.Pickup(self.Kanto.SilCoF3Pickups,self.Kanto.Silph_CoF3Camera)
        elif self.Events.Stage == "Silph Co. F4":
            self.Readables(self.Kanto.Silph_CoF4Readables)
            self.NPC_Interaction(self.Kanto.SilCoF4Man)
            self.Transitions(self.Kanto.SilCoF4_SilCoF3Door,self.Kanto.SilCoF4_SilCoF3Spawn)
            self.Transitions(self.Kanto.SilCoF4_SilCoF5Door,self.Kanto.SilCoF4_SilCoF5Spawn)
            self.Transitions(self.Kanto.SilCoF4_SilCoEDoor,self.Kanto.SilCo_SilCoESpawn)
            self.Transitions(self.Kanto.SilCoJ1_SilCoJ2Door,self.Kanto.SilCoJ1_SilCoJ2Spawn)
            self.Transitions(self.Kanto.SilCoM1_SilCoM2Door,self.Kanto.SilCoM1_SilCoM2Spawn)
            self.Transitions(self.Kanto.SilCoK1_SilCoK2Door,self.Kanto.SilCoK1_SilCoK2Spawn)
            self.Transitions(self.Kanto.SilCoL1_SilCoL2Door,self.Kanto.SilCoL1_SilCoL2Spawn)
            self.TrainerEncounters(self.OtherTrainers[27])
            if self.Events.SilCoGioDone:
                self.NPC_CHange(self.Kanto.SilCoF4Man,"Huh? TEAM ROCKET is gone?","Dialogue",NewText2="",NewText3="")
                for npc in self.OtherTrainers[27]:
                    try:
                        self.Kanto.Silph_CoF4Camera.remove(npc)
                        self.Kanto.Silph_CoF4Barriers.remove(npc.rect)
                        self.OtherTrainers[27].remove(npc)
                    except:pass               
            if Two_D_ListCheck(self.Player.Bag,"Card Key"):
                try:
                    for i in self.Kanto.Silph_CoF4InvisableBarrier:
                        self.Kanto.Silph_CoF4Readables.remove(i)
                        self.Kanto.Silph_CoF4Barriers.remove(i.Rect)
                except:pass
            self.Kanto.SilCoF4Pickups,self.Kanto.Silph_CoF4Camera = self.Pickup(self.Kanto.SilCoF4Pickups,self.Kanto.Silph_CoF4Camera)
        elif self.Events.Stage == "Silph Co. F5":
            self.Readables(self.Kanto.Silph_CoF5Readables)
            self.Transitions(self.Kanto.SilCoF5_SilCoF4Door,self.Kanto.SilCoF5_SilCoF4Spawn)
            self.Transitions(self.Kanto.SilCoF5_SilCoF6Door,self.Kanto.SilCoF5_SilCoF6Spawn)
            self.Transitions(self.Kanto.SilCoF5_SilCoEDoor,self.Kanto.SilCo_SilCoESpawn)
            self.Transitions(self.Kanto.SilCoE2_SilCoE1Door,self.Kanto.SilCoE2_SilCoE1Spawn)
            self.Transitions(self.Kanto.SilCoH2_SilCoH1Door,self.Kanto.SilCoH2_SilCoH1Spawn)
            self.Transitions(self.Kanto.SilCoG1_SilCoG2Door,self.Kanto.SilCoG1_SilCoG2Spawn)
            self.Transitions(self.Kanto.SilCoF1_SilCoF2Door2,self.Kanto.SilCoF1_SilCoF2Spawn2)
            if Two_D_ListCheck(self.Player.Bag,"Card Key"):
                try:
                    for i in self.Kanto.Silph_CoF5InvisableBarrier:
                        self.Kanto.Silph_CoF5Readables.remove(i)
                        self.Kanto.Silph_CoF5Barriers.remove(i.Rect)
                except:pass
            self.NPC_Interaction(self.Kanto.SilCoF5Man)
            self.TrainerEncounters(self.OtherTrainers[28])
            if self.Events.SilCoGioDone:
                self.NPC_CHange(self.Kanto.SilCoF5Man,"TEAM ROCKET took off! You're our hero! Thank you!","Dialogue",NewText2="",NewText3="")
                for npc in self.OtherTrainers[28]:
                    try:
                        self.Kanto.Silph_CoF5Camera.remove(npc)
                        self.Kanto.Silph_CoF5Barriers.remove(npc.rect)
                        self.OtherTrainers[28].remove(npc)
                    except:pass    
            self.Kanto.SilCoF5Pickups,self.Kanto.Silph_CoF5Camera = self.Pickup(self.Kanto.SilCoF5Pickups,self.Kanto.Silph_CoF5Camera)
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.SilCoF5HiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.SilCoF5HiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.SilCoF5HiddenItems[i].Picked = True
        elif self.Events.Stage == "Silph Co. F6":
            self.Readables(self.Kanto.Silph_CoF6Readables)
            self.Transitions(self.Kanto.SilCoF6_SilCoEDoor,self.Kanto.SilCo_SilCoESpawn)
            self.Transitions(self.Kanto.SilCoF6_SilCoF5Door,self.Kanto.SilCoF6_SilCoF5Spawn)
            self.Transitions(self.Kanto.SilCoF6_SilCoF7Door,self.Kanto.SilCoF6_SilCoF7Spawn)
            self.Transitions(self.Kanto.SilCoI2_SilCoI1Door,self.Kanto.SilCoI2_SilCoI1Spawn)
            self.Transitions(self.Kanto.SilCoJ2_SilCoJ1Door,self.Kanto.SilCoJ2_SilCoJ1Spawn)
            if Two_D_ListCheck(self.Player.Bag,"Card Key"):
                try:
                    for i in self.Kanto.Silph_CoF6InvisableBarrier:
                        self.Kanto.Silph_CoF6Readables.remove(i)
                        self.Kanto.Silph_CoF6Barriers.remove(i.Rect)
                except:pass
            for npc in self.Kanto.Silph_CoF6NPCS: self.NPC_Interaction(npc)
            self.TrainerEncounters(self.OtherTrainers[29])
            if self.Events.SilCoGioDone:
                for npc in self.Kanto.Silph_CoF6NPCS:self.NPC_CHange(npc,npc.IA1,"Dialogue",NewText2="",NewText3="")
                for npc in self.OtherTrainers[29]:
                    try:
                        self.Kanto.Silph_CoF6Camera.remove(npc)
                        self.Kanto.Silph_CoF6Barriers.remove(npc.rect)
                        self.OtherTrainers[29].remove(npc)
                    except:pass       
            self.Kanto.SilCoF6Pickups,self.Kanto.Silph_CoF6Camera = self.Pickup(self.Kanto.SilCoF6Pickups,self.Kanto.Silph_CoF6Camera)
        elif self.Events.Stage == "Silph Co. F7":
            self.Readables(self.Kanto.Silph_CoF7Readables)
            self.Transitions(self.Kanto.SilCoF7_SilCoF6Door,self.Kanto.SilCoF7_SilCoF6Spawn)
            self.Transitions(self.Kanto.SilCoF7_SilCoF8Door,self.Kanto.SilCoF7_SilCoF8Spawn)
            self.Transitions(self.Kanto.SilCoF7_SilCoEDoor,self.Kanto.SilCo_SilCoESpawn)
            self.Transitions(self.Kanto.SilCoO2_SilCoO1Door,self.Kanto.SilCoO2_SilCoO1Spawn)
            self.Transitions(self.Kanto.SilCoP1_SilCoP2Door,self.Kanto.SilCoP1_SilCoP2Spawn)
            self.Transitions(self.Kanto.SilCoF2_SilCoF1Door2,self.Kanto.SilCoF2_SilCoF1Spawn2)
            for npc in self.Kanto.Silph_CoF7NPCS: self.NPC_Interaction(npc)
            self.TrainerEncounters(self.OtherTrainers[30])
            if self.Events.SilCoGioDone:
                for npc in self.Kanto.Silph_CoF7NPCS:self.NPC_CHange(npc,npc.IA1,"Dialogue",NewText2="",NewText3="")
                for npc in self.OtherTrainers[30]:
                    try:
                        self.Kanto.Silph_CoF7Camera.remove(npc)
                        self.Kanto.Silph_CoF7Barriers.remove(npc.rect)
                        self.OtherTrainers[30].remove(npc)
                    except:pass     
            if Two_D_ListCheck(self.Player.Bag,"Card Key"):
                try:
                    for i in self.Kanto.Silph_CoF7InvisableBarrier:
                        self.Kanto.Silph_CoF7Readables.remove(i)
                        self.Kanto.Silph_CoF7Barriers.remove(i.Rect)
                except:pass
            self.Kanto.SilCoF7Pickups,self.Kanto.Silph_CoF7Camera = self.Pickup(self.Kanto.SilCoF7Pickups,self.Kanto.Silph_CoF7Camera)
            if not self.Events.SilCoLapras:
                if self.Player.rect.colliderect(self.Kanto.LaprasMan.rect):
                    self.Interact("Talk")
                    if self.Yes:
                        self.Player_Pause = True
                        if self.Events.SilCoLaprasTalk:
                            self.Events.Dialouge("Oh! Hi! You're not a ROCKET! You came to save us? Why, thank you!","I want you to have this POKEMON for saving us.")
                        if self.Events.SilCoLaprasAftermath:
                            self.Events.Dialouge("It's LAPRAS. It's very intelligent. We kept it in our lab, but it","will be much better off with you! I think you will be a good trainer","for LAPRAS! It's a good swimmer. It'll give you a lift!")
            if self.Events.SilCoLapras:
                if self.Kanto.LaprasMan not in self.Kanto.Silph_CoF7NPCS:self.Kanto.Silph_CoF7NPCS.append(self.Kanto.LaprasMan)
            if not self.Events.SilCoRivalBattleDone:
                if self.Player.rect.colliderect(self.Kanto.SilphCoRivalBattleLine):
                    self.Player_Pause = True
                    self.Kanto.Rival.Team = self.Make_RivalTeam(40,["Rage","Slash","Ember","Leer"],["Poison Powder","Razor Leaf","Leech Seed","Vine Whip"],["Bite","Withdraw","Bubble","Water Gun"],
                                                                         [Pokemon("Pidgeot",37,["Wing Attack","Sand Attack",'Quick Attack','Whirlwind'],self.RivalName,"Pidgeot"),Pokemon("Exeggcute",38,["Reflect","Poison Powder",'Leech Seed','Stun Spore'],self.RivalName,"Exeggcute"),Pokemon("Gyarados",35,["Leer","Dragon Rage",'Bite','Hydro Pump'],self.RivalName,"Gyarados"),Pokemon("Alakazam",35,["Psybeam","Confusion",'Disable','Recover'],self.RivalName,"Alakazam")],
                                                                         [Pokemon("Pidgeot",37,["Wing Attack","Sand Attack",'Quick Attack','Whirlwind'],self.RivalName,"Pidgeot"),Pokemon("Gyarados",38,["Leer","Dragon Rage",'Bite','Hydro Pump'],self.RivalName,"Gyarados"),Pokemon("Growlithe",35,["Leer","Roar",'Ember','Take Down'],self.RivalName,"Growlithe"),Pokemon("Alakazam",35,["Psybeam","Confusion",'Disable','Recover'],self.RivalName,"Alakazam")],
                                                                         [Pokemon("Pidgeot",37,["Wing Attack","Sand Attack",'Quick Attack','Whirlwind'],self.RivalName,"Pidgeot"),Pokemon("Growlithe",38,["Leer","Roar",'Ember','Take Down'],self.RivalName,"Growlithe"),Pokemon("Exeggcute",35,["Reflect","Poison Powder",'Leech Seed','Stun Spore'],self.RivalName,"Exeggcute"),Pokemon("Alakazam",35,["Psybeam","Confusion",'Disable','Recover'],self.RivalName,"Alakazam")],Stage=3)
                    self.Kanto.Rival.image = pygame.image.load(r"Map\Tileset\NPCS\Rival_Idle_Up.png").convert_alpha()
                    self.Player.rect.center = self.Kanto.SilphCoRivalSpot
                    self.Kanto.Rival.rect.center = (self.Kanto.SilphCoRivalSpot[0],self.Kanto.SilphCoRivalSpot[1] + 60)
                    self.Kanto.Silph_CoF7Camera.add(self.Kanto.Rival)
                    self.Player.image = self.Player.Idle_Down
                    if self.Events.SilCoRivalFightCutscene: self.Events.Dialouge(f"{self.RivalName}:What kept you {self.PlayerName}? Hahaha! I thought you'd turn up if I waited","here! I guess TEAM ROCKET slowed you down! Not that I care!","I saw you in SAFFRON, so I decided to see if you got better!")
                    if self.Events.SilCoRivalFight:
                        self.TrainerBattle(self.Kanto.Rival.Team,self.Kanto.Rival.Name,[f"{self.RivalName}:Oh ho! So, you are ready for BOSS ROCKET!",'',''],[f"{self.RivalName}: Ha",'',''],self.Events.Rivalbattlestance,2600,[["Potion",5]])
                        self.Start_Battle_Animation()
                        if self.ExitBattle:
                            self.Events.SilCoRivalFight = False
                            if self.State_of_Battle == "Win":self.Events.SilCoRivalFightAftermath = True
                            else:
                                self.Events.SilCoRivalFightCutscene = True
                                self.Kanto.Silph_CoF7Camera.remove(self.Kanto.Rival)
                            self.ExitBattle = False
                    if self.Events.SilCoRivalFightAftermath:
                        self.Events.Dialouge(f"{self.RivalName}: Well, {self.PlayerName}! I'm moving on up and ahead! By checking my POKEDEX,","I'm starting to see what's strong and how they evolve! I'm going","to the POKEMON LEAGUE to boot out the ELITE FOUR! I'll become",f"the world's most powerful trainer! {self.PlayerName}, well good luck to you! Don't sweat it! Smell ya!")
        elif self.Events.Stage == "Silph Co. F8":
            self.Readables(self.Kanto.Silph_CoF8Readables)
            self.Transitions(self.Kanto.SilCoF8_SilCoF7Door,self.Kanto.SilCoF8_SilCoF7Spawn)
            self.Transitions(self.Kanto.SilCoF8_SilCoF9Door,self.Kanto.SilCoF8_SilCoF9Spawn)
            self.Transitions(self.Kanto.SilCoF8_SilCoEDoor,self.Kanto.SilCo_SilCoESpawn)
            self.Transitions(self.Kanto.SilCoA2_SilCoA1Door,self.Kanto.SilCoA2_SilCoA1Spawn)
            self.Transitions(self.Kanto.SilCoB2_SilCoB1Door,self.Kanto.SilCoB2_SilCoB1Spawn)
            self.Transitions(self.Kanto.SilCoC1_SilCoC2Door,self.Kanto.SilCoC1_SilCoC2Spawn)
            self.Transitions(self.Kanto.SilCoC2_SilCoC1Door,self.Kanto.SilCoC2_SilCoC1Spawn)
            self.TrainerEncounters(self.OtherTrainers[31])
            if self.Events.SilCoGioDone:
                self.NPC_CHange(self.Kanto.SilCoF8Man,"Thanks for saving us!","Dialogue",NewText2="",NewText3="")
                for npc in self.OtherTrainers[31]:
                    try:
                        self.Kanto.Silph_CoF8Camera.remove(npc)
                        self.Kanto.Silph_CoF8Barriers.remove(npc.rect)
                        self.OtherTrainers[31].remove(npc)
                    except:pass               
            if Two_D_ListCheck(self.Player.Bag,"Card Key"):
                try:
                    for i in self.Kanto.Silph_CoF8InvisableBarrier:
                        self.Kanto.Silph_CoF8Readables.remove(i)
                        self.Kanto.Silph_CoF8Barriers.remove(i.Rect)
                except:pass
            self.NPC_Interaction(self.Kanto.SilCoF8Man)
        elif self.Events.Stage == "Silph Co. F9":
            self.Readables(self.Kanto.Silph_CoF9Readables)
            self.Transitions(self.Kanto.SilCoF9_SilCoF8Door,self.Kanto.SilCoF9_SilCoF8Spawn)
            self.Transitions(self.Kanto.SilCoF9_SilCoF10Door,self.Kanto.SilCoF9_SilCoF10Spawn)
            self.Transitions(self.Kanto.SilCoF9_SilCoEDoor,self.Kanto.SilCo_SilCoESpawn)
            self.Transitions(self.Kanto.SilCoG2_SilCoG1Door,self.Kanto.SilCoG2_SilCoG1Spawn)
            self.Transitions(self.Kanto.SilCoQ2_SilCoQ1Door,self.Kanto.SilCoQ2_SilCoQ1Spawn)
            if Two_D_ListCheck(self.Player.Bag,"Card Key"):
                try:
                    for i in self.Kanto.Silph_CoF9InvisableBarrier:
                        self.Kanto.Silph_CoF9Readables.remove(i)
                        self.Kanto.Silph_CoF9Barriers.remove(i.Rect)
                except:pass
            self.NPC_Interaction(self.Kanto.SilCoF9Woman)
            self.TrainerEncounters(self.OtherTrainers[32])
            if self.Events.SilCoGioDone:
                self.NPC_CHange(self.Kanto.SilCoF9Woman,"Thank you so much!","Dialogue",NewText2="",NewText3="")
                for npc in self.OtherTrainers[32]:
                    try:
                        self.Kanto.Silph_CoF9Camera.remove(npc)
                        self.Kanto.Silph_CoF9Barriers.remove(npc.rect)
                        self.OtherTrainers[32].remove(npc)
                    except:pass    
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.SilCoF9HiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.SilCoF9HiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.SilCoF9HiddenItems[i].Picked = True
        elif self.Events.Stage == "Silph Co. F10":
            self.Readables(self.Kanto.Silph_CoF10Readables)
            self.Transitions(self.Kanto.SilCoF10_SilCoF9Door,self.Kanto.SilCoF10_SilCoF9Spawn)
            self.Transitions(self.Kanto.SilCoF10_SilCoF11Door,self.Kanto.SilCoF10_SilCoF11Spawn)
            self.Transitions(self.Kanto.SilCoF10_SilCoEDoor,self.Kanto.SilCo_SilCoESpawn)
            self.Transitions(self.Kanto.SilCoM2_SilCoM1Door,self.Kanto.SilCoM2_SilCoM1Spawn)
            self.Transitions(self.Kanto.SilCoL2_SilCoL1Door,self.Kanto.SilCoL2_SilCoL1Spawn)
            self.TrainerEncounters(self.OtherTrainers[33])
            self.NPC_Interaction(self.Kanto.SilCoF10Woman)
            if self.Events.SilCoGioDone:
                self.NPC_CHange(self.Kanto.SilCoF10Woman,"Please keep quiet about my crying!","Dialogue",NewText2="",NewText3="")
                for npc in self.OtherTrainers[33]:
                    try:
                        self.Kanto.Silph_CoF10Camera.remove(npc)
                        self.Kanto.Silph_CoF10Barriers.remove(npc.rect)
                        self.OtherTrainers[33].remove(npc)
                    except:pass      
            self.Transitions(self.Kanto.SilCoM2_SilCoM1Door,self.Kanto.SilCoM2_SilCoM1Spawn)
            if Two_D_ListCheck(self.Player.Bag,"Card Key"):
                try:
                    for i in self.Kanto.Silph_CoF10InvisableBarrier:
                        self.Kanto.Silph_CoF10Readables.remove(i)
                        self.Kanto.Silph_CoF10Barriers.remove(i.Rect)
                except:pass
        elif self.Events.Stage == "Silph Co. F11":
            self.Readables(self.Kanto.Silph_CoF11Readables)
            self.Transitions(self.Kanto.SilCoF11_SilCoF10Door,self.Kanto.SilCoF11_SilCoF10Spawn)
            self.Transitions(self.Kanto.SilCoF11_SilCoEDoor,self.Kanto.SilCo_SilCoESpawn)
            self.Transitions(self.Kanto.SilCoP2_SilCoP1Door,self.Kanto.SilCoP2_SilCoP1Spawn)
            self.TrainerEncounters(self.OtherTrainers[34])
            if self.Events.SilCoGioDone:
                for npc in self.OtherTrainers[34]:
                    try:
                        self.Kanto.Silph_CoF11Camera.remove(npc)
                        self.Kanto.Silph_CoF11Barriers.remove(npc.rect)
                        self.OtherTrainers[34].remove(npc)
                    except:pass      
                    try:
                        self.Kanto.Silph_CoF11Camera.remove(self.Kanto.SilCoGiovanni)
                        self.Kanto.Silph_CoF11Barriers.remove(self.Kanto.SilCoGiovanni.rect)
                    except:pass 
            for npc in self.Kanto.Silph_CoF11NPCS:self.NPC_Interaction(npc)
            if Two_D_ListCheck(self.Player.Bag,"Card Key"):
                try:
                    for i in self.Kanto.Silph_CoF11InvisableBarrier:
                        self.Kanto.Silph_CoF11Readables.remove(i)
                        self.Kanto.Silph_CoF11Barriers.remove(i.Rect)
                except:pass
            if not self.Events.SilCoGioDone:
                if self.Player.rect.colliderect(self.Kanto.SilphCoGioLine):
                    self.Player_Pause = True
                    self.Kanto.SilCoGiovanni.rect.center = (self.Player.rect.centerx,self.Player.rect.centery - 40)
                    self.Player.image = self.Player.Idle_Up
                    if self.Events.SilCoGioCutscene: self.Events.Dialouge(f"Ah {self.PlayerName}! So we meet again! The PRESIDENT and I are discussing","a vital business proposition. Keep your nose out of grown-up","matters... Or, experience a world of pain!")
                    if self.Events.SilCoGioFight:
                        self.TrainerBattle(self.Kanto.SilCoGiovanni.Team,self.Kanto.SilCoGiovanni.Name,["Arrgh!! I lost again!?",'',''],["Ha",'',''],self.Kanto.SilCoGiovanni.Trainer_img,self.Kanto.SilCoGiovanni.Money,self.Kanto.SilCoGiovanni.Bag)
                        self.Start_Battle_Animation()
                        if self.ExitBattle:
                            self.Events.SilCoGioFight = False
                            if self.State_of_Battle == "Win":self.Events.SilCoGioFightAftermath = True
                            else:
                                self.Events.SilCoGioCutscene = True
                                self.Kanto.SilCoGiovanni.Back_to_Pos()
                            self.ExitBattle = False
                    if self.Events.SilCoGioFightAftermath:
                        self.Events.Dialouge(f"Giovanni: Blast it all! You ruined our plans for SILPH! But, TEAM ROCKET",f"will never fall! {self.PlayerName}! Never forget that all POKEMON exist for","TEAM ROCKET! I must go, but I shall return!")
        elif self.Events.Stage == "SilCoElevator":
            self.SilCoElevator()
        elif self.Events.Stage == "SFH2":
            self.Transitions(self.Kanto.SFH2_ODoor,self.Kanto.SFH2_OSpawn)
            for npc in self.Kanto.SFH2NPCS:self.NPC_Interaction(npc)
        elif self.Events.Stage == "SFH3F1":
            self.Transitions(self.Kanto.SFH3F1_ODoor,self.Kanto.SFH3F1_OSpawn)
            self.Transitions(self.Kanto.SFH3F1_SFH3F2Door,self.Kanto.SFH3F1_SFH3F2Spawn)
            for npc in self.Kanto.SFH3F1NPCS:self.NPC_Interaction(npc)
        elif self.Events.Stage == "SFH3F2":
            self.Transitions(self.Kanto.SFH3F2_SFH3F1Door,self.Kanto.SFH3F2_SFH3F1Spawn)
            self.Readables(self.Kanto.SFH3F2Readables)
            if not self.Events.CopyCat:
                if self.Player.rect.colliderect(self.Kanto.SFH3CopyCat.rect):
                    self.Interact("Talk")
                    if self.Yes:
                        self.Player_Pause = True
                        if self.Events.CopyCatTalk:
                            if not Two_D_ListCheck(self.Player.Bag,"Poke Doll"):
                                self.Events.Dialouge(f"{self.PlayerName}: Hi! Do you like POKEMON? Uh no, I just asked you. Huh? You're strange!","Copycat: Hmm? Quit mimicking? But, that's my favorite hobby!")
                            else:self.Events.Dialouge("Copycat: Oh wow! A POKE DOLL! For me? Thank you! You can have this, then!")
                        if self.Events.CopyCatAftermath:self.Events.Dialouge("TM31 contains my favorite, MIMIC! Use it on a good POKEMON!")
            if self.Events.CopyCat:
                self.Kanto.SFH3CopyCat.Text1_a = f"{self.PlayerName}: Hi! Thanks for TM31! Pardon? Is it that fun to mimic my every move?"
                self.Kanto.SFH3CopyCat.Text1_b = "Copycat: You bet! It's a scream!"
                self.NPC_Interaction(self.Kanto.SFH3CopyCat)
        elif self.Events.Stage == "SFGym":
            self.Transitions(self.Kanto.SFGym_ODoor,self.Kanto.SFGym_OSpawn)
            self.Transitions(self.Kanto.SFA1_A2Door,self.Kanto.SFA1_A2Spawn)
            self.Transitions(self.Kanto.SFA2_A1Door,self.Kanto.SFA2_A1Spawn)
            self.Transitions(self.Kanto.SFB1_B2Door,self.Kanto.SFB1_B2Spawn)
            self.Transitions(self.Kanto.SFB2_B1Door,self.Kanto.SFB2_B1Spawn)
            self.Transitions(self.Kanto.SFC1_C2Door,self.Kanto.SFC1_C2Spawn)
            self.Transitions(self.Kanto.SFC2_C1Door,self.Kanto.SFC2_C1Spawn)
            self.Transitions(self.Kanto.SFD1_D2Door,self.Kanto.SFD1_D2Spawn)
            self.Transitions(self.Kanto.SFD2_D1Door,self.Kanto.SFD2_D1Spawn)
            self.Transitions(self.Kanto.SFE1_E2Door,self.Kanto.SFE1_E2Spawn)
            self.Transitions(self.Kanto.SFE2_E1Door,self.Kanto.SFE2_E1Spawn)
            self.Transitions(self.Kanto.SFF1_F2Door,self.Kanto.SFF1_F2Spawn)
            self.Transitions(self.Kanto.SFF2_F1Door,self.Kanto.SFF2_F1Spawn)
            self.Transitions(self.Kanto.SFG1_G2Door,self.Kanto.SFG1_G2Spawn)
            self.Transitions(self.Kanto.SFG2_G1Door,self.Kanto.SFG2_G1Spawn)
            self.Transitions(self.Kanto.SFH1_H2Door,self.Kanto.SFH1_H2Spawn)
            self.Transitions(self.Kanto.SFH2_H1Door,self.Kanto.SFH2_H1Spawn)
            self.Transitions(self.Kanto.SFI1_I2Door,self.Kanto.SFI1_I2Spawn)
            self.Transitions(self.Kanto.SFI2_I1Door,self.Kanto.SFI2_I1Spawn)
            self.Transitions(self.Kanto.SFJ1_J2Door,self.Kanto.SFJ1_J2Spawn)
            self.Transitions(self.Kanto.SFJ2_J1Door,self.Kanto.SFJ2_J1Spawn)
            self.Transitions(self.Kanto.SFK1_K2Door,self.Kanto.SFK1_K2Spawn)
            self.Transitions(self.Kanto.SFK2_K1Door,self.Kanto.SFK2_K1Spawn)
            self.Transitions(self.Kanto.SFL1_L2Door,self.Kanto.SFL1_L2Spawn)
            self.Transitions(self.Kanto.SFL2_L1Door,self.Kanto.SFL2_L1Spawn)
            self.Transitions(self.Kanto.SFN1_N2Door,self.Kanto.SFN1_N2Spawn)
            self.Transitions(self.Kanto.SFN2_N1Door,self.Kanto.SFN2_N1Spawn)
            self.Transitions(self.Kanto.SFM1_M2Door,self.Kanto.SFM1_M2Spawn)
            self.Transitions(self.Kanto.SFM2_M1Door,self.Kanto.SFM2_M1Spawn)
            self.Transitions(self.Kanto.SFO1_O2Door,self.Kanto.SFO1_O2Spawn)
            self.Transitions(self.Kanto.SFO2_O1Door,self.Kanto.SFO2_O1Spawn)
            for totem in self.Kanto.SFGymReadables:totem.Text2 = self.RivalName
            self.Readables(self.Kanto.SFGymReadables)
            self.TrainerEncounters(self.OtherTrainers[35])
            if not self.Player.Get_BadgeInfo("Marsh",Name=True):
                self.GymLeaderEncounter(self.Kanto.Sabrina)
                if self.GymLeaderBattle:
                    self.TrainerBattle(self.Kanto.Sabrina.Team,"Sabrina",self.Kanto.Sabrina.WinnerText,["Try again next time", "",""],self.Kanto.Sabrina.Trainer_img,self.Kanto.Sabrina.Money,self.Kanto.Sabrina.Bag)
                    self.Start_Battle_Animation()
                    if self.ExitBattle :
                        self.GymLeaderBattle = False
                        self.Player_Pause = False
                        self.ExitBattle = False
                        self.Yes = False
                        if self.State_of_Battle == "Win":
                            self.Kanto.Sabrina.Battled = True
                            for npc in self.OtherTrainers[35]: npc.Battled = True
                            self.NPC_CHange(self.Kanto.SFGymNPCS[0],"Psychic power, huh? If I had that, I'd make a bundle at the slots!","Dialogue",NewText2="",NewText3="")
                            for read in range(len(self.Kanto.SFGymReadables)): self.Kanto.SFGymReadables[read].Text3 = self.PlayerName
                            self.Player.Badges["Marsh"] = True
                            self.GymLeaderGiveTM = True
            if self.Player.Get_BadgeInfo("Marsh",Name=True):
                self.GymLeaderEncounter(self.Kanto.Sabrina)
                self.NPC_CHange(self.Kanto.SFGymNPCS[0],"Psychic power, huh? If I had that, I'd make a bundle at the slots!","Dialogue",NewText2="",NewText3="")
                for read in range(len(self.Kanto.SFGymReadables)): self.Kanto.SFGymReadables[read].Text3 = self.PlayerName
                self.Kanto.Sabrina.Battled = True
                self.Kanto.Sabrina.TextChange()
                for npc in self.OtherTrainers[35]: npc.Battled = True
            if self.GymLeaderGiveTM:
                self.DialougePause = True
                self.Events.Dialouge(*self.Kanto.Sabrina.ExtraWinner)
            for npc in [self.Kanto.SFGymNPCS[0]]: 
                self.NPC_Interaction(npc)
        elif self.Events.Stage == "R12GH":
            self.NPC_Interaction(self.Kanto.R12GHGuard,self.Kanto.R12GHDesk,True)
            self.Transitions(self.Kanto.R12GuardHouse_ODoor,self.Kanto.R12GuardHouse_OSpawn)
            self.Transitions(self.Kanto.R12GuardHouse_O2Door,self.Kanto.R12GuardHouse_O2Spawn)
            self.Transitions(self.Kanto.R12GuardHouse_F2Door,self.Kanto.R12GuardHouse_F2Spawn)
        elif self.Events.Stage == "R12GHF2":
            self.NPC_Interaction(self.Kanto.R12GHF2Girl)
            self.Transitions(self.Kanto.F2_R12GuardHouseDoor,self.Kanto.F2_R12GuardHouseSpawn)
        elif self.Events.Stage == "R12H":
            self.NPC_Interaction(self.Kanto.R12HFisher)
            try:self.Kanto.R12HFisher.IA1 = self.Kanto.R12HFisher.IA1.replace("RED",self.PlayerName)
            except:pass
            self.Transitions(self.Kanto.R12H_ODoor,self.Kanto.R12H_OSpawn)
        elif self.Events.Stage == "R15GH":
            self.NPC_Interaction(self.Kanto.R15GHGuard,self.Kanto.R15GHDesk,True)
            self.Transitions(self.Kanto.GH_R15Door,self.Kanto.GH_R15Spawn)
            self.Transitions(self.Kanto.GH_FCDoor,self.Kanto.GH_FCSpawn)
            self.Transitions(self.Kanto.R15GH_F2Door,self.Kanto.R15GH_F2Spawn)
        elif self.Events.Stage == "R15GHF2":
            self.Transitions(self.Kanto.F2_R15GHDoor,self.Kanto.F2_R15GHSpawn)
            self.Readables(self.Kanto.R15GuardHouseF2Readables)
            if not self.Events.ExpALLGet:
                if self.Player.rect.colliderect(self.Kanto.R15Aide.rect):
                    self.Interact("Hi! Remember me? I'm PROF.OAK's AIDE! If you caught 50 kinds",f"of POKEMON, I'm supposed to give you an EXP All! So, {self.PlayerName}! Have you","caught at least 50 kinds of POKEMON?")
                    if self.Yes:
                        self.Player_Pause = True
                        if len(self.Pokemon_Caught) >= 50:self.Events.Dialouge(f"Great! You have caught {len(self.Pokemon_Caught)} kinds of POKEMON! Congratulations","Here's the EXP All")
                        else:self.Events.Dialouge(f"You only have {len(self.Pokemon_Caught)} kinds")
        elif self.Events.Stage == "Pokemon Lab Hall":
            self.Transitions(self.Kanto.PokeLabHall_ODoor,self.Kanto.PokeLabHall_OSpawn)
            self.Transitions(self.Kanto.PokeLabHall_PokeLabMRDoor,self.Kanto.PokeLabHall_PokeLabMRSpawn)
            self.Transitions(self.Kanto.PokeLabHall_PokeLabRDDoor,self.Kanto.PokeLabHall_PokeLabRDSpawn)
            self.Transitions(self.Kanto.PokeLabHall_PokeLabTRDoor,self.Kanto.PokeLabHall_PokeLabTRSpawn)
            self.NPC_Interaction(self.Kanto.MHMan)
            self.Readables(self.Kanto.Pokemon_LabHallReadables)
        elif self.Events.Stage == "Pokemon Lab Meeting Room":
            self.Transitions(self.Kanto.PokeLabMR_PokeLabHallDoor,self.Kanto.PokeLabMR_PokeLabHallSpawn)
            for npc in [self.Kanto.MROld_Man,self.Kanto.MRWoman,self.Kanto.MRMan]:self.NPC_Interaction(npc)
        elif self.Events.Stage == "Pokemon Lab R-and-D Room":
            self.Transitions(self.Kanto.PokeLabRD_PokeLabHallDoor,self.Kanto.PokeLabRD_PokeLabHallSpawn)
            for npc in [self.Kanto.RDGiv,self.Kanto.RDScientist]:self.NPC_Interaction(npc)
        elif self.Events.Stage == "Pokemon Lab Testing Room":
            self.Transitions(self.Kanto.PokeLabTR_PokeLabHallDoor,self.Kanto.PokeLabTR_PokeLabHallSpawn)
            self.NPC_Interaction(self.Kanto.TRMan)
            if self.Player.rect.colliderect(self.Kanto.TRScientist.rect):
                self.Interact("Hiya! I am important doctor! I study here rare POKEMON fossils!","You! Have you a fossil for me?")
                if self.Yes:
                    self.Player_Pause = True
                    if self.Events.FossilDescion:
                        if Two_D_ListCheck(self.Player.Bag,"Dome Fossil"):
                            self.Events.Dialouge(f"Oh! That is Dome Fossil! It is fossil of Omanyte","a POKEMON that is already extinct!","My Resurrection Machine will make that POKEMON live again!")
                        elif Two_D_ListCheck(self.Player.Bag,"Helix Fossil"):
                            self.Events.Dialouge(f"Oh! That is Helix Fossil! It is fossil of Kabuto","a POKEMON that is already extinct!","My Resurrection Machine will make that POKEMON live again!")
                        elif Two_D_ListCheck(self.Player.Bag,"Old Amber"):
                            self.Events.Dialouge(f"Oh! That is Old Amber! It is fossil of Aerodactyl","a POKEMON that is already extinct!","My Resurrection Machine will make that POKEMON live again!")
                        else:
                            self.Events.Dialouge("No! Is too bad!")
                    elif self.Events.FossilRevival:
                        if Two_D_ListCheck(self.Player.Bag,"Dome Fossil"):
                            self.Events.Dialouge(f"Your fossil is back to life! It was Omanyte")
                        elif Two_D_ListCheck(self.Player.Bag,"Helix Fossil"):
                            self.Events.Dialouge(f"Your fossil is back to life! It was Kabuto")
                        elif Two_D_ListCheck(self.Player.Bag,"Old Amber"):
                            self.Events.Dialouge("Your fossil is back to life! It was Aerodactyl")
        elif self.Events.Stage == "Pokemon MansionF1":
            self.Transitions(self.Kanto.PokeMansionF1_ODoor,self.Kanto.PokeMansionF1_OSpawn)
            self.Transitions(self.Kanto.PokeMansionExitDoor,self.Kanto.PokeMansionF1_OSpawn)
            self.Transitions(self.Kanto.PokeMansionA1_A2Door,self.Kanto.PokeMansionA1_A2Spawn)
            self.Transitions(self.Kanto.PokeMansionG1_G2Door,self.Kanto.PokeMansionG1_G2Spawn)
            self.TrainerEncounters(self.OtherTrainers[36])
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.Pokemon_MansionF1Blocks)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.Pokemon_MansionF1Blocks)
                self.Player.Moveable = True
                self.WildBattle = False
            if not self.Events.PokeMansionSwitchON:
                try:
                    for pair in self.Kanto.Pokemon_MansionF1WallsB:
                        self.Kanto.PokeMansionF1Barriers.remove(pair[0])
                        self.Kanto.Pokemon_MansionF1Camera.remove(pair[1])
                    for pair in self.Kanto.Pokemon_MansionF1WallsA:
                        self.Kanto.PokeMansionF1Barriers.append(pair[0])
                        self.Kanto.Pokemon_MansionF1Camera.add(pair[1])
                except:pass
            if self.Events.PokeMansionSwitchON:
                try:
                    for pair in self.Kanto.Pokemon_MansionF1WallsA:
                        self.Kanto.PokeMansionF1Barriers.remove(pair[0])
                        self.Kanto.Pokemon_MansionF1Camera.remove(pair[1])
                    for pair in self.Kanto.Pokemon_MansionF1WallsB:
                        self.Kanto.PokeMansionF1Barriers.append(pair[0])
                        self.Kanto.Pokemon_MansionF1Camera.add(pair[1])
                except:pass
            if self.Player.rect.colliderect(self.Kanto.PokeMansionF1Switch):
                self.Interact("There's a secret switch! Wanna press it?")
                if self.Yes:
                    self.Events.PokeMansionSwitchON = not(self.Events.PokeMansionSwitchON)
                    self.Yes = False
                if self.No:self.No = False
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.PokeMansionF1HiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.PokeMansionF1HiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.PokeMansionF1HiddenItems[i].Picked = True
            self.Kanto.Pokemon_MansionF1Pickups,self.Kanto.Pokemon_MansionF1Camera = self.Pickup(self.Kanto.Pokemon_MansionF1Pickups,self.Kanto.Pokemon_MansionF1Camera)
        elif self.Events.Stage == "Pokemon MansionF2":
            self.Transitions(self.Kanto.PokeMansionA2_A1Door,self.Kanto.PokeMansionA2_A1Spawn)
            self.Transitions(self.Kanto.PokeMansionB1_B2Door,self.Kanto.PokeMansionB1_B2Spawn)
            self.Transitions(self.Kanto.PokeMansionC1_C2Door,self.Kanto.PokeMansionC1_C2Spawn)
            self.Transitions(self.Kanto.PokeMansionF1_F2Door,self.Kanto.PokeMansionF1_F2Spawn)
            self.Readables(self.Kanto.PokeMansionF2Readables)
            self.TrainerEncounters(self.OtherTrainers[37])
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.Pokemon_MansionF2Blocks)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.Pokemon_MansionF2Blocks)
                self.Player.Moveable = True
                self.WildBattle = False
            if not self.Events.PokeMansionSwitchON:
                try:
                    for pair in self.Kanto.Pokemon_MansionF2WallsB:
                        self.Kanto.PokeMansionF2Barriers.remove(pair[0])
                        self.Kanto.Pokemon_MansionF2Camera.remove(pair[1])
                    for pair in self.Kanto.Pokemon_MansionF2WallsA:
                        self.Kanto.PokeMansionF2Barriers.append(pair[0])
                        self.Kanto.Pokemon_MansionF2Camera.add(pair[1])
                except:pass
            if self.Events.PokeMansionSwitchON:
                try:
                    for pair in self.Kanto.Pokemon_MansionF2WallsA:
                        self.Kanto.PokeMansionF2Barriers.remove(pair[0])
                        self.Kanto.Pokemon_MansionF2Camera.remove(pair[1])
                    for pair in self.Kanto.Pokemon_MansionF2WallsB:
                        self.Kanto.PokeMansionF2Barriers.append(pair[0])
                        self.Kanto.Pokemon_MansionF2Camera.add(pair[1])
                except:pass
            if self.Player.rect.colliderect(self.Kanto.PokeMansionF2Switch):
                self.Interact("There's a secret switch! Wanna press it?")
                if self.Yes:
                    self.Events.PokeMansionSwitchON = not(self.Events.PokeMansionSwitchON)
                    self.Yes = False
                if self.No:self.No = False
            self.Kanto.Pokemon_MansionF2Pickups,self.Kanto.Pokemon_MansionF2Camera = self.Pickup(self.Kanto.Pokemon_MansionF2Pickups,self.Kanto.Pokemon_MansionF2Camera)
        elif self.Events.Stage == "Pokemon MansionF3":
            self.Transitions(self.Kanto.PokeMansionB2_B1Door,self.Kanto.PokeMansionB2_B1Spawn)
            self.Transitions(self.Kanto.PokeMansionC2_C1Door,self.Kanto.PokeMansionC2_C1Spawn)
            self.Transitions(self.Kanto.PokeMansionD_DDoor,self.Kanto.PokeMansionD_DSpawn)
            self.Transitions(self.Kanto.PokeMansionE_EDoor,self.Kanto.PokeMansionE_ESpawn)
            self.Transitions(self.Kanto.PokeMansionF2_F1Door,self.Kanto.PokeMansionF2_F1Spawn)
            self.TrainerEncounters(self.OtherTrainers[38])
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.Pokemon_MansionF3Blocks)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.Pokemon_MansionF3Blocks)
                self.Player.Moveable = True
                self.WildBattle = False
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.PokeMansionF3HiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.PokeMansionF3HiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.PokeMansionF3HiddenItems[i].Picked = True
            self.Readables(self.Kanto.PokeMansionF3Readables)
            if not self.Events.PokeMansionSwitchON:
                try:
                    for pair in self.Kanto.Pokemon_MansionF3WallsB:
                        self.Kanto.PokeMansionF3Barriers.remove(pair[0])
                        self.Kanto.Pokemon_MansionF3Camera.remove(pair[1])
                    for pair in self.Kanto.Pokemon_MansionF3WallsA:
                        self.Kanto.PokeMansionF3Barriers.append(pair[0])
                        self.Kanto.Pokemon_MansionF3Camera.add(pair[1])
                except:pass
            if self.Events.PokeMansionSwitchON:
                try:
                    for pair in self.Kanto.Pokemon_MansionF3WallsA:
                        self.Kanto.PokeMansionF3Barriers.remove(pair[0])
                        self.Kanto.Pokemon_MansionF3Camera.remove(pair[1])
                    for pair in self.Kanto.Pokemon_MansionF3WallsB:
                        self.Kanto.PokeMansionF3Barriers.append(pair[0])
                        self.Kanto.Pokemon_MansionF3Camera.add(pair[1])
                except:pass
            if self.Player.rect.colliderect(self.Kanto.PokeMansionF3Switch):
                self.Interact("There's a secret switch! Wanna press it?")
                if self.Yes:
                    self.Events.PokeMansionSwitchON = not(self.Events.PokeMansionSwitchON)
                    self.Yes = False
                if self.No:self.No = False
            self.Kanto.Pokemon_MansionF3Pickups,self.Kanto.Pokemon_MansionF3Camera = self.Pickup(self.Kanto.Pokemon_MansionF3Pickups,self.Kanto.Pokemon_MansionF3Camera)
        elif self.Events.Stage == "Pokemon MansionFB1":
            self.Transitions(self.Kanto.PokeMansionG2_G1Door,self.Kanto.PokeMansionG2_G1Spawn)
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.PokeMansionFB1HiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.PokeMansionFB1HiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.PokeMansionFB1HiddenItems[i].Picked = True
            self.Readables(self.Kanto.PokeMansionFB1Readables)
            self.TrainerEncounters(self.OtherTrainers[39])
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.Pokemon_MansionFB1Blocks)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.Pokemon_MansionFB1Blocks)
                self.Player.Moveable = True
                self.WildBattle = False
            if not self.Events.PokeMansionSwitchON:
                try:
                    for pair in self.Kanto.Pokemon_MansionFB1WallsB:
                        self.Kanto.PokeMansionFB1Barriers.remove(pair[0])
                        self.Kanto.Pokemon_MansionFB1Camera.remove(pair[1])
                    for pair in self.Kanto.Pokemon_MansionFB1WallsA:
                        self.Kanto.PokeMansionFB1Barriers.append(pair[0])
                        self.Kanto.Pokemon_MansionFB1Camera.add(pair[1])
                except:pass
            if self.Events.PokeMansionSwitchON:
                try:
                    for pair in self.Kanto.Pokemon_MansionFB1WallsA:
                        self.Kanto.PokeMansionFB1Barriers.remove(pair[0])
                        self.Kanto.Pokemon_MansionFB1Camera.remove(pair[1])
                    for pair in self.Kanto.Pokemon_MansionFB1WallsB:
                        self.Kanto.PokeMansionFB1Barriers.append(pair[0])
                        self.Kanto.Pokemon_MansionFB1Camera.add(pair[1])
                except:pass
            if self.Player.rect.colliderect(self.Kanto.PokeMansionFB1ASwitch) or self.Player.rect.colliderect(self.Kanto.PokeMansionFB1BSwitch):
                self.Interact("There's a secret switch! Wanna press it?")
                if self.Yes:
                    self.Events.PokeMansionSwitchON = not(self.Events.PokeMansionSwitchON)
                    self.Yes = False
                if self.No:self.No = False
            self.Kanto.Pokemon_MansionFB1Pickups,self.Kanto.Pokemon_MansionFB1Camera = self.Pickup(self.Kanto.Pokemon_MansionFB1Pickups,self.Kanto.Pokemon_MansionFB1Camera)
        elif self.Events.Stage == "CGym":
            self.Transitions(self.Kanto.CGym_ODoor,self.Kanto.CGym_OSpawn)
            for totem in self.Kanto.CGymReadables:totem.Text2 = self.RivalName
            self.Readables(self.Kanto.CGymReadables)
            self.TrainerEncounters(self.OtherTrainers[40])
            if self.Player.rect.colliderect(self.Kanto.CGymQuestion1.Rect) and not self.Kanto.CGymQuestion1.Answered:
                self.Interact("POKEMON Quiz! Get it right and the door opens to the next room! Get it wrong"," and face a trainer.Save your Energy for the Big Boss",f"{self.Kanto.CGymQuestion1.Q}")
                if self.Yes:
                    self.Player_Pause = True
                    self.Events.Dialouge("You're absolutely correct! Go on through!")
                    self.Kanto.CGymQuestion1.Correct = True
                if self.No:
                    self.Player_Pause = True
                    self.Events.Dialouge("Sorry! Bad call!")
            if self.Player.rect.colliderect(self.Kanto.CGymQuestion2.Rect) and not self.Kanto.CGymQuestion2.Answered:
                self.Interact("POKEMON Quiz! Get it right and the door opens to the next room! Get it wrong","and face a trainer.Save your Energy for the Big Boss",f"{self.Kanto.CGymQuestion2.Q}")
                if self.No:
                    self.Player_Pause = True
                    self.Events.Dialouge("You're absolutely correct! Go on through!")
                    self.Kanto.CGymQuestion2.Correct = True
                if self.Yes:
                    self.Player_Pause = True
                    self.Events.Dialouge("Sorry! Bad call!")
            if self.Player.rect.colliderect(self.Kanto.CGymQuestion3.Rect) and not self.Kanto.CGymQuestion3.Answered:
                self.Interact("POKEMON Quiz! Get it right and the door opens to the next room! Get it wrong","and face a trainer.Save your Energy for the Big Boss",f"{self.Kanto.CGymQuestion3.Q}")
                if self.No:
                    self.Player_Pause = True
                    self.Events.Dialouge("You're absolutely correct! Go on through!")
                    self.Kanto.CGymQuestion3.Correct = True
                if self.Yes:
                    self.Player_Pause = True
                    self.Events.Dialouge("Sorry! Bad call!")
            if self.Player.rect.colliderect(self.Kanto.CGymQuestion4.Rect) and not self.Kanto.CGymQuestion4.Answered:
                self.Interact("POKEMON Quiz! Get it right and the door opens to the next room! Get it wrong","and face a trainer.Save your Energy for the Big Boss",f"{self.Kanto.CGymQuestion4.Q}")
                if self.No:
                    self.Player_Pause = True
                    self.Events.Dialouge("You're absolutely correct! Go on through!")
                    self.Kanto.CGymQuestion4.Correct = True
                if self.Yes:
                    self.Player_Pause = True
                    self.Events.Dialouge("Sorry! Bad call!")
            if self.Player.rect.colliderect(self.Kanto.CGymQuestion5.Rect) and not self.Kanto.CGymQuestion5.Answered:
                self.Interact("POKEMON Quiz! Get it right and the door opens to the next room! Get it wrong","and face a trainer.Save your Energy for the Big Boss",f"{self.Kanto.CGymQuestion5.Q}")
                if self.Yes:
                    self.Player_Pause = True
                    self.Events.Dialouge("You're absolutely correct! Go on through!")
                    self.Kanto.CGymQuestion5.Correct = True
                if self.No:
                    self.Player_Pause = True
                    self.Events.Dialouge("Sorry! Bad call!")
            if self.Player.rect.colliderect(self.Kanto.CGymQuestion6.Rect) and not self.Kanto.CGymQuestion6.Answered:
                self.Interact("POKEMON Quiz! Get it right and the door opens to the next room! Get it wrong","and face a trainer.Save your Energy for the Big Boss",f"{self.Kanto.CGymQuestion6.Q}")
                if self.No:
                    self.Player_Pause = True
                    self.Events.Dialouge("You're absolutely correct! Go on through!")
                    self.Kanto.CGymQuestion6.Correct = True
                if self.Yes:
                    self.Player_Pause = True
                    self.Events.Dialouge("Sorry! Bad call!")
            for trainer in self.OtherTrainers[40]:
                if trainer.CompName == "C1Burglar":
                    if trainer.Battled or self.Kanto.CGymQuestion1.Correct:
                        try:
                            self.Kanto.CGymBarriers.remove(self.Kanto.CGymWall1[0][0])
                            self.Kanto.CGymCamera.remove(self.Kanto.CGymWall1[0][1])
                            self.Kanto.CGymBarriers.remove(self.Kanto.CGymWall1[1][0])
                            self.Kanto.CGymCamera.remove(self.Kanto.CGymWall1[1][1])
                        except:pass
                elif trainer.CompName == "C2Super Nerd":
                    if trainer.Battled or self.Kanto.CGymQuestion2.Correct:
                        try:
                            self.Kanto.CGymBarriers.remove(self.Kanto.CGymWall2[0][0])
                            self.Kanto.CGymCamera.remove(self.Kanto.CGymWall2[0][1])
                            self.Kanto.CGymBarriers.remove(self.Kanto.CGymWall2[1][0])
                            self.Kanto.CGymCamera.remove(self.Kanto.CGymWall2[1][1])
                        except:pass
                elif trainer.CompName == "C2Burglar":
                    if trainer.Battled or self.Kanto.CGymQuestion3.Correct:
                        try:
                            self.Kanto.CGymBarriers.remove(self.Kanto.CGymWall3[0][0])
                            self.Kanto.CGymCamera.remove(self.Kanto.CGymWall3[0][1])
                            self.Kanto.CGymBarriers.remove(self.Kanto.CGymWall3[1][0])
                            self.Kanto.CGymCamera.remove(self.Kanto.CGymWall3[1][1])
                        except:pass
                elif trainer.CompName == "C3Super Nerd":
                    if trainer.Battled or self.Kanto.CGymQuestion4.Correct:
                        try:
                            self.Kanto.CGymBarriers.remove(self.Kanto.CGymWall4[0][0])
                            self.Kanto.CGymCamera.remove(self.Kanto.CGymWall4[0][1])
                            self.Kanto.CGymBarriers.remove(self.Kanto.CGymWall4[1][0])
                            self.Kanto.CGymCamera.remove(self.Kanto.CGymWall4[1][1])
                        except:pass
                elif trainer.CompName == "C3Burglar":
                    if trainer.Battled or self.Kanto.CGymQuestion5.Correct:
                        try:
                            self.Kanto.CGymBarriers.remove(self.Kanto.CGymWall5[0][0])
                            self.Kanto.CGymCamera.remove(self.Kanto.CGymWall5[0][1])
                            self.Kanto.CGymBarriers.remove(self.Kanto.CGymWall5[1][0])
                            self.Kanto.CGymCamera.remove(self.Kanto.CGymWall5[1][1])
                        except:pass
                elif trainer.CompName == "C4Super Nerd":
                    if trainer.Battled or self.Kanto.CGymQuestion6.Correct:
                        try:
                            self.Kanto.CGymBarriers.remove(self.Kanto.CGymWall6[0][0])
                            self.Kanto.CGymCamera.remove(self.Kanto.CGymWall6[0][1])
                            self.Kanto.CGymBarriers.remove(self.Kanto.CGymWall6[1][0])
                            self.Kanto.CGymCamera.remove(self.Kanto.CGymWall6[1][1])
                        except:pass
            if not self.Player.Get_BadgeInfo("Volcano",Name=True):
                self.GymLeaderEncounter(self.Kanto.Blaine)
                if self.GymLeaderBattle:
                    self.TrainerBattle(self.Kanto.Blaine.Team,"Blaine",self.Kanto.Blaine.WinnerText,["Try again next time", "",""],self.Kanto.Blaine.Trainer_img,self.Kanto.Blaine.Money,self.Kanto.Blaine.Bag)
                    self.Start_Battle_Animation()
                    if self.ExitBattle :
                        self.GymLeaderBattle = False
                        self.Player_Pause = False
                        self.ExitBattle = False
                        self.Yes = False
                        if self.State_of_Battle == "Win":
                            self.Kanto.Blaine.Battled = True
                            for npc in self.OtherTrainers[40]: npc.Battled = True
                            self.NPC_CHange(self.Kanto.CGymAnnouncer,f"{self.PlayerName}! You beat that fire brand!","Dialogue",NewText2="",NewText3="")
                            for read in range(len(self.Kanto.CGymReadables)): self.Kanto.CGymReadables[read].Text3 = self.PlayerName
                            self.Player.Badges["Volcano"] = True
                            self.GymLeaderGiveTM = True
            if self.Player.Get_BadgeInfo("Volcano",Name=True):
                self.GymLeaderEncounter(self.Kanto.Blaine)
                self.NPC_CHange(self.Kanto.CGymAnnouncer,f"{self.PlayerName}! You beat that fire brand!","Dialogue",NewText2="",NewText3="")
                for read in range(len(self.Kanto.CGymReadables)): self.Kanto.CGymReadables[read].Text3 = self.PlayerName
                self.Kanto.Blaine.Battled = True
                self.Kanto.Blaine.TextChange()
                for npc in self.OtherTrainers[40]: npc.Battled = True
            if self.GymLeaderGiveTM:
                self.DialougePause = True
                self.Events.Dialouge(*self.Kanto.Blaine.ExtraWinner)
            self.NPC_Interaction(self.Kanto.CGymAnnouncer)
        elif self.Events.Stage == "VGym":
            self.Transitions(self.Kanto.VGym_ODoor,self.Kanto.VGym_OSpawn)
            self.Transitions(self.Kanto.VGymL1Mover,self.Kanto.VGymL1MoverSpawn)
            self.Transitions(self.Kanto.VGymL2Mover,self.Kanto.VGymL2MoverSpawn)
            self.Transitions(self.Kanto.VGymL3Mover,self.Kanto.VGymL3MoverSpawn)
            self.Transitions(self.Kanto.VGymU1Mover,self.Kanto.VGymU1MoverSpawn)
            self.Transitions(self.Kanto.VGymU2Mover,self.Kanto.VGymU2MoverSpawn)
            self.Transitions(self.Kanto.VGymU3Mover,self.Kanto.VGymU3MoverSpawn)
            self.Transitions(self.Kanto.VGymR1Mover,self.Kanto.VGymR1MoverSpawn)
            self.Transitions(self.Kanto.VGymR2Mover,self.Kanto.VGymR2MoverSpawn)
            self.Transitions(self.Kanto.VGymR3Mover,self.Kanto.VGymR3MoverSpawn)
            self.Transitions(self.Kanto.VGymD1Mover,self.Kanto.VGymD1MoverSpawn)
            self.Transitions(self.Kanto.VGymD2Mover,self.Kanto.VGymD2MoverSpawn)
            self.Transitions(self.Kanto.VGymD3Mover,self.Kanto.VGymD3MoverSpawn)
            for totem in self.Kanto.VGymReadables:totem.Text3 = totem.Text3.replace("Trainer",self.RivalName)
            self.Readables(self.Kanto.VGymReadables)
            self.TrainerEncounters(self.OtherTrainers[41])
            if not self.Player.Get_BadgeInfo("Earth",Name=True):
                self.GymLeaderEncounter(self.Kanto.GymGiovanni)
                if self.GymLeaderBattle:
                    self.TrainerBattle(self.Kanto.GymGiovanni.Team,"Giovanni",self.Kanto.GymGiovanni.WinnerText,["Try again next time", "",""],self.Kanto.GymGiovanni.Trainer_img,self.Kanto.GymGiovanni.Money,self.Kanto.GymGiovanni.Bag)
                    self.Start_Battle_Animation()
                    if self.ExitBattle :
                        self.GymLeaderBattle = False
                        self.Player_Pause = False
                        self.ExitBattle = False
                        self.Yes = False
                        if self.State_of_Battle == "Win":
                            self.Kanto.GymGiovanni.Battled = True
                            for npc in self.OtherTrainers[41]: npc.Battled = True
                            self.NPC_CHange(self.Kanto.VGymAnnouncer,"Blow me away! GIOVANNI was the GYM LEADER here?","Dialogue",NewText2="",NewText3="")
                            for read in range(len(self.Kanto.VGymReadables)): self.Kanto.VGymReadables[read].Text3 = f"WINNING TRAINERS: {self.RivalName} and {self.PlayerName}"
                            self.Player.Badges["Earth"] = True
                            self.GymLeaderGiveTM = True
            if self.Player.Get_BadgeInfo("Earth",Name=True):
                self.GymLeaderEncounter(self.Kanto.GymGiovanni)
                self.NPC_CHange(self.Kanto.VGymAnnouncer,"Blow me away! GIOVANNI was the GYM LEADER here?","Dialogue",NewText2="",NewText3="")
                for read in range(len(self.Kanto.VGymReadables)): self.Kanto.VGymReadables[read].Text3 = f"WINNING TRAINERS: {self.RivalName} and {self.PlayerName}"
                self.Kanto.GymGiovanni.Battled = True
                self.Kanto.GymGiovanni.TextChange()
                for npc in self.OtherTrainers[41]: npc.Battled = True
            if self.GymLeaderGiveTM:
                self.DialougePause = True
                self.Events.Dialouge(*self.Kanto.GymGiovanni.ExtraWinner)
            self.NPC_Interaction(self.Kanto.VGymAnnouncer)
        elif self.Events.Stage == "Victory Road F1":
            self.Transitions(self.Kanto.VictoryRoadF1_ODoor,self.Kanto.VictoryRoadF1_OSpawn)
            self.Transitions(self.Kanto.VictoryRoadA1_A2Door,self.Kanto.VictoryRoadA1_A2Spawn)
            self.Use_Strength()
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.VRoadF1Blocks)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.VRoadF1Blocks)
                self.Player.Moveable = True
                self.WildBattle = False
            self.TrainerEncounters(self.OtherTrainers[42])
            for rock in self.Kanto.VRoadF1Boulders:
                if rock.rect.colliderect(self.Kanto.VRoadF1Button.rect):
                    try:
                        self.Kanto.VRoadF1Camera.remove(self.Kanto.VRoadF1Wall[1])
                        self.Kanto.VRoadF1Barriers.remove(self.Kanto.VRoadF1Wall[0])
                    except:pass
            self.Kanto.VRoadF1Pickups,self.Kanto.VRoadF1Camera = self.Pickup(self.Kanto.VRoadF1Pickups,self.Kanto.VRoadF1Camera)
        elif self.Events.Stage == "Victory Road F2":
            self.Transitions(self.Kanto.VictoryRoadA2_A1Door,self.Kanto.VictoryRoadA2_A1Spawn)
            self.Transitions(self.Kanto.VictoryRoadB1_B2Door,self.Kanto.VictoryRoadB1_B2Spawn)
            self.Transitions(self.Kanto.VictoryRoadC1_C2Door,self.Kanto.VictoryRoadC1_C2Spawn)
            self.Transitions(self.Kanto.VictoryRoadD1_D2Door,self.Kanto.VictoryRoadD1_D2Spawn)
            self.Transitions(self.Kanto.VictoryRoadE1_E2Door,self.Kanto.VictoryRoadE1_E2Spawn)
            self.Transitions(self.Kanto.VictoryRoadF2_ODoor,self.Kanto.VictoryRoadF2_OSpawn)
            self.Kanto.VRoadF2Pickups,self.Kanto.VRoadF2Camera = self.Pickup(self.Kanto.VRoadF2Pickups,self.Kanto.VRoadF2Camera)
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.VRoadF2HiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.VRoadF2HiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.VRoadF2HiddenItems[i].Picked = True
            self.Use_Strength()
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.VRoadF2Blocks)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.VRoadF2Blocks)
                self.Player.Moveable = True
                self.WildBattle = False
            self.TrainerEncounters(self.OtherTrainers[43])
            if not self.Events.Moltres:
                if self.Player.rect.colliderect(self.Kanto.Moltres.rect):
                    self.Interact("Moltres: Gyaoo!")
                    if self.Yes:
                        self.Player_Pause = True
                        self.WildPoke = Pokemon("Moltres",50,["Peck","Fire Spin","-","-"],"Wild","Moltres")
                        self.Yes = False
                        self.Events.MoltresFight = True
                if self.Events.MoltresFight:
                    self.BattleStart = True
                    self.Opponents_Pokemon = self.WildPoke
                    self.WIldBattle()
                    self.ExitBattle = False
                    self.Player_Pause = False
                    self.Player.Menu = False
                    self.BattleStart = False
                    self.Events.MoltresFight = False
                    if self.State_of_Battle == "Win":self.Events.Moltres = True
                    self.WildBattle = False
                    self.Player.Moveable = True
            if self.Events.Moltres:
                try:
                    self.Kanto.VRoadF2Camera.remove(self.Kanto.Moltres)
                    self.Kanto.VRoadF2Barriers.remove(self.Kanto.Moltres.rect)
                except:pass               
            for rock in self.Kanto.VRoadF2Boulders:
                if rock.rect.colliderect(self.Kanto.VRoadF21Button.rect):
                    try:
                        for i in self.Kanto.VRoadF21Wall:
                            self.Kanto.VRoadF2Camera.remove(i[1])
                            self.Kanto.VRoadF2Barriers.remove(i[0])
                    except:pass
                if rock.rect.colliderect(self.Kanto.VRoadF22Button.rect):
                    try:
                        for i in self.Kanto.VRoadF22Wall:
                            self.Kanto.VRoadF2Camera.remove(i[1])
                            self.Kanto.VRoadF2Barriers.remove(i[0])
                    except:pass
        elif self.Events.Stage == "Victory Road F3":
            self.Use_Strength()
            for rock in self.Kanto.VRoadF3Boulders:
                if rock.Transport(self.Kanto.VictoryRoadF3_F2Door.Rect,self.Kanto.VictoryRoadF3_F2Spawn,self.Kanto.VRoadF2Camera):
                    self.Kanto.VRoadF3Barriers.remove(rock.rect)
                    self.Kanto.VRoadF3Camera.remove(rock)
                    self.Kanto.VRoadF2Barriers.append(rock.rect)
                    self.Kanto.VRoadF2Camera.add(rock)
                    self.Kanto.VRoadF2Boulders.append(rock)
                    self.Kanto.VRoadF3Boulders.remove(rock)
                if rock.rect.colliderect(self.Kanto.VRoadF3Button.rect):
                    try:
                        self.Kanto.VRoadF3Camera.remove(self.Kanto.VRoadF3Wall[1])
                        self.Kanto.VRoadF3Barriers.remove(self.Kanto.VRoadF3Wall[0])
                    except:pass
            self.TrainerEncounters(self.OtherTrainers[44])
            self.Transitions(self.Kanto.VictoryRoadB2_B1Door,self.Kanto.VictoryRoadB2_B1Spawn)
            self.Transitions(self.Kanto.VictoryRoadC2_C1Door,self.Kanto.VictoryRoadC2_C1Spawn)
            self.Transitions(self.Kanto.VictoryRoadD2_D1Door,self.Kanto.VictoryRoadD2_D1Spawn)
            self.Transitions(self.Kanto.VictoryRoadE2_E1Door,self.Kanto.VictoryRoadE2_E1Spawn)
            self.Transitions(self.Kanto.VictoryRoadF3_F2Door,self.Kanto.VictoryRoadF3_F2Spawn)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.VRoadF3Blocks)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.VRoadF3Blocks)
                self.Player.Moveable = True
                self.WildBattle = False
            self.Kanto.VRoadF3Pickups,self.Kanto.VRoadF3Camera = self.Pickup(self.Kanto.VRoadF3Pickups,self.Kanto.VRoadF3Camera)
        elif self.Events.Stage == "Indigo Plateau Entrance":
            self.Transitions(self.Kanto.ILE_ODoor,self.Kanto.ILE_OSpawn)
            self.Transitions(self.Kanto.ILE_E4Door,self.Kanto.IceSpawn)
            self.NPC_Interaction(self.Kanto.ILE_Nurse,self.Kanto.ILENurse_desk,True)
            self.NPC_Interaction(self.Kanto.ILEClerk,self.Kanto.MartDesk,True)
            self.Healplace = ["OverWorld",self.Kanto.ILE_OSpawn]
            if not Two_D_ListCheck(self.PlayerMap.FlyLocations,self.Events.OverworldLocation):self.PlayerMap.FlyLocations.append([self.Events.OverworldLocation,self.Kanto.ILE_OSpawn])
            for npc in self.Kanto.IndigoLeagueEntranceNPCS: self.NPC_Interaction(npc)
            if self.Player.rect.colliderect(self.Kanto.ILEPC):
                    self.Interact("Open?")
                    if self.Yes:
                        self.Pc = True
                        if self.ExitPC:
                            self.Yes = False
                            self.ExitPC = False
                    elif self.No:
                        self.No = False
        elif self.Events.Stage == "Indigo Plateau E1":
            self.Transitions(self.Kanto.IndigoPlateauE1_E2Door,self.Kanto.RockSpawn)
            self.E4Encounter(self.Kanto.Lorelei)
            if self.E4Battle:
                self.TrainerBattle(self.Kanto.Lorelei.Team,"Lorelei",self.Kanto.Lorelei.WinnerText,["Try again next time", "",""],self.Kanto.Lorelei.Trainer_img,self.Kanto.Lorelei.Money,self.Kanto.Lorelei.Bag)
                self.Start_Battle_Animation()
                if self.ExitBattle :
                    self.E4Battle = False
                    self.Player_Pause = False
                    self.ExitBattle = False
                    self.DialougePause = False
                    self.Yes = False
                    if self.State_of_Battle == "Win":
                        self.Kanto.Lorelei.Battled = True
            if self.Kanto.Lorelei.Battled:
                try:
                    self.Kanto.IndigoPlateauE1Barriers.remove(self.Kanto.IPE1Wall[0][0])
                    self.Kanto.IndigoPlateauE1Camera.remove(self.Kanto.IPE1Wall[0][1])
                    self.Kanto.IndigoPlateauE1Barriers.remove(self.Kanto.IPE1Wall[1][0])
                    self.Kanto.IndigoPlateauE1Camera.remove(self.Kanto.IPE1Wall[1][1])
                except:pass
        elif self.Events.Stage == "Indigo Plateau E2":
            self.Kanto.Lorelei.Battled = False
            self.Transitions(self.Kanto.IndigoPlateauE2_E3Door,self.Kanto.GhostSpawn)
            self.Kanto.Bruno.BeginningText[2] = f"{self.PlayerName}! We will grind you down with our superior power! Hoo hah!"
            self.E4Encounter(self.Kanto.Bruno)
            if self.E4Battle:
                self.TrainerBattle(self.Kanto.Bruno.Team,"Bruno",self.Kanto.Bruno.WinnerText,["Try again next time", "",""],self.Kanto.Bruno.Trainer_img,self.Kanto.Bruno.Money,self.Kanto.Bruno.Bag)
                self.Start_Battle_Animation()
                if self.ExitBattle :
                    self.E4Battle = False
                    self.Player_Pause = False
                    self.ExitBattle = False
                    self.DialougePause = False
                    self.Yes = False
                    if self.State_of_Battle == "Win":
                        self.Kanto.Bruno.Battled = True
            if self.Kanto.Bruno.Battled:
                try:
                    self.Kanto.IndigoPlateauE2Barriers.remove(self.Kanto.IPE2Wall[0][0])
                    self.Kanto.IndigoPlateauE2Camera.remove(self.Kanto.IPE2Wall[0][1])
                    self.Kanto.IndigoPlateauE2Barriers.remove(self.Kanto.IPE2Wall[1][0])
                    self.Kanto.IndigoPlateauE2Camera.remove(self.Kanto.IPE2Wall[1][1])
                except:pass
        elif self.Events.Stage == "Indigo Plateau E3":
            self.Kanto.Bruno.Battled = False
            self.Transitions(self.Kanto.IndigoPlateauE3_E4Door,self.Kanto.DragonSpawn)
            self.Kanto.Agatha.BeginningText[3] = f"{self.PlayerName}! We will grind you down with our superior power! Hoo hah!"
            self.E4Encounter(self.Kanto.Agatha)
            if self.E4Battle:
                self.TrainerBattle(self.Kanto.Agatha.Team,"Agatha",self.Kanto.Agatha.WinnerText,["Try again next time", "",""],self.Kanto.Agatha.Trainer_img,self.Kanto.Agatha.Money,self.Kanto.Agatha.Bag)
                self.Start_Battle_Animation()
                if self.ExitBattle :
                    self.E4Battle = False
                    self.Player_Pause = False
                    self.ExitBattle = False
                    self.DialougePause = False
                    self.Yes = False
                    if self.State_of_Battle == "Win":
                        self.Kanto.Agatha.Battled = True
            if self.Kanto.Agatha.Battled:
                try:
                    self.Kanto.IndigoPlateauE3Barriers.remove(self.Kanto.IPE3Wall[0][0])
                    self.Kanto.IndigoPlateauE3Camera.remove(self.Kanto.IPE3Wall[0][1])
                    self.Kanto.IndigoPlateauE3Barriers.remove(self.Kanto.IPE3Wall[1][0])
                    self.Kanto.IndigoPlateauE3Camera.remove(self.Kanto.IPE3Wall[1][1])
                except:pass
        elif self.Events.Stage == "Indigo Plateau E4":
            self.Kanto.Agatha.Battled = False
            self.Transitions(self.Kanto.IndigoPlateauE4_CDoor,self.Kanto.IndigoPlateauE4_CSpawn)
            self.Kanto.Lance.BeginningText[0] = f"Ah! I heard about you {self.PlayerName}! I lead the ELITE FOUR! You can call me"
            self.Kanto.Lance.WinnerText[1] = f"I still can't believe my dragons lost to you, {self.PlayerName}! You are now"
            self.Kanto.Lance.AftermathText[0] = f"1 more challenge. You have to face another trainer! His name is...{self.RivalName}!"
            if self.Player.rect.colliderect(self.Kanto.E4LanceBattleLine) and not self.Kanto.Lance.Battled:
                self.Player.rect.center = self.Kanto.E4LanceBattleLine.center
                self.Kanto.Lance.rect.center = (self.Player.rect.centerx,self.Player.rect.centery - 20)
                if not self.E4Battle and not self.Kanto.Lance.Battled:
                    self.DialougePause = True
                    if not self.E4StartText:self.Events.Dialouge(*self.Kanto.Lance.BeginningText)
                    else:self.Events.Dialouge(f"Well, are you ready to lose? Your LEAGUE challenge ends with me, {self.PlayerName}")
            if self.E4Battle:
                self.TrainerBattle(self.Kanto.Lance.Team,"Lance",self.Kanto.Lance.WinnerText,["Try again next time", "",""],self.Kanto.Lance.Trainer_img,self.Kanto.Lance.Money,self.Kanto.Lance.Bag)
                self.Start_Battle_Animation()
                if self.ExitBattle :
                    self.E4Battle = False
                    self.Player_Pause = False
                    self.ExitBattle = False
                    self.DialougePause = False
                    self.Yes = False
                    if self.State_of_Battle == "Win":
                        self.Kanto.Lance.Battled = True
            if self.Kanto.Lance.Battled:
                if self.Player.rect.colliderect(self.Kanto.Lance.rect):
                    self.Interact("Talk")
                    if self.Yes:
                        self.DialougePause = True
                        self.Events.Dialouge(*self.Kanto.Lance.AftermathText)
        elif self.Events.Stage == "Indigo Plateau Champion":
            self.Kanto.Lance.Battled = False
            if self.Player.rect.colliderect(self.Kanto.FinalBattleLine):
                self.Player_Pause = True
                self.Kanto.Rival.Team = self.Make_RivalTeam(65,["Rage","Slash","Fire Blast","Fire Spin"],["SolarBeam","Razor Leaf","Growth","Mega Drain"],["Bite","Withdraw","Hydro Pump","Blizzard"],
                                                                            [Pokemon("Pidgeot",61,["Wing Attack","Sky Attack",'Mirror Move','Whirlwind'],self.RivalName,"Pidgeot"),Pokemon("Alakazam",59,["Psybeam","Psychic",'Reflect','Recover'],self.RivalName,"Alakazam"),Pokemon("Rhydon",61,["Fury Attack","Horn Drill",'Leer','Tail Whip'],self.RivalName,"Rhydon"),Pokemon("Exeggutor",61,["Barrage","Hypnosis",'Stomp','-'],self.RivalName,"Exeggutor"),Pokemon("Gyarados",63,["Leer","Dragon Rage",'Hyper Beam','Hydro Pump'],self.RivalName,"Gyarados")],
                                                                            [Pokemon("Pidgeot",61,["Wing Attack","Sky Attack",'Mirror Move','Whirlwind'],self.RivalName,"Pidgeot"),Pokemon("Alakazam",59,["Psybeam","Psychic",'Reflect','Recover'],self.RivalName,"Alakazam"),Pokemon("Rhydon",61,["Fury Attack","Horn Drill",'Leer','Tail Whip'],self.RivalName,"Rhydon"),Pokemon("Gyarados",61,["Leer","Dragon Rage",'Hyper Beam','Hydro Pump'],self.RivalName,"Gyarados"),Pokemon("Arcanine",63,["Leer","Roar",'Ember','Take Down'],self.RivalName,"Arcanine")],
                                                                            [Pokemon("Pidgeot",61,["Wing Attack","Sky Attack",'Mirror Move','Whirlwind'],self.RivalName,"Pidgeot"),Pokemon("Alakazam",59,["Psybeam","Psychic",'Reflect','Recover'],self.RivalName,"Alakazam"),Pokemon("Rhydon",61,["Fury Attack","Horn Drill",'Leer','Tail Whip'],self.RivalName,"Rhydon"),Pokemon("Arcanine",61,["Leer","Roar",'Ember','Take Down'],self.RivalName,"Arcanine"),Pokemon("Exeggutor",63,["Barrage","Hypnosis",'Stomp','-'],self.RivalName,"Exeggutor")],Stage=3)
                self.Kanto.Rival.image = pygame.image.load(r"Map\Tileset\NPCS\Rival_Idle_Down.png").convert_alpha()
                self.Player.rect.center = self.Kanto.FinalBattleLine.center
                self.Kanto.Rival.rect.center = (self.Kanto.FinalBattleLine.centerx,self.Kanto.FinalBattleLine.centery - 30)
                self.Kanto.IndigoPlateauChampionCamera.add(self.Kanto.Rival)
                self.Player.image = self.Player.Idle_Up
                if self.Events.ChampionFightCutsceneP1: self.Events.Dialouge(f"{self.RivalName}: Hey! I was looking forward to seeing you, {self.PlayerName}! My rival should be","strong to keep me sharp! While working on POKEDEX, I looked all over","for powerful POKEMON! Not only that, I assembled teams that would","beat any POKEMON type! And now! I'm the POKEMON LEAGUE champion!")
                if self.Events.ChampionFightCutsceneP2: self.Events.Dialouge(f"{self.PlayerName}! Do you know what that means? I'll tell you! I am the most","powerful trainer in the world!")
                if self.Events.ChampionFight:
                    self.TrainerBattle(self.Kanto.Rival.Team,self.Kanto.Rival.Name,[f"{self.RivalName}: NO! That can't be! You beat my best! After all that work to become","LEAGUE champ? My reign is over already? It's not fair!",''],[f"{self.RivalName}: Ha",'',''],self.Events.RivalChampion,6435,[["Full Restore",6]])
                    self.Start_Battle_Animation()
                    if self.ExitBattle:
                        self.Events.ChampionFight = False
                        if self.State_of_Battle == "Win":self.Events.ChampionFightAftermath = True
                        else:
                            self.Events.ChampionFightCutsceneP1 = True
                            self.Kanto.IndigoPlateauChampionCamera.remove(self.Kanto.Rival)
                        self.ExitBattle = False
                if self.Events.ChampionFightAftermath:
                    self.Events.Dialouge(f"{self.RivalName}:Why? Why did I lose? I never made any mistakes raising my POKEMON...","Darn it! You're the new POKEMON LEAGUE champion! AlthougH I don't","like to admit it.")
                if self.Events.AfterChampionP1:self.Events.Dialouge(f"Oak: {self.PlayerName}!")
                if self.Events.AfterChampionP2:self.Events.Dialouge(f"Oak: So, you won! Congratulations! You're the new POKEMON LEAGE champion!",f"You've grown up so much since you first left with {self.Events.PlayerPoke}! {self.PlayerName},","you have come of age!")
                if self.Events.AfterChampionP3:self.Events.Dialouge(f"{self.RivalName}! I'm disappointed! I came when I heard you beat the ELITE FOUR!",f"But, when I got here, you had already lost! {self.RivalName}! Do you understand","why you lost? You have forgotten to treat your POKEMON with trust","and love! Without them, you will never become a champ again!")
                if self.Events.AfterChampionP4:self.Events.Dialouge(f"{self.PlayerName}! You understand that your victory was not just your own doing!","The bond you share with your POKEMON is marvelous!",f"{self.PlayerName}! Come with me!")
        elif self.Events.Stage == "Hall of Fame":
            if self.Events.FameHallTalkP1:self.Events.Dialouge(f"Er-hem! Congratulations {self.PlayerName}! This floor is the POKEMON HALL OF FAME!","POKEMON LEAGUE champions are honored for their exploits here!","Their POKEMON are also recorded in the HALL OF FAME!")
            if self.Events.FameHallTalkP2:self.Events.Dialouge(f"{self.PlayerName}! You have endeavored hard to become the new LEAGUE champion!",f"Congratulations, {self.PlayerName}, you and your POKEMON are HALL OF FAMERs!")
            if self.Events.FameHallDisplay:self.Hall_of_Fame()
            if self.Events.FameHallDisplay2:self.Display_FameHallPlayer()
        elif self.Events.Stage == "Power Plant":
            self.Transitions(self.Kanto.PP_ODoor,self.Kanto.PP_OSpawn)
            self.Transitions(self.Kanto.PP_O2Door,self.Kanto.PP_OSpawn)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.PowerPlantWilds)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.PowerPlantWilds)
                self.Player.Moveable = True
                self.WildBattle = False
            self.Kanto.Power_PlantPickups,self.Kanto.Power_PlantCamera = self.Pickup(self.Kanto.Power_PlantPickups,self.Kanto.Power_PlantCamera)
            self.Kanto.FakePower_PlantPickups,self.Kanto.Power_PlantCamera = self.FakePickup(self.Kanto.FakePower_PlantPickups,self.Kanto.Power_PlantCamera)
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.Power_PlantHiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.Power_PlantHiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.Power_PlantHiddenItems[i].Picked = True
            if not self.Events.Zapdos:
                if self.Player.rect.colliderect(self.Kanto.Zapdos.rect):
                    self.Interact("Zapdos: Gyaoo!")
                    if self.Yes:
                        self.Player_Pause = True
                        self.WildPoke = Pokemon("Zapdos",50,["ThunderShock","Drill Peck","-","-"],"Wild","Zapdos")
                        self.Yes = False
                        self.Events.ZapdosFight = True
                if self.Events.ZapdosFight:
                    self.BattleStart = True
                    self.Opponents_Pokemon = self.WildPoke
                    self.WIldBattle()
                    self.ExitBattle = False
                    self.Player_Pause = False
                    self.Player.Menu = False
                    self.BattleStart = False
                    self.Events.ZapdosFight = False
                    if self.State_of_Battle == "Win":self.Events.Zapdos = True
                    self.WildBattle = False
                    self.Player.Moveable = True
            if self.Events.Zapdos:
                try:
                    self.Kanto.Power_PlantCamera.remove(self.Kanto.Zapdos)
                    self.Kanto.PowerPlantBarriers.remove(self.Kanto.Zapdos.rect)
                except:pass               
        elif self.Events.Stage == "SeaFoam Islands F1":
            self.Use_Strength()
            self.Transitions(self.Kanto.LSFIF1_ODoor,self.Kanto.LSFIF1_OSpawn)
            self.Transitions(self.Kanto.RSFIF1_ODoor,self.Kanto.RSFIF1_OSpawn)
            self.Transitions(self.Kanto.LSFIA1_A2Door,self.Kanto.LSFIA1_A2Spawn)
            self.Transitions(self.Kanto.LSFIB1_B2Door,self.Kanto.LSFIB1_B2Spawn)
            self.Transitions(self.Kanto.LSFIL1_L2Door,self.Kanto.LSFIL1_L2Spawn)
            self.Transitions(self.Kanto.SFIF1_BF1Hole,self.Kanto.SFIF1_BF1Spawn)
            self.Transitions(self.Kanto.SFIF1_BF12Hole,self.Kanto.SFIF1_BF12Spawn)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.SeaFoam_IslandF1Wilds)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.SeaFoam_IslandF1Wilds)
                self.Player.Moveable = True
                self.WildBattle = False
            for rock in self.Kanto.SeaFoam_IslandF1Boulders:
                if rock.Transport(self.Kanto.SFIF1_BF1Hole.Rect,self.Kanto.SFIF1_BF1Spawn,self.Kanto.SeaFoam_IslandFB1Camera):
                    self.Kanto.SeaFoam_IslandF1Barriers.remove(rock.rect)
                    self.Kanto.SeaFoam_IslandF1Camera.remove(rock)
                    self.Kanto.SeaFoam_IslandFB1Barriers.append(rock.rect)
                    self.Kanto.SeaFoam_IslandFB1Camera.add(rock)
                    self.Kanto.SeaFoam_IslandFB1Boulders.append(rock)
                    self.Kanto.SeaFoam_IslandF1Boulders.remove(rock)
                elif rock.Transport(self.Kanto.SFIF1_BF12Hole.Rect,self.Kanto.SFIF1_BF12Spawn,self.Kanto.SeaFoam_IslandFB1Camera):
                    self.Kanto.SeaFoam_IslandF1Barriers.remove(rock.rect)
                    self.Kanto.SeaFoam_IslandF1Camera.remove(rock)
                    self.Kanto.SeaFoam_IslandFB1Barriers.append(rock.rect)
                    self.Kanto.SeaFoam_IslandFB1Camera.add(rock)
                    self.Kanto.SeaFoam_IslandFB1Boulders.append(rock)
                    self.Kanto.SeaFoam_IslandF1Boulders.remove(rock)
        elif self.Events.Stage == "SeaFoam Islands FB1":
            self.Use_Strength()
            self.Transitions(self.Kanto.LSFIA2_A1Door,self.Kanto.LSFIA2_A1Spawn)
            self.Transitions(self.Kanto.LSFIB2_B1Door,self.Kanto.LSFIB2_B1Spawn)
            self.Transitions(self.Kanto.LSFIL2_L1Door,self.Kanto.LSFIL2_L1Spawn)
            self.Transitions(self.Kanto.LSFIC1_C2Door,self.Kanto.LSFIC2_C1Spawn)
            self.Transitions(self.Kanto.LSFID1_D2Door,self.Kanto.LSFID2_D1Spawn)
            self.Transitions(self.Kanto.LSFIE1_E2Door,self.Kanto.LSFIE2_E1Spawn)
            self.Transitions(self.Kanto.LSFIK1_K2Door,self.Kanto.LSFIK2_K1Spawn)
            self.Transitions(self.Kanto.SFIFB1_BF2Hole,self.Kanto.SFIFB1_BF2Spawn)
            self.Transitions(self.Kanto.SFIFB1_BF22Hole,self.Kanto.SFIFB1_BF22Spawn)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.SeaFoam_IslandFB1Wilds)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.SeaFoam_IslandFB1Wilds)
                self.Player.Moveable = True
                self.WildBattle = False
            for rock in self.Kanto.SeaFoam_IslandFB1Boulders:
                if rock.Transport(self.Kanto.SFIFB1_BF2Hole.Rect,self.Kanto.SFIFB1_BF2Spawn,self.Kanto.SeaFoam_IslandFB2Camera):
                    self.Kanto.SeaFoam_IslandFB1Barriers.remove(rock.rect)
                    self.Kanto.SeaFoam_IslandFB1Camera.remove(rock)
                    self.Kanto.SeaFoam_IslandFB2Barriers.append(rock.rect)
                    self.Kanto.SeaFoam_IslandFB2Camera.add(rock)
                    self.Kanto.SeaFoam_IslandFB2Boulders.append(rock)
                    self.Kanto.SeaFoam_IslandFB1Boulders.remove(rock)
                elif rock.Transport(self.Kanto.SFIFB1_BF22Hole.Rect,self.Kanto.SFIFB1_BF22Spawn,self.Kanto.SeaFoam_IslandFB2Camera):
                    self.Kanto.SeaFoam_IslandFB1Barriers.remove(rock.rect)
                    self.Kanto.SeaFoam_IslandFB1Camera.remove(rock)
                    self.Kanto.SeaFoam_IslandFB2Barriers.append(rock.rect)
                    self.Kanto.SeaFoam_IslandFB2Camera.add(rock)
                    self.Kanto.SeaFoam_IslandFB2Boulders.append(rock)
                    self.Kanto.SeaFoam_IslandFB1Boulders.remove(rock)
        elif self.Events.Stage == "SeaFoam Islands FB2":
            self.Use_Strength()
            self.Transitions(self.Kanto.LSFIF1_F2Door,self.Kanto.LSFIF1_F2Spawn)
            self.Transitions(self.Kanto.LSFIH1_H2Door,self.Kanto.LSFIH1_H2Spawn)
            self.Transitions(self.Kanto.LSFII1_I2Door,self.Kanto.LSFII1_I2Spawn)
            self.Transitions(self.Kanto.LSFID2_D1Door,self.Kanto.LSFID2_D1Spawn)
            self.Transitions(self.Kanto.LSFIE2_E1Door,self.Kanto.LSFIE2_E1Spawn)
            self.Transitions(self.Kanto.LSFIC2_C1Door,self.Kanto.LSFIC2_C1Spawn)
            self.Transitions(self.Kanto.LSFIK2_K1Door,self.Kanto.LSFIK2_K1Spawn)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.SeaFoam_IslandFB2Wilds)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.SeaFoam_IslandFB2Wilds)
                self.Player.Moveable = True
                self.WildBattle = False
            if self.Player.rect.colliderect(self.Kanto.SFIFB2_BF3Hole.Rect) or self.Player.rect.colliderect(self.Kanto.SFIFB2_BF32Hole.Rect):
                if len(self.Kanto.SeaFoam_IslandFB2Boulders) + len(self.Kanto.SeaFoam_IslandFB1Boulders) + len(self.Kanto.SeaFoam_IslandF1Boulders) > 0 :self.Player_Spawn("SeaFoam Islands FB4",self.Kanto.SFIWaveSpawn)
                else:self.Player_Spawn("SeaFoam Islands FB3",self.Kanto.SFIFB2_BF33Spawn)
                self.Player.Surf = True
            for rock in self.Kanto.SeaFoam_IslandFB2Boulders:
                if rock.Transport(self.Kanto.SFIFB2_BF3Hole.Rect,self.Kanto.SFIFB2_BF3Spawn,self.Kanto.SeaFoam_IslandFB3Camera):
                    self.Kanto.SeaFoam_IslandFB2Barriers.remove(rock.rect)
                    self.Kanto.SeaFoam_IslandFB2Camera.remove(rock)
                    self.Kanto.SeaFoam_IslandFB3Barriers.append(rock.rect)
                    self.Kanto.SeaFoam_IslandFB3Camera.add(rock)
                    self.Kanto.SeaFoam_IslandFB3Boulders.append(rock)
                    self.Kanto.SeaFoam_IslandFB2Boulders.remove(rock)
                elif rock.Transport(self.Kanto.SFIFB2_BF32Hole.Rect,self.Kanto.SFIFB2_BF32Spawn,self.Kanto.SeaFoam_IslandFB3Camera):
                    self.Kanto.SeaFoam_IslandFB2Barriers.remove(rock.rect)
                    self.Kanto.SeaFoam_IslandFB2Camera.remove(rock)
                    self.Kanto.SeaFoam_IslandFB3Barriers.append(rock.rect)
                    self.Kanto.SeaFoam_IslandFB3Camera.add(rock)
                    self.Kanto.SeaFoam_IslandFB3Boulders.append(rock)
                    self.Kanto.SeaFoam_IslandFB2Boulders.remove(rock)
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.SeaFoam_IslandFB2HiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.SeaFoam_IslandFB2HiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.SeaFoam_IslandFB2HiddenItems[i].Picked = True
        elif self.Events.Stage == "SeaFoam Islands FB3":
            self.Use_Strength()
            self.Transitions(self.Kanto.LSFII2_I1Door,self.Kanto.LSFII2_I1Spawn)
            self.Transitions(self.Kanto.LSFIF2_F1Door,self.Kanto.LSFIF2_F1Spawn)
            self.Transitions(self.Kanto.LSFIH2_H1Door,self.Kanto.LSFIH2_H1Spawn)
            self.Transitions(self.Kanto.LSFIG1_G2Door,self.Kanto.LSFIG1_G2Spawn)
            self.Transitions(self.Kanto.LSFIJ1_J2Door,self.Kanto.LSFIJ1_J2Spawn)
            self.CheckFishingReq(self.Kanto.SeaFoam_IslandFB3FishingPoint)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.SeaFoam_IslandFB3Wilds)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.SeaFoam_IslandFB3Wilds)
                self.Player.Moveable = True
                self.WildBattle = False
            if self.Events.FishingCutscene:
                self.Player_Pause = True
                self.Player.image = self.Player.Fishing_pos
                if self.Player.FishCaught:self.Events.Dialouge("You caught something!")
            if self.Events.FishFight:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.Player_Pause = False
                self.BattleStart = False
                self.Player.Moveable = True
                self.Events.FishFight = False
                self.Player.Fishing_Rod = ""
            if self.Player.rect.colliderect(self.Kanto.SFIFB3_BF42Hole.Rect) or self.Player.rect.colliderect(self.Kanto.SFIFB3_BF4Hole.Rect):
                if len(self.Kanto.SeaFoam_IslandFB4Boulders) != 2:self.Player_Spawn("SeaFoam Islands FB4",self.Kanto.SFIWave2Spawn)
                else:
                    self.Player_Spawn("SeaFoam Islands FB4",self.Kanto.SFIWave3Spawn)
                    self.Player.Surf = True
                    self.Kanto.SeaFoam_IslandFB4FishingPoint.append(self.Kanto.SFIBF4Risingpoint)
                    self.F4Surf = True
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.SeaFoam_IslandFB3HiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.SeaFoam_IslandFB3HiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.SeaFoam_IslandFB3HiddenItems[i].Picked = True
            for rock in self.Kanto.SeaFoam_IslandFB3Boulders:
                if rock.Transport(self.Kanto.SFIFB3_BF42Hole.Rect,self.Kanto.SFIFB3_BF42Spawn,self.Kanto.SeaFoam_IslandFB4Camera):
                    self.Kanto.SeaFoam_IslandFB3Barriers.remove(rock.rect)
                    self.Kanto.SeaFoam_IslandFB3Camera.remove(rock)
                    self.Kanto.SeaFoam_IslandFB3Boulders.remove(rock)
                    self.Kanto.SeaFoam_IslandFB4Barriers.append(rock.rect)
                    self.Kanto.SeaFoam_IslandFB4Camera.add(rock)
                    self.Kanto.SeaFoam_IslandFB4Boulders.append(rock)
                elif rock.Transport(self.Kanto.SFIFB3_BF4Hole.Rect,self.Kanto.SFIFB3_BF4Spawn,self.Kanto.SeaFoam_IslandFB4Camera):
                    self.Kanto.SeaFoam_IslandFB3Barriers.remove(rock.rect)
                    self.Kanto.SeaFoam_IslandFB3Camera.remove(rock)
                    self.Kanto.SeaFoam_IslandFB3Boulders.remove(rock)
                    self.Kanto.SeaFoam_IslandFB4Barriers.append(rock.rect)
                    self.Kanto.SeaFoam_IslandFB4Camera.add(rock)
                    self.Kanto.SeaFoam_IslandFB4Boulders.append(rock)
        elif self.Events.Stage == "SeaFoam Islands FB4":
            self.Readables(self.Kanto.SeaFoam_IslandFB4Readables)
            self.Transitions(self.Kanto.LSFIG2_G1Door,self.Kanto.LSFIG2_G1Spawn)
            self.Transitions(self.Kanto.LSFIJ2_J1Door,self.Kanto.LSFIJ2_J1Spawn)
            if self.F4Surf: self.Kanto.SeaFoam_IslandFB4FishingPoint.append(self.Kanto.SFIBF4Risingpoint)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.SeaFoam_IslandFB4Wilds)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.SeaFoam_IslandFB4Wilds)
                self.Player.Moveable = True
                self.WildBattle = False
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.SeaFoam_IslandFB4HiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.SeaFoam_IslandFB4HiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.SeaFoam_IslandFB4HiddenItems[i].Picked = True
            self.CheckFishingReq(self.Kanto.SeaFoam_IslandFB4FishingPoint)
            if not self.Events.Articuno:
                if self.Player.rect.colliderect(self.Kanto.Articuno.rect):
                    self.Interact("Articuno: Gyaoo!")
                    if self.Yes:
                        self.Player_Pause = True
                        self.WildPoke = Pokemon("Articuno",50,["Peck","Ice Beam","-","-"],"Wild","Articuno")
                        self.Yes = False
                        self.Events.ArticunoFight = True
                if self.Events.ArticunoFight:
                    self.BattleStart = True
                    self.Opponents_Pokemon = self.WildPoke
                    self.WIldBattle()
                    self.ExitBattle = False
                    self.Player_Pause = False
                    self.Player.Menu = False
                    self.BattleStart = False
                    self.Events.ArticunoFight = False
                    if self.State_of_Battle == "Win":self.Events.Articuno = True
                    self.WildBattle = False
                    self.Player.Moveable = True
            if self.Events.Articuno:
                try:
                    self.Kanto.SeaFoam_IslandFB4Camera.remove(self.Kanto.Articuno)
                    self.Kanto.SeaFoam_IslandFB4Barriers.remove(self.Kanto.Articuno.rect)
                except:pass               
            if self.Events.FishingCutscene:
                self.Player_Pause = True
                self.Player.image = self.Player.Fishing_pos
                if self.Player.FishCaught:self.Events.Dialouge("You caught something!")
            if self.Events.FishFight:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.Player_Pause = False
                self.BattleStart = False
                self.Player.Moveable = True
                self.Events.FishFight = False
                self.Player.Fishing_Rod = ""
        elif self.Events.Stage == "Cerulean Cave F1":
            self.Transitions(self.Kanto.CCave_ODoor,self.Kanto.CCave_OSpawn)
            self.Transitions(self.Kanto.CCaveG1_G2Door,self.Kanto.CCaveG1_G2Spawn)
            self.Transitions(self.Kanto.CCaveF1_F2Door,self.Kanto.CCaveF1_F2Spawn)
            self.Transitions(self.Kanto.CCaveE1_E2Door,self.Kanto.CCaveE1_E2Spawn)
            self.Transitions(self.Kanto.CCaveD1_D2Door,self.Kanto.CCaveD1_D2Spawn)
            self.Transitions(self.Kanto.CCaveC1_C2Door,self.Kanto.CCaveC1_C2Spawn)
            self.Transitions(self.Kanto.CCaveB1_B2Door,self.Kanto.CCaveB1_B2Spawn)
            self.Transitions(self.Kanto.CCaveA1_A2Door,self.Kanto.CCaveA1_A2Spawn)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.Cerulean_CaveF1Wilds)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.Cerulean_CaveF1Wilds)
                self.Player.Moveable = True
                self.WildBattle = False
            self.Kanto.Cerulean_CaveF1Pickups,self.Kanto.Cerulean_CaveF1Camera = self.Pickup(self.Kanto.Cerulean_CaveF1Pickups,self.Kanto.Cerulean_CaveF1Camera)
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.Cerulean_CaveF1HiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.Cerulean_CaveF1HiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.Cerulean_CaveF1HiddenItems[i].Picked = True
            self.CheckFishingReq(self.Kanto.Cerulean_CaveF1FishingPoint)
            if self.Events.FishingCutscene:
                self.Player_Pause = True
                self.Player.image = self.Player.Fishing_pos
                if self.Player.FishCaught:self.Events.Dialouge("You caught something!")
            if self.Events.FishFight:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.Player_Pause = False
                self.BattleStart = False
                self.Player.Moveable = True
                self.Events.FishFight = False
                self.Player.Fishing_Rod = ""
        elif self.Events.Stage == "Cerulean Cave BF":
            self.Transitions(self.Kanto.CCaveG2_G1Door,self.Kanto.CCaveG2_G1Spawn)
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.Cerulean_CaveBFWilds)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.Cerulean_CaveBFWilds)
                self.Player.Moveable = True
                self.WildBattle = False
            self.Kanto.Cerulean_CaveBFPickups,self.Kanto.Cerulean_CaveBFCamera = self.Pickup(self.Kanto.Cerulean_CaveBFPickups,self.Kanto.Cerulean_CaveBFCamera)
            if self.Player.ItemFinderPing:
                self.ItemFinderSearch(self.Kanto.Cerulean_CaveBFHiddenItems)
                self.Player.ItemFinderPing = False
            for i,Item in enumerate(self.Kanto.Cerulean_CaveBFHiddenItems):
                if self.Player.Search and not Item.Picked:
                    if self.Player.rect.colliderect(Item.Rect):
                        self.Player_Pause = True
                        self.Events.HiddenItemPickedup = True
                        self.Player.Add_Bag(Item.Item,1)
                        self.Player.Search = False
                        self.Kanto.Cerulean_CaveBFHiddenItems[i].Picked = True
            self.CheckFishingReq(self.Kanto.Cerulean_CaveBFFishingPoint)
            if self.Events.FishingCutscene:
                self.Player_Pause = True
                self.Player.image = self.Player.Fishing_pos
                if self.Player.FishCaught:self.Events.Dialouge("You caught something!")
            if self.Events.FishFight:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.Player_Pause = False
                self.BattleStart = False
                self.Player.Moveable = True
                self.Events.FishFight = False
                self.Player.Fishing_Rod = ""
            if not self.Events.Mewtwo:
                if self.Player.rect.colliderect(self.Kanto.Mewtwo.rect):
                    self.Interact("Mewtwo: Mew!")
                    if self.Yes:
                        self.Player_Pause = True
                        self.WildPoke = Pokemon("Mewtwo",70,["Recover","Psychic","Barrier","Swift"],"Wild","Mewtwo")
                        self.Yes = False
                        self.Events.MewtwoFight = True
                if self.Events.MewtwoFight:
                    self.BattleStart = True
                    self.Opponents_Pokemon = self.WildPoke
                    self.WIldBattle()
                    self.ExitBattle = False
                    self.Player_Pause = False
                    self.Player.Menu = False
                    self.BattleStart = False
                    self.Events.MewtwoFight = False
                    if self.State_of_Battle == "Win":self.Events.Mewtwo = True
                    self.WildBattle = False
                    self.Player.Moveable = True
            if self.Events.Mewtwo:
                try:
                    self.Kanto.Cerulean_CaveBFCamera.remove(self.Kanto.Mewtwo)
                    self.Kanto.Cerulean_CaveBFBarriers.remove(self.Kanto.Mewtwo.rect)
                except:pass               
        elif self.Events.Stage == "Cerulean Cave F2":
            if not True in (self.Events.FishingCutscene,self.Player.Menu,self.Player_Pause):self.Wild_Encounters(self.Kanto.Cerulean_CaveF2Wilds)
            if self.WildBattle:
                self.BattleStart = True
                self.WIldBattle()
                self.ExitBattle = False
                self.Player.Menu = False
                self.BattleStart = False
                self.Shuffle_Wild_Pokemon(self.Kanto.Cerulean_CaveF2Wilds)
                self.Player.Moveable = True
                self.WildBattle = False
            self.Kanto.Cerulean_CaveF2Pickups,self.Kanto.Cerulean_CaveF2Camera = self.Pickup(self.Kanto.Cerulean_CaveF2Pickups,self.Kanto.Cerulean_CaveF2Camera)
            self.Transitions(self.Kanto.CCaveA2_A1Door,self.Kanto.CCaveA2_A1Spawn)
            self.Transitions(self.Kanto.CCaveB2_B1Door,self.Kanto.CCaveB2_B1Spawn)
            self.Transitions(self.Kanto.CCaveC2_C1Door,self.Kanto.CCaveC2_C1Spawn)
            self.Transitions(self.Kanto.CCaveD2_D1Door,self.Kanto.CCaveD2_D1Spawn)
            self.Transitions(self.Kanto.CCaveE2_E1Door,self.Kanto.CCaveE2_E1Spawn)
            self.Transitions(self.Kanto.CCaveF2_F1Door,self.Kanto.CCaveF2_F1Spawn)

    def DayCareDeposit(self):
        mouse_pos = pygame.mouse.get_pos()
        SCREEN.fill("cornsilk1")
        self.Pokemon2_Text = self.Events.Game_Font2.render("",True,"Black")
        self.Pokemon2_Text_Rect = self.Pokemon2_Text.get_rect(topleft = self.Pokemon2_Rect.topleft)
        self.Pokemon3_Text = self.Events.Game_Font2.render("",True,"Black")
        self.Pokemon3_Text_Rect = self.Pokemon3_Text.get_rect(topleft = self.Pokemon3_Rect.topleft)
        self.Pokemon4_Text = self.Events.Game_Font2.render("",True,"Black")
        self.Pokemon4_Text_Rect = self.Pokemon4_Text.get_rect(topleft = self.Pokemon4_Rect.topleft)
        self.Pokemon5_Text = self.Events.Game_Font2.render("",True,"Black")
        self.Pokemon5_Text_Rect = self.Pokemon5_Text.get_rect(topleft = self.Pokemon5_Rect.topleft)
        self.Pokemon6_Text = self.Events.Game_Font2.render("",True,"Black")
        self.Pokemon6_Text_Rect = self.Pokemon6_Text.get_rect(topleft = self.Pokemon6_Rect.topleft)
        try:
            self.Pokemon1_Text = self.Events.Game_Font2.render(self.Player.Pokemon[0].NickName,True,"Black")
            self.Pokemon1_Text_Rect = self.Pokemon1_Text.get_rect(topleft = self.Pokemon1_Rect.topleft)
            self.Pokemon2_Text = self.Events.Game_Font2.render(self.Player.Pokemon[1].NickName,True,"Black")
            self.Pokemon2_Text_Rect = self.Pokemon2_Text.get_rect(topleft = self.Pokemon2_Rect.topleft)
            self.Pokemon3_Text = self.Events.Game_Font2.render(self.Player.Pokemon[2].NickName,True,"Black")
            self.Pokemon3_Text_Rect = self.Pokemon3_Text.get_rect(topleft = self.Pokemon3_Rect.topleft)
            self.Pokemon4_Text = self.Events.Game_Font2.render(self.Player.Pokemon[3].NickName,True,"Black")
            self.Pokemon4_Text_Rect = self.Pokemon4_Text.get_rect(topleft = self.Pokemon4_Rect.topleft)
            self.Pokemon5_Text = self.Events.Game_Font2.render(self.Player.Pokemon[4].NickName,True,"Black")
            self.Pokemon5_Text_Rect = self.Pokemon5_Text.get_rect(topleft = self.Pokemon5_Rect.topleft)
            self.Pokemon6_Text = self.Events.Game_Font2.render(self.Player.Pokemon[5].NickName,True,"Black")
            self.Pokemon6_Text_Rect = self.Pokemon6_Text.get_rect(topleft = self.Pokemon6_Rect.topleft)
        except:pass
        self.Show_Options2([(self.Pokemon1_Rect,self.Pokemon1_Text,self.Pokemon1_Text_Rect),(self.Pokemon2_Rect,self.Pokemon2_Text,self.Pokemon2_Text_Rect),(self.Pokemon3_Rect,self.Pokemon3_Text,self.Pokemon3_Text_Rect),(self.Pokemon4_Rect,self.Pokemon4_Text,self.Pokemon4_Text_Rect),(self.Pokemon5_Rect,self.Pokemon5_Text,self.Pokemon5_Text_Rect),(self.Pokemon6_Rect,self.Pokemon6_Text,self.Pokemon6_Text_Rect)],"cornsilk1")
        if self.Pokemon1_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.DCChoicePokemon = self.Player.Pokemon[0]
                    self.Yes = False
                    self.DCDeposit = True
                    self.Clicked = False
        if self.Pokemon2_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.DCChoicePokemon = self.Player.Pokemon[1]
                    self.Yes = False
                    self.DCDeposit = True
                    self.Clicked = False
        if self.Pokemon3_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.DCChoicePokemon = self.Player.Pokemon[2]
                    self.Yes = False
                    self.DCDeposit = True
                    self.Clicked = False
        if self.Pokemon4_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.DCChoicePokemon = self.Player.Pokemon[3]
                    self.Yes = False
                    self.DCDeposit = True
                    self.Clicked = False
        if self.Pokemon5_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if len(self.Player.Pokemon) >= 5:
                        self.DCChoicePokemon = self.Player.Pokemon[4]
                        self.Yes = False
                        self.DCDeposit = True
                    self.Clicked = False
        if self.Pokemon6_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if len(self.Player.Pokemon) == 6:
                        self.DCChoicePokemon = self.Player.Pokemon[5]
                        self.Yes = False
                        self.DCDeposit = True
                    self.Clicked = False

    def ChangeNickName(self):
        SCREEN.fill("White")
        self.ChangePokeNewName_surf = self.Events.Game_font.render(self.ChangePokeNewName,True,"Black")
        self.ChangePokeNewName_rect = self.ChangePokeNewName_surf.get_rect(center = self.Events.NameInputBox.center)
        pygame.draw.rect(SCREEN,"Black",self.Events.NameInputBox,2)
        SCREEN.blit(self.ChangePokeNewName_surf,self.ChangePokeNewName_rect)

    def MovingBlocks(self,MovingBlocks):
        for Block in MovingBlocks:
            if Block.rect.colliderect(self.Player.rect):
                if Block.Way == "Left":
                    self.Player.rect.right = Block.rect.left
                    self.Player.rect.centery = Block.rect.centery
                    self.Player.rect.centerx -= 25
                elif Block.Way == "Right":
                    self.Player.rect.left = Block.rect.right
                    self.Player.rect.centery = Block.rect.centery
                    self.Player.rect.centerx += 25
                elif Block.Way == "Up":
                    self.Player.rect.bottom = Block.rect.top
                    self.Player.rect.centerx = Block.rect.centerx
                    self.Player.rect.centery -= 5
                else:
                    self.Player.rect.top = Block.rect.bottom
                    self.Player.rect.centerx = Block.rect.centerx
                    self.Player.rect.centery += 15

    def Display_FameHallPokemon(self,Pokemon:Pokemon) -> bool:
        SCREEN.fill("White")
        Type = ""
        if Pokemon.HallofFameBackrect.topright[0] > -10:
            SCREEN.blit(Pokemon.Back_Img,Pokemon.HallofFameBackrect)
            Pokemon.HallofFameBackrect.topright = (Pokemon.HallofFameBackrect.topright[0]- 5,Pokemon.HallofFameBackrect.topright[1])
        elif Pokemon.HallofFameFrontrect.x < 400:
            SCREEN.blit(Pokemon.Front_Img,Pokemon.HallofFameFrontrect)
            Pokemon.HallofFameFrontrect.x += 1
        elif Pokemon.HallofFameFrontrect.x == 400:
            if Pokemon.Delay > 0:
                SCREEN.blit(Pokemon.Front_Img,Pokemon.HallofFameFrontrect)
                if Pokemon.Type[1] == "": Type = Pokemon.Type[0]
                else:Type = f"{Pokemon.Type[0]}/{Pokemon.Type[1]}"
                self.Events.Dialouge(f"Name: {Pokemon.Name}/{Pokemon.NickName}",f"LV:{Pokemon.Level}",f"Type:{Type}",Next=False)
                Pokemon.Delay -= 1
            else:
                Pokemon.Delay = 100
                Pokemon.HallofFameBackrect.topleft = (800, 350)
                Pokemon.HallofFameFrontrect.topright = (0,100)
                return True
        return False

    def Display_FameHallPlayer(self):
        SCREEN.fill("White")
        if self.Player_Back_rect.topright[0] > -10:
            SCREEN.blit(self.Player_Back,self.Player_Back_rect)
            self.Player_Back_rect.topright = (self.Player_Back_rect.topright[0]- 5,self.Player_Back_rect.topright[1])
        elif self.Events.Playerfullsprite_rect.x < 400:
            SCREEN.blit(self.Events.Playerfullsprite,self.Events.Playerfullsprite_rect)
            self.Events.Playerfullsprite_rect.x += 1
        elif self.Events.Playerfullsprite_rect.x == 400:
            if self.Player.Pokemon[0].Delay > 0:
                SCREEN.blit(self.Events.Playerfullsprite,self.Events.Playerfullsprite_rect)
                self.Events.Dialouge(f"Name:{self.PlayerName}",f"Money:{self.Player.Money}",f"Pokemon Seen:{len(self.Pokemon_Seen)}",f"Pokemon Captured:{len(self.Pokemon_Caught)}",Next=False)
                self.Player.Pokemon[0].Delay -= 1
            else:
                self.Player.Pokemon[0].Delay = 100
                self.Events.FameHallDisplay2 = False
                self.Player_Spawn("OverWorld",Game.Kanto.PLayerHouseOSpawn)
                self.Player.Full_Team_Heal()
                self.Save()
                self.Events.Stage = "The End"

    def Hall_of_Fame(self):
        if self.Display_FameHallPokemon(self.Player.Pokemon[self.Index]):
            if self.Index < 5:
                self.Index += 1
            else:
                self.Events.FameHallDisplay= False
                self.Events.FameHallDisplay2 = True
                self.Player_Back_rect = self.Player_Back.get_rect(topleft = (800, 350))
                self.Events.Playerfullsprite_rect = self.Events.Playerfullsprite.get_rect(topright = (0,100))
                self.Player.Pokemon[0].Delay = 100
                self.E4Beaten = True

    def DayCareExpGain(self):
        if self.DayCarePokemon:
            if self.Player.IsWalking():
                self.DayCarePokemon[0][0].exp += 100
                while self.DayCarePokemon[0][0].exp >= self.DayCarePokemon[0][0].EXPGOAL:
                    self.DayCarePokemon[0][0].exp -= self.DayCarePokemon[0][0].EXPGOAL
                    self.DayCarePokemon[0][0].exp = round(self.DayCarePokemon[0][0].exp)
                    self.DayCarePokemon[0][0].Level += 1
                    self.DayCarePokemon[0][0].LV_UP()
                    if self.DayCarePokemon[0][0].NewMoveStatus == "Choice":
                        self.DayCarePokemon[0][0].SetUpNewMove(1,self.DayCarePokemon[0][0].Moves[1])
                        self.DayCarePokemon[0][0].SetUpNewMove(2,self.DayCarePokemon[0][0].Moves[2])
                        self.DayCarePokemon[0][0].SetUpNewMove(3,self.DayCarePokemon[0][0].Moves[3])
                        self.DayCarePokemon[0][0].SetUpNewMove(4,self.DayCarePokemon[0][0].NewMove)
                        self.DayCarePokemon[0][0].NewMoveStatus = "None"

    def Make_Option_Button(self,Rect:pygame.Rect,Text:str):
        Text_surf = self.Events.Game_font.render(Text,True,"Black")
        Text_rect = Text_surf.get_rect(center = Rect.center)
        return Rect,Text_surf,Text_rect

    def Show_Options1(self,Options:list,color:str ="White" ):
        for Button,Text_surf,Text_rect in Options:
            Text_rect = Text_surf.get_rect(center = Button.center)
            pygame.draw.rect(SCREEN,color,Button)
            SCREEN.blit(Text_surf,Text_rect)
    
    def Show_Options2(self,Options:list,color:str ="White" ):
        for Button,Text_surf,Text_rect in Options:
            pygame.draw.rect(SCREEN,color,Button)
            SCREEN.blit(Text_surf,Text_rect)

    def RooftopDrinkGirlText(self) -> str:
        if Two_D_ListCheck(self.Player.Bag,"Fresh Water") and not self.Events.GirlGotWater:return "Can I have that Water your holding"
        elif Two_D_ListCheck(self.Player.Bag,"Soda Pop") and not self.Events.GirlGotPop:return "Can I have that Pop your holding"
        elif Two_D_ListCheck(self.Player.Bag,"Lemonade") and not self.Events.GirlGotLemons:return "Can I have that Lemonade your holding"
        else: return ""

    def CEStoreElevator(self):
        self.CEStoreF1_Rect,self.CEStoreF1_Text,self.CEStoreF1_Text_Rect = self.Make_Option_Button(pygame.Rect(0,0,self.MenuBar.width,100),"F1")
        self.CEStoreF2_Rect,self.CEStoreF2_Text,self.CEStoreF2_Text_Rect = self.Make_Option_Button(pygame.Rect(0,100,self.MenuBar.width,100),"F2")
        self.CEStoreF3_Rect,self.CEStoreF3_Text,self.CEStoreF3_Text_Rect = self.Make_Option_Button(pygame.Rect(0,200,self.MenuBar.width,100),"F3")
        self.CEStoreF4_Rect,self.CEStoreF4_Text,self.CEStoreF4_Text_Rect = self.Make_Option_Button(pygame.Rect(0,300,self.MenuBar.width,100),"F4")
        self.CEStoreF5_Rect,self.CEStoreF5_Text,self.CEStoreF5_Text_Rect = self.Make_Option_Button(pygame.Rect(0,400,self.MenuBar.width,100),"F5")
        if self.Player.rect.colliderect(self.Kanto.Elevator_Menu):
            self.Show_Options1([(self.CEStoreF1_Rect,self.CEStoreF1_Text,self.CEStoreF1_Text_Rect),(self.CEStoreF2_Rect,self.CEStoreF2_Text,self.CEStoreF2_Text_Rect),(self.CEStoreF3_Rect,self.CEStoreF3_Text,self.CEStoreF3_Text_Rect),(self.CEStoreF4_Rect,self.CEStoreF4_Text,self.CEStoreF4_Text_Rect),(self.CEStoreF5_Rect,self.CEStoreF5_Text,self.CEStoreF5_Text_Rect)])
            if self.CEStoreF1_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("CEStoreF1",self.Kanto.Elevator_CEStoreF1Spawn)
                        self.Clicked = False
            if self.CEStoreF2_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("CEStoreF2",self.Kanto.Elevator_CEStoreF2Spawn)
                        self.Clicked = False
            if self.CEStoreF3_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("CEStoreF3",self.Kanto.Elevator_CEStoreF3Spawn)
                        self.Clicked = False
            if self.CEStoreF4_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("CEStoreF4",self.Kanto.Elevator_CEStoreF4Spawn)
                        self.Clicked = False
            if self.CEStoreF5_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("CEStoreF5",self.Kanto.Elevator_CEStoreF5Spawn)
                        self.Clicked = False

    def SafariZoneSteps(self):
        #Track Player steps troughout Safari Zone
        if self.Player.IsWalking():
            if self.Safari_Steps > 0:self.Safari_Steps -= 1
            if self.Safari_Steps == 0 or self.Safari_Balls == 0:
                self.Player_Pause = True
                self.Events.Dialouge("Time's Up!")
    
    def Safari_End(self):
        self.Safari_Balls = 30
        self.Safari_Steps = 10000

    def RocketBaseElevator(self):
        self.RBaseF1_Rect,self.RBaseF1_Text,self.RBaseF1_Text_Rect = self.Make_Option_Button(pygame.Rect(0,0,self.MenuBar.width,100),"F1")
        self.RBaseF2_Rect,self.RBaseF2_Text,self.RBaseF2_Text_Rect = self.Make_Option_Button(pygame.Rect(0,300,self.MenuBar.width,100),"F2")
        self.RBaseF4_Rect,self.RBaseF4_Text,self.RBaseF4_Text_Rect = self.Make_Option_Button(pygame.Rect(0,600,self.MenuBar.width,100),"F4")
        if self.Player.rect.colliderect(self.Kanto.RBaseElevator_Menu):
            self.Show_Options1([(self.RBaseF1_Rect,self.RBaseF1_Text,self.RBaseF1_Text_Rect),(self.RBaseF2_Rect,self.RBaseF2_Text,self.RBaseF2_Text_Rect),(self.RBaseF4_Rect,self.RBaseF4_Text,self.RBaseF4_Text_Rect)])
            if self.RBaseF1_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("Rocket HideoutF1",self.Kanto.Elevator_RocketBaseF1Spawn)
                        self.Clicked = False
            if self.RBaseF2_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("Rocket HideoutF2",self.Kanto.Elevator_RocketBaseF2Spawn)
                        self.Clicked = False
            if self.RBaseF4_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("Rocket HideoutF4",self.Kanto.Elevator_RocketBaseF4Spawn)
                        self.Clicked = False

    def SilCoElevator(self):
        x = 50
        self.SilCoF1_Rect,self.SilCoF1_Text,self.SilCoF1_Text_Rect = self.Make_Option_Button(pygame.Rect(0,0,self.MenuBar.width,x),"F1")
        self.SilCoF2_Rect,self.SilCoF2_Text,self.SilCoF2_Text_Rect = self.Make_Option_Button(pygame.Rect(0,50,self.MenuBar.width,x),"F2")
        self.SilCoF3_Rect,self.SilCoF3_Text,self.SilCoF3_Text_Rect = self.Make_Option_Button(pygame.Rect(0,100,self.MenuBar.width,x),"F3")
        self.SilCoF4_Rect,self.SilCoF4_Text,self.SilCoF4_Text_Rect = self.Make_Option_Button(pygame.Rect(0,150,self.MenuBar.width,x),"F4")
        self.SilCoF5_Rect,self.SilCoF5_Text,self.SilCoF5_Text_Rect = self.Make_Option_Button(pygame.Rect(0,200,self.MenuBar.width,x),"F5")
        self.SilCoF6_Rect,self.SilCoF6_Text,self.SilCoF6_Text_Rect = self.Make_Option_Button(pygame.Rect(0,250,self.MenuBar.width,x),"F6")
        self.SilCoF7_Rect,self.SilCoF7_Text,self.SilCoF7_Text_Rect = self.Make_Option_Button(pygame.Rect(0,300,self.MenuBar.width,x),"F7")
        self.SilCoF8_Rect,self.SilCoF8_Text,self.SilCoF8_Text_Rect = self.Make_Option_Button(pygame.Rect(0,350,self.MenuBar.width,x),"F8")
        self.SilCoF9_Rect,self.SilCoF9_Text,self.SilCoF9_Text_Rect = self.Make_Option_Button(pygame.Rect(0,400,self.MenuBar.width,x),"F9")
        self.SilCoF10_Rect,self.SilCoF10_Text,self.SilCoF10_Text_Rect = self.Make_Option_Button(pygame.Rect(0,450,self.MenuBar.width,x),"F10")
        self.SilCoF11_Rect,self.SilCoF11_Text,self.SilCoF11_Text_Rect = self.Make_Option_Button(pygame.Rect(0,500,self.MenuBar.width,x),"F11")
        if self.Player.rect.colliderect(self.Kanto.SilCoElevatorMenu):
            self.Show_Options1([(self.SilCoF1_Rect,self.SilCoF1_Text,self.SilCoF1_Text_Rect),(self.SilCoF2_Rect,self.SilCoF2_Text,self.SilCoF2_Text_Rect),(self.SilCoF3_Rect,self.SilCoF3_Text,self.SilCoF3_Text_Rect),(self.SilCoF4_Rect,self.SilCoF4_Text,self.SilCoF4_Text_Rect),(self.SilCoF5_Rect,self.SilCoF5_Text,self.SilCoF5_Text_Rect),
            (self.SilCoF6_Rect,self.SilCoF6_Text,self.SilCoF6_Text_Rect),(self.SilCoF7_Rect,self.SilCoF7_Text,self.SilCoF7_Text_Rect),(self.SilCoF8_Rect,self.SilCoF8_Text,self.SilCoF8_Text_Rect),(self.SilCoF9_Rect,self.SilCoF9_Text,self.SilCoF9_Text_Rect),(self.SilCoF10_Rect,self.SilCoF10_Text,self.SilCoF10_Text_Rect),
            (self.SilCoF11_Rect,self.SilCoF11_Text,self.SilCoF11_Text_Rect)])
            if self.SilCoF1_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("Silph Co. F1",self.Kanto.SilCoE_SilCoF1Spawn)
                        self.Clicked = False
            if self.SilCoF2_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("Silph Co. F2",self.Kanto.SilCoE_SilCoF2Spawn)
                        self.Clicked = False
            if self.SilCoF3_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("Silph Co. F3",self.Kanto.SilCoE_SilCoF3Spawn)
                        self.Clicked = False
            if self.SilCoF4_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("Silph Co. F4",self.Kanto.SilCoE_SilCoF4Spawn)
                        self.Clicked = False
            if self.SilCoF5_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("Silph Co. F5",self.Kanto.SilCoE_SilCoF5Spawn)
                        self.Clicked = False
            if self.SilCoF6_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("Silph Co. F6",self.Kanto.SilCoE_SilCoF6Spawn)
                        self.Clicked = False
            if self.SilCoF7_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("Silph Co. F7",self.Kanto.SilCoE_SilCoF7Spawn)
                        self.Clicked = False
            if self.SilCoF8_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("Silph Co. F8",self.Kanto.SilCoE_SilCoF8Spawn)
                        self.Clicked = False
            if self.SilCoF9_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("Silph Co. F9",self.Kanto.SilCoE_SilCoF9Spawn)
                        self.Clicked = False
            if self.SilCoF10_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("Silph Co. F10",self.Kanto.SilCoE_SilCoF10Spawn)
                        self.Clicked = False
            if self.SilCoF11_Rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Player_Spawn("Silph Co. F11",self.Kanto.SilCoE_SilCoF11Spawn)
                        self.Clicked = False

    def PCItemsUpdate(self):
        Rect = pygame.Rect(0,0,100,100)
        self.PC_Items.clear()
        self.Bag.clear()
        for Index,items in enumerate(self.Player.PC_Items[self.Player.PCItemsIndex]):
            if Index < 5:
                y = 160
            elif 5 <= Index < 10:
                y = 320
                Index -= 5
            elif 10 <= Index < 15:
                y = 480
                Index -= 10
            elif 15 <= Index < 20:
                y = 640
                Index -= 15
            Rect.topleft = ((800//20 + 130)*Index,y)
            Text_Surf = self.Events.Game_font.render(items[0],True,"Black")
            Text_Rect = Text_Surf.get_rect(center= Rect.center)
            Amount_surf = self.Events.Game_font.render(f"x{items[1]}",True,"Black")
            Amount_rect = Amount_surf.get_rect(midbottom = Rect.midbottom)
            self.PC_Items.append([pygame.Rect(Rect.topleft,(100,100)),Text_Surf,Text_Rect,Amount_surf,Amount_rect,items[0]])
        
        for Index,items in enumerate(self.Player.Bag):
            if Index < 5:
                y = 160
            elif 5 <= Index < 10:
                y = 320
                Index -= 5
            elif 10 <= Index < 15:
                y = 480
                Index -= 10
            elif 15 <= Index < 20:
                y = 640
                Index -= 15
            Rect.topleft = ((800//20 + 130)*Index,y)
            Text_Surf = self.Events.Game_font.render(items[0],True,"Black")
            Text_Rect = Text_Surf.get_rect(center= Rect.center)
            Amount_surf = self.Events.Game_font.render(f"x{items[1]}",True,"Black")
            Amount_rect = Amount_surf.get_rect(midbottom = Rect.midbottom)
            self.Bag.append((pygame.Rect(Rect.topleft,(100,100)),Text_Surf,Text_Rect,Amount_surf,Amount_rect,items[0]))

    def Badge_Display_update(self):
        self.Badges.clear()
        Rect = pygame.Rect(0,0,100,100) 
        Color = ""
        y = 0
        for Index,badge in enumerate(self.Player.Badges):
            org_Index = Index
            if Index < 4:y = 350
            if Index >= 4:
                y = 500
                Index -= 4
            Rect.topleft = ((800//4)*(Index),y)
            Text_Surf = self.Events.Game_font.render(badge,True,"Black")
            Text_Rect = Text_Surf.get_rect(center= Rect.center)
            if self.Player.Badges[badge]:
                Color = (0,255,0)
            if not self.Player.Badges[badge]:
                Color = (255,0,0)
            self.Badges.append((pygame.Rect(Rect.topleft,(100,100)),Text_Surf,Text_Rect,Color,org_Index))

    def BattleDialouge(self,Text1:str,Text2:str = "",Text3:str = "",Text4:str = "",Next = True):
        self.Text1 = self.Events.Game_font.render(Text1,True,"Black")
        self.Text1_rect = self.Text1.get_rect(topleft = (self.BattleBox.topleft[0] + 5,self.BattleBox.topleft[1] + 10))
        self.Text2 = self.Events.Game_font.render(Text2,True,"Black")
        self.Text2_rect = self.Text2.get_rect(topleft = self.Text1_rect.bottomleft)
        self.Text3 = self.Events.Game_font.render(Text3,True,"Black")
        self.Text3_rect = self.Text3.get_rect(topleft = self.Text2_rect.bottomleft)
        self.Text4 = self.Events.Game_font.render(Text4,True,"Black")
        self.Text4_rect = self.Text3.get_rect(topleft = self.Text3_rect.bottomleft)
        pygame.draw.rect(SCREEN,"White",self.BattleBox)
        pygame.draw.rect(SCREEN,"Black",self.BattleBox,3)
        SCREEN.blit(self.Text1,self.Text1_rect)
        SCREEN.blit(self.Text2,self.Text2_rect)
        SCREEN.blit(self.Text3,self.Text3_rect)
        SCREEN.blit(self.Text4,self.Text4_rect)
        if Next:
            Next_Text = self.Events.Game_font.render("Shift to go on",True,"Black")
            Next_Text_rect = Next_Text.get_rect(bottomright = (self.BattleBox.bottomright[0],self.BattleBox.centery + 30))
            SCREEN.blit(Next_Text,Next_Text_rect)

    def BattleDecison(self):
        pygame.draw.rect(SCREEN,"White",self.Yes_rect)
        pygame.draw.rect(SCREEN,"White",self.No_rect)
        SCREEN.blit(self.Yes_text,self.Yes_text_rect)
        SCREEN.blit(self.No_text,self.No_text_rect)
        self.CC_Yes()
        self.CC_No()

    def PlayerBattleBox(self):
        pygame.draw.rect(SCREEN,"White",self.BattleBox)
        pygame.draw.rect(SCREEN,"Black",self.BattleBox,5)
        pygame.draw.line(SCREEN,"Black",(self.BattleBox.centerx + 10,self.BattleBox.y),(self.BattleBox.centerx + 10,self.BattleBox.bottomright[1]),5)
        if True not in (self.Fight,self.BattlePokemon,self.BattleItems,self.Run) and self.BattlePlayerPoke.Attack == '' and self.Opponents_Pokemon.Attack == '' and not self.Catching[0] and self.BattlePlayerPoke.MoveTurn == "":
            if (self.BattlePlayerPoke.IdleTurns > 0 or self.BattlePlayerPoke.IdleMove != '') or self.BattlePlayerPoke.TrappedTurns > 0:
                self.BattlePlayerPoke.Attack = self.BattlePlayerPoke.IdleMove
                self.Fight = True  
            self.Show_Options1([(self.Fight_Rect,self.Fight_Text,self.Fight_Text_Rect),(self.BattleItems_Rect,self.BattleItems_Text,self.BattleItems_Text_Rect),(self.BattlePokemon_Rect,self.BattlePokemon_Text,self.BattlePokemon_Text_Rect),(self.Run_Rect,self.Run_Text,self.Run_Text_Rect)],"White")
            self.CC_Battle_Options()
        if self.Fight:
            if self.BattlePlayerPoke.Attack == "":
                if self.BattlePlayerPoke.RageOn:
                    self.BattlePlayerPoke.Attack = "Rage"
                elif (self.BattlePlayerPoke.Move1pp == 0 or self.BattlePlayerPoke.DisabledMove == self.BattlePlayerPoke.Moves[0]) and (self.BattlePlayerPoke.Move2pp == 0 or self.BattlePlayerPoke.Move2pp == "--" or self.BattlePlayerPoke.DisabledMove == self.BattlePlayerPoke.Moves[1]) and (self.BattlePlayerPoke.Move3pp == 0 or self.BattlePlayerPoke.Move3pp == "--" or self.BattlePlayerPoke.DisabledMove == self.BattlePlayerPoke.Moves[2]) and (self.BattlePlayerPoke.Move4pp == 0 or self.BattlePlayerPoke.Move4pp == "--" or self.BattlePlayerPoke.DisabledMove == self.BattlePlayerPoke.Moves[3]):
                    self.BattlePlayerPoke.Attack = "Struggle"

    def CC_Battle_Options(self):
        mouse_pos = pygame.mouse.get_pos()
        if self.Fight_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:self.Clicked = True
            else:
                if self.Clicked:
                    self.Fight = True
                    self.Clicked= False
        
        if self.BattlePokemon_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:self.Clicked = True
            else:
                if self.Clicked:
                    self.BattlePokemon = True
                    self.Clicked= False
        
        if self.BattleItems_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:self.Clicked = True
            else:
                if self.Clicked:
                    self.BattleItems = True
                    self.Clicked= False
        
        if self.Run_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:self.Clicked = True
            else:
                if self.Clicked:
                    self.Run = True
                    self.Clicked= False

    def Fight_Options(self):
        mouse_pos = pygame.mouse.get_pos()
        if self.UMove1_Rect.collidepoint(mouse_pos):
            self.MoveType = self.Events.Game_font.render(f"Type/{self.BattlePlayerPoke.Move1Type}",True,"Black")
            self.MovePP = self.Events.Game_font.render(f"{self.BattlePlayerPoke.Move1pp}/{self.BattlePlayerPoke.MaxMove1pp}",True,"Black")
            if self.BattlePlayerPoke.DisabledMove == self.BattlePlayerPoke.Moves[0]:
                self.MovePP = self.Events.Game_font.render(f"Disabled",True,"Black")
            SCREEN.blit(self.MoveType,self.MoveType_rect)
            SCREEN.blit(self.MovePP,self.MovePP_rect)
            if pygame.mouse.get_pressed()[0]: 
                self.Clicked = True
            else:
                if self.Clicked:
                    if self.BattlePlayerPoke.Moves[0] != '-' and self.BattlePlayerPoke.DisabledMove != self.BattlePlayerPoke.Moves[0] and self.BattlePlayerPoke.Move1pp > 0: 
                        self.BattlePlayerPoke.Attack = self.BattlePlayerPoke.Moves[0]
                    self.Clicked = False        
        if self.UMove2_Rect.collidepoint(mouse_pos):
            self.MoveType = self.Events.Game_font.render(f"Type/{self.BattlePlayerPoke.Move2Type}",True,"Black")
            self.MovePP = self.Events.Game_font.render(f"{self.BattlePlayerPoke.Move2pp}/{self.BattlePlayerPoke.MaxMove2pp}",True,"Black")
            if self.BattlePlayerPoke.DisabledMove == self.BattlePlayerPoke.Moves[1]:
                self.MovePP = self.Events.Game_font.render(f"Disabled",True,"Black")
            SCREEN.blit(self.MoveType,self.MoveType_rect)
            SCREEN.blit(self.MovePP,self.MovePP_rect)
            if pygame.mouse.get_pressed()[0]: 
                self.Clicked = True
            else:
                if self.Clicked:
                    if self.BattlePlayerPoke.Moves[1] != '-' and self.BattlePlayerPoke.DisabledMove != self.BattlePlayerPoke.Moves[1] and self.BattlePlayerPoke.Move2pp > 0: 
                        self.BattlePlayerPoke.Attack = self.BattlePlayerPoke.Moves[1]
                    self.Clicked = False        
        if self.UMove3_Rect.collidepoint(mouse_pos):
            self.MoveType = self.Events.Game_font.render(f"Type/{self.BattlePlayerPoke.Move3Type}",True,"Black")
            self.MovePP = self.Events.Game_font.render(f"{self.BattlePlayerPoke.Move3pp}/{self.BattlePlayerPoke.MaxMove3pp}",True,"Black")
            if self.BattlePlayerPoke.DisabledMove == self.BattlePlayerPoke.Moves[2]:
                self.MovePP = self.Events.Game_font.render(f"Disabled",True,"Black")
            SCREEN.blit(self.MoveType,self.MoveType_rect)
            SCREEN.blit(self.MovePP,self.MovePP_rect)
            if pygame.mouse.get_pressed()[0]: 
                self.Clicked = True
            else:
                if self.Clicked:
                   if self.BattlePlayerPoke.Moves[2] != '-'and self.BattlePlayerPoke.DisabledMove != self.BattlePlayerPoke.Moves[2] and self.BattlePlayerPoke.Move3pp > 0: 
                        self.BattlePlayerPoke.Attack = self.BattlePlayerPoke.Moves[2]
                   self.Clicked = False        
        if self.UMove4_Rect.collidepoint(mouse_pos):
            self.MoveType = self.Events.Game_font.render(f"Type/{self.BattlePlayerPoke.Move4Type}",True,"Black")
            self.MovePP = self.Events.Game_font.render(f"{self.BattlePlayerPoke.Move4pp}/{self.BattlePlayerPoke.MaxMove4pp}",True,"Black")
            if self.BattlePlayerPoke.DisabledMove == self.BattlePlayerPoke.Moves[3]:
                self.MovePP = self.Events.Game_font.render(f"Disabled",True,"Black")
            SCREEN.blit(self.MoveType,self.MoveType_rect)
            SCREEN.blit(self.MovePP,self.MovePP_rect)
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if self.BattlePlayerPoke.Moves[3] != '-'and self.BattlePlayerPoke.DisabledMove != self.BattlePlayerPoke.Moves[3] and self.BattlePlayerPoke.Move4pp > 0: 
                        self.BattlePlayerPoke.Attack = self.BattlePlayerPoke.Moves[3]
                    self.Clicked = False

        if self.FightBack_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]: self.Clicked = True
            else:
                if self.Clicked:
                    self.Fight,self.Clicked = False,False

    def Cliff_Blocks(self):
        for Block in self.Kanto.CliffBlocks:
            if Block.colliderect(self.Player.rect):
                if self.Player.Direction.y < 0 and self.Player.rect.bottom - 2!=  Block.top and self.Player.rect.right -2!= Block.left and self.Player.rect.left +2!= Block.right:
                    self.Player.rect.top = Block.bottom
        
        for Block in self.Kanto.CliffBlocks:
            if Block.colliderect(self.Player.rect):
                if self.Player.Direction.x < 0 and self.Player.rect.right -2!= Block.left and self.Player.rect.bottom - 2!=  Block.top and self.Player.rect.top + 2!= Block.bottom:
                    self.Player.rect.left = Block.right
        
        for Block in self.Kanto.CliffBlocks2:
            if Block.colliderect(self.Player.rect):
                if self.Player.Direction.y > 0 and self.Player.rect.top + 2!= Block.bottom and self.Player.rect.right -2!= Block.left and self.Player.rect.left +2!= Block.right:
                    self.Player.rect.bottom = Block.top
        
        for Block in self.Kanto.CliffBlocks2:
            if Block.colliderect(self.Player.rect):
                if self.Player.Direction.x > 0 and self.Player.rect.left +2!= Block.right and self.Player.rect.bottom - 2!= Block.top and self.Player.rect.top + 2!= Block.bottom:
                    self.Player.rect.right = Block.left

    def PokemonTurnEffects(self,Pokemon:str):
        Text1 = ''
        if Pokemon == "Player":
            if Two_D_ListCheck(self.BattlePlayerPoke.MyField,"Leech Seed"):
                self.BattlePlayerPoke.HP -= self.BattlePlayerPoke.MAXHP * (1/16)
                self.Opponents_Pokemon.Heal(self.BattlePlayerPoke.MAXHP * (1/16))
                Text1 = f"{self.Opponents_Pokemon.Name}'s seeds drained {self.BattlePlayerPoke.NickName}'s HP"
            if self.BattlePlayerPoke.Status == "BRN":
                self.BattlePlayerPoke.HP -= self.BattlePlayerPoke.MAXHP * (1/16)
                Text1 = f"{self.BattlePlayerPoke.NickName} took burn damage"
            if self.BattlePlayerPoke.Status == "PSN":
                if self.BattlePlayerPoke.ToxicTurn == 0:self.BattlePlayerPoke.HP -= self.BattlePlayerPoke.MAXHP * (1/16)
                else:
                    self.BattlePlayerPoke.HP -= (self.BattlePlayerPoke.MAXHP * (1/16)) * self.BattlePlayerPoke.ToxicTurn
                    self.BattlePlayerPoke.ToxicTurn += 1
                Text1 = f"{self.BattlePlayerPoke.NickName} took poison damage"
        else:
            if Two_D_ListCheck(self.Opponents_Pokemon.MyField,"Leech Seed"):
                self.Opponents_Pokemon.HP -= self.Opponents_Pokemon.MAXHP * (1/16)
                self.BattlePlayerPoke.Heal(self.BattlePlayerPoke.MAXHP * (1/16))
                Text1 = f"{self.BattlePlayerPoke.NickName}'s seeds drained {self.Opponents_Pokemon.Name}'s HP"
            if self.Opponents_Pokemon.Status == "BRN":
                self.Opponents_Pokemon.HP -= self.Opponents_Pokemon.MAXHP * (1/16)
                Text1 = f"{self.Opponents_Pokemon.NickName} took burn damage"
            if self.Opponents_Pokemon.Status == "PSN":
                if self.Opponents_Pokemon.ToxicTurn == 0:self.Opponents_Pokemon.HP -= self.Opponents_Pokemon.MAXHP * (1/16)
                else:
                    self.Opponents_Pokemon.HP -= (self.Opponents_Pokemon.MAXHP * (1/16)) * self.Opponents_Pokemon.ToxicTurn
                    self.Opponents_Pokemon.ToxicTurn += 1
                Text1 = f"{self.Opponents_Pokemon.NickName} took poison damage"
        return Text1

    def Remove_Enemy_Bag(self,ItemName:str,ItemAmount:int,Bag:list):
        for i,Items in enumerate(Bag):
            if Items[0] == ItemName and Items[1] >= ItemAmount:
                Bag[i][1] -= ItemAmount
        return Bag

    def TrainerBattle(self,Other_Pokes:list[Pokemon],Trainer:str,WinText:list[str],LoseText:list[str],Trainer_img:pygame.Surface,Money:int,Bag):
        OPoke_Index = 0
        self.Opponents_Pokemon = Other_Pokes[OPoke_Index]
        self.AddPokeDex(self.Opponents_Pokemon.Name)
        self.Opponents_Pokemon.BattleRole = "Enemy"
        OPoke_Name = self.Events.Game_Font2.render(self.Opponents_Pokemon.Name,True,"Black")
        OPoke_Name_rect = OPoke_Name.get_rect(topleft = (30,10))
        OPokeHP = self.Events.Game_font.render("HP:",True,"Black")
        OPokeHP_rect = OPokeHP.get_rect(topleft = (110,50))
        OPokeLV = self.Events.Game_Font2.render(f"LV:{self.Opponents_Pokemon.Level}",True,"Black")
        OPokeLV_rect = OPokeLV.get_rect(topleft = (OPoke_Name_rect.topright[0] + 30,OPoke_Name_rect.y))
        UPokeHP = self.Events.Game_font.render("HP:",True,"Black")
        Trainer_Intro = True
        Pokemon_Intro = False
        Get_Moves = False
        Pokemon_Intro_A = False
        Text2 = ''
        Trainer_Bag = Bag
        Speed_Test = False
        self.Player_Turn = [1,"None"]
        Poke_Animation = False
        self.Enemy_Turn = [0,"None"]
        Pokemon_Intro_B = False
        Battle = False
        Battle_Options = True
        Exp_Gain = True
        Exp_Gain_Aftermath_poke1 = False
        LearnedMovepoke1 = False
        Poke1EvolutionDescison = False
        LearnedMoveNewpoke1 = False
        Poke1Evolution = False
        NewPoke1Evolution = False
        Exp_Gain_Aftermath_poke2 = False
        LearnedMovepoke2 = False
        Poke2EvolutionDescison = False
        LearnedMoveNewpoke2 = False
        Poke2Evolution = False
        NewPoke2Evolution = False
        Exp_Gain_Aftermath_poke3 = False
        LearnedMovepoke3 = False
        Poke3EvolutionDescison = False
        LearnedMoveNewpoke3 = False
        Poke3Evolution = False
        NewPoke3Evolution = False
        Exp_Gain_Aftermath_poke4 = False
        LearnedMovepoke4 = False
        Poke4EvolutionDescison = False
        LearnedMoveNewpoke4 = False
        Poke4Evolution = False
        NewPoke4Evolution = False
        Exp_Gain_Aftermath_poke5 = False
        LearnedMovepoke5 = False
        Poke5EvolutionDescison = False
        LearnedMoveNewpoke5 = False
        Poke5Evolution = False
        NewPoke5Evolution = False
        Exp_Gain_Aftermath_poke6 = False
        LearnedMovepoke6 = False
        Poke6EvolutionDescison = False
        LearnedMoveNewpoke6 = False
        Poke6Evolution = False
        NewPoke6Evolution = False
        self.Particaptionlist = []
        Battle_Over = False
        Battle_Aftermath = False
        Exit = False
        Bring_Out = False
        TurnEffects = False
        TurnEffectsAftermath = False
        Player_Next_Pokemon = False
        Player_lost = False
        Rematch = False
        TurnAftermath1 = ''
        TurnAftermath2 = ''
        UIndex= 9
        Parlyz_Check = False
        Move_Start = False
        ParaEffect = random.randint(1,4)
        Confusion_Effect = False
        Move_Call = False
        Confusion_Check = False
        Confusion_Aftermath = False
        EnemyPokemon = False
        EnemyNextPokemon = Pokemon
        ChangePokemonDesicion = False
        running = True
        Sleep_Check = True
        UTrap_Damage = 0
        OTrap_Damage = 0
        UAwake_Check = False
        Status_Check = False
        Battle_overp1 = False
        UAble_Check = False
        OAwake_Check = False
        OAble_Check = False
        UTrapped_Check = False
        OTrapped_Check = False
        Drained_HP = False
        Flinch_Check = False
        Disobey = []
        Obediance_Fail = False
        FRZ_Check = False
        UThawed = False
        OThawed = False
        Rage = False
        Obediance_Check = False
        Extra_Money = 0
        OSmack_Talk = False
        Trainer_rect = Trainer_img.get_rect(topleft = (565,36))
        if self.BattleStart:
            while self.Black_Screen.x <= SCREEN.get_width():
                self.Black_Screen.x += 10
                pygame.draw.rect(SCREEN,"Black",self.Black_Screen)
                pygame.display.update()
            self.Draw_Player = False
            for poke in self.Player.Pokemon:
                if poke.HP > 0:
                    poke.In_Battle = True
                    poke.Particaption = True
                    self.BattlePlayerPoke:Pokemon = poke
                    break
            UPoke_Name = self.Events.Game_Font2.render(self.BattlePlayerPoke.NickName,True,"Black")
            UPoke_Name_rect = UPoke_Name.get_rect(topleft = (475,306))
            UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
            UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
            UPokeHP = self.Events.Game_font.render("HP:",True,"Black")
            UPokeHP_rect = UPokeHP.get_rect(topleft = (UPoke_Name_rect.x,346))
            UPokeHP_Text = self.Events.Game_font.render(f"{self.BattlePlayerPoke.HP}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
            UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (530,370))
            self.UMove1_Rect,self.UMove1_Text,self.UMove1_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[0])
            self.UMove2_Rect,self.UMove2_Text,self.UMove2_Text_Rect = self.Make_Option_Button(pygame.Rect((258,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[1])
            self.UMove3_Rect,self.UMove3_Text,self.UMove3_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,695),(150,100)),self.BattlePlayerPoke.Moves[2])
            self.UMove4_Rect,self.UMove4_Text,self.UMove4_Text_Rect = self.Make_Option_Button(pygame.Rect((258,695),(150,100)),self.BattlePlayerPoke.Moves[3])
            while running:
                self.BattlePlayerPoke.EnemyBattlerect,self.Opponents_Pokemon.PlayerBattlerect = self.Opponents_Pokemon.EnemyBattlerect,self.BattlePlayerPoke.PlayerBattlerect
                for e in pygame.event.get():
                    if e.type == pygame.QUIT:
                        pygame.quit()
                        sys.exit()
                    if (self.BattlePokemon or self.Healing_Item[1]) and e.type == pygame.KEYDOWN:
                        if e.key == pygame.K_BACKSPACE: self.Back = True
                    if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                        if Trainer_Intro:
                            Trainer_Intro = False
                            Pokemon_Intro = True
                            Pokemon_Intro_A = True
                        elif Pokemon_Intro and Pokemon_Intro_A:
                            Pokemon_Intro_B = True
                            Pokemon_Intro_A = False
                        elif Pokemon_Intro and Pokemon_Intro_B:
                            Pokemon_Intro_B = False
                            Pokemon_Intro = False
                            Battle = True
                        elif Battle:
                            if self.Run: self.Run = False
                            elif TurnEffectsAftermath: TurnEffectsAftermath,Battle_Options = False,True
                            elif self.Player_Turn[1] == "Move Call":
                                if Sleep_Check:
                                    Sleep_Check = False
                                    self.Player_Turn[1] = "Battle Over?"
                                if Parlyz_Check:
                                    Parlyz_Check = False
                                    self.Player_Turn[1] = "Battle Over?"
                                    ParaEffect = random.randint(1,4)
                                if FRZ_Check:
                                    FRZ_Check = False
                                    self.Player_Turn[1] = "Battle Over?"
                                if Confusion_Check:
                                    if self.BattlePlayerPoke.Status2 == "Confused" and self.BattlePlayerPoke.ConfusionTimeLimit > 0:Confusion_Effect = True
                                    elif self.BattlePlayerPoke.Status2 == "Confused" and self.BattlePlayerPoke.ConfusionTimeLimit == 0:
                                        Flinch_Check = True
                                        self.BattlePlayerPoke.Status2 = ""
                                    Confusion_Check = False
                                elif self.BattlePlayerPoke.TrappedTurns > 0:
                                    self.BattlePlayerPoke.ExtraTargetHP = self.BattlePlayerPoke.HP - OTrap_Damage
                                    self.Player_Turn[1] = "T.HP animation"
                                elif Flinch_Check and self.BattlePlayerPoke.Attack == "Flinch":
                                    self.Player_Turn[1] = "Battle Over?"
                                    Flinch_Check = False
                                    self.BattlePlayerPoke.Attack = ""
                                    Battle_overp1 = True
                                elif Obediance_Fail:
                                    if Disobey[1] in (f"{self.BattlePlayerPoke.NickName} smells the roses",f"{self.BattlePlayerPoke.NickName} flipped you off"):
                                        self.Player_Turn[1] = "Move Aftermath"
                                        self.BattlePlayerPoke.AftermathText1,self.BattlePlayerPoke.AftermathText2,self.BattlePlayerPoke.AftermathText3 = "","",""
                                    elif Disobey[1] == f"{self.BattlePlayerPoke.NickName} instead used {self.BattlePlayerPoke.Attack}":
                                        self.BattlePlayerPoke.Get_Move(self.BattlePlayerPoke,self.Opponents_Pokemon)
                                        self.Opponents_Pokemon.TargetHP = self.Opponents_Pokemon.HP - self.BattlePlayerPoke.AttackDamage
                                        if True in (self.Opponents_Pokemon.Fly,self.Opponents_Pokemon.Dig) and self.BattlePlayerPoke.Attack not in self.BattlePlayerPoke.PokemonMoves.UnAffectedFlyMoves and self.BattlePlayerPoke.Attack not in self.BattlePlayerPoke.PokemonMoves.SelfStatChangingList:
                                            self.Opponents_Pokemon.TargetHP = self.Opponents_Pokemon.HP
                                            self.BattlePlayerPoke.MissedMove()
                                        self.Player_Turn[1] = "Move animation"
                                    elif Disobey[1] == f"{self.BattlePlayerPoke.NickName} took a nap":
                                        self.Player_Turn[1] = "Move Aftermath"
                                        self.BattlePlayerPoke.Status = "SLP"
                                        self.BattlePlayerPoke.SleepTimer = random.randint(2,8)
                                        self.BattlePlayerPoke.AftermathText1,self.BattlePlayerPoke.AftermathText2,self.BattlePlayerPoke.AftermathText3 = "","",""
                                    else:
                                        self.BattlePlayerPoke.ExtraTargetHP = self.BattlePlayerPoke.ConfusionEffect()
                                        self.Player_Turn[1] = "C.HP animation"
                                        self.BattlePlayerPoke.AftermathText1,self.BattlePlayerPoke.AftermathText2,self.BattlePlayerPoke.AftermathText3 = "","",""
                                    Obediance_Fail = False
                                elif Confusion_Aftermath:
                                    Confusion_Aftermath = False
                                    self.Player_Turn[1] = "C.HP animation"
                                elif Move_Call: 
                                    Move_Call = False
                                    ParaEffect = random.randint(1,4)
                                    if True in (self.Opponents_Pokemon.Fly,self.Opponents_Pokemon.Dig) and self.BattlePlayerPoke.Attack not in self.BattlePlayerPoke.PokemonMoves.UnAffectedFlyMoves and self.BattlePlayerPoke.Attack not in self.BattlePlayerPoke.PokemonMoves.SelfStatChangingList:
                                        self.Opponents_Pokemon.TargetHP = self.Opponents_Pokemon.HP
                                        self.BattlePlayerPoke.MissedMove()
                                    self.Player_Turn[1] = "Move animation"
                            elif self.Enemy_Turn[1] == "Move Call": 
                                if Sleep_Check:
                                    Sleep_Check = False
                                    self.Enemy_Turn[1] = "Battle Over?"
                                if Parlyz_Check:
                                    Parlyz_Check = False
                                    self.Enemy_Turn[1] = "Battle Over?"
                                    ParaEffect = random.randint(1,4)
                                if FRZ_Check:
                                    FRZ_Check = False
                                    self.Enemy_Turn[1] = "Battle Over?"
                                if Confusion_Check:
                                    if self.Opponents_Pokemon.Status2 == "Confused" and self.Opponents_Pokemon.ConfusionTimeLimit > 0:Confusion_Effect = True
                                    elif self.Opponents_Pokemon.Status2 == "Confused" and self.Opponents_Pokemon.ConfusionTimeLimit == 0:
                                        Flinch_Check = True
                                        self.Opponents_Pokemon.Status2 = ""
                                    Confusion_Check = False
                                elif self.Opponents_Pokemon.TrappedTurns > 0:
                                    self.Opponents_Pokemon.ExtraTargetHP = self.Opponents_Pokemon.HP - UTrap_Damage
                                    self.Enemy_Turn[1] = "T.HP animation"
                                elif Flinch_Check and self.Opponents_Pokemon.Attack == "Flinch":
                                    self.Enemy_Turn[1] = "Battle Over?"
                                    Flinch_Check = False
                                    self.Opponents_Pokemon.Attack = ""
                                    Battle_overp1 = True
                                elif Confusion_Aftermath:
                                    Confusion_Aftermath = False
                                    self.Enemy_Turn[1] = "C.HP animation"
                                elif Move_Call: 
                                    Move_Call = False
                                    if True in (self.BattlePlayerPoke.Fly,self.BattlePlayerPoke.Dig) and self.Opponents_Pokemon.Attack not in self.BattlePlayerPoke.PokemonMoves.UnAffectedFlyMoves and self.Opponents_Pokemon.Attack not in self.BattlePlayerPoke.PokemonMoves.SelfStatChangingList:
                                        self.BattlePlayerPoke.TargetHP = self.BattlePlayerPoke.HP
                                        self.Opponents_Pokemon.MissedMove()
                                    self.Enemy_Turn[1] = "Move animation"
                                    ParaEffect = random.randint(1,4)
                            elif self.Player_Turn[1] == "Move Aftermath": 
                                self.Player_Turn[1] = "Battle Over?"
                                if self.Opponents_Pokemon.LightScreenUp and self.BattlePlayerPoke.Attack != "" and self.BattlePlayerPoke.AttackDamage > 0 and Pokemon_Move_Type[self.BattlePlayerPoke.Attack] in self.BattlePlayerPoke.PokemonMoves.SpecialMoves:
                                    self.Opponents_Pokemon.LightScreenDamage += 1
                                if self.Opponents_Pokemon.ReflectUp and self.BattlePlayerPoke.Attack != "" and self.BattlePlayerPoke.AttackDamage > 0 and Pokemon_Move_Type[self.BattlePlayerPoke.Attack] not in self.BattlePlayerPoke.PokemonMoves.SpecialMoves:
                                    self.Opponents_Pokemon.ReflectDamage += 1
                                Battle_overp1 = True
                            elif self.Enemy_Turn[1] == "Move Aftermath": 
                                self.Enemy_Turn[1]  = "Battle Over?"
                                if self.BattlePlayerPoke.LightScreenUp and self.Opponents_Pokemon.Attack != "" and self.Opponents_Pokemon.AttackDamage > 0 and Pokemon_Move_Type[self.Opponents_Pokemon.Attack] in self.BattlePlayerPoke.PokemonMoves.SpecialMoves:
                                    self.BattlePlayerPoke.LightScreenDamage += 1
                                if self.BattlePlayerPoke.ReflectUp and self.Opponents_Pokemon.Attack != "" and self.Opponents_Pokemon.AttackDamage > 0 and Pokemon_Move_Type[self.Opponents_Pokemon.Attack] not in self.BattlePlayerPoke.PokemonMoves.SpecialMoves:
                                    self.BattlePlayerPoke.ReflectDamage += 1
                                Battle_overp1 = True
                            elif self.Player_Turn[1] == "Battle Over?" or self.Enemy_Turn[1] == "Battle Over?":
                                if UAwake_Check:
                                    UAwake_Check = False
                                elif OAwake_Check:
                                    OAwake_Check = False
                                elif UAble_Check:
                                    UAble_Check = False
                                elif OAble_Check:
                                    OAble_Check = False
                                elif UTrapped_Check:UTrapped_Check=False
                                elif OTrapped_Check:OTrapped_Check=False
                                elif UThawed:
                                    UThawed = False
                                    self.BattlePlayerPoke.Status = "OK"
                                elif OThawed:
                                    OThawed = False
                                    self.Opponents_Pokemon.Status = "OK"
                            elif Exp_Gain_Aftermath_poke1: 
                                Exp_Gain_Aftermath_poke1= False
                                LearnedMovepoke1 = True
                            elif LearnedMovepoke1:
                                if self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Learned":
                                    Poke1EvolutionDescison = True
                                    LearnedMovepoke1 = False
                                elif self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Choice":
                                    if self.MoveDesicion and not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        Poke1EvolutionDescison = True
                                        self.MoveDesicion = False
                                        LearnedMovepoke1 = False
                                        self.BattleYes,self.BattleNo = False,False
                                Text2 = ''
                            elif Poke1Evolution:
                                Poke1Evolution = False
                                self.Player.Pokemon[self.Particaptionlist[0]].Evoluation()
                                NewPoke1Evolution = True
                            elif NewPoke1Evolution:
                                NewPoke1Evolution = False
                                LearnedMoveNewpoke1 = True
                            elif LearnedMoveNewpoke1:
                                if self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Learned":
                                    LearnedMoveNewpoke1 = False
                                    Exp_Gain_Aftermath_poke2 = True
                                elif self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        self.MoveDesicion = False
                                        LearnedMoveNewpoke1 = False
                                        Exp_Gain_Aftermath_poke2 = True
                                        self.BattleYes,self.BattleNo = False,False
                                Text2 = ''
                            elif Exp_Gain_Aftermath_poke2: 
                                Exp_Gain_Aftermath_poke2= False
                                LearnedMovepoke2 = True
                            elif LearnedMovepoke2:
                                if self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Learned":
                                    Poke2EvolutionDescison = True
                                    LearnedMovepoke2 = False
                                elif self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        Poke2EvolutionDescison = True
                                        self.MoveDesicion = False
                                        LearnedMovepoke2 = False
                                        self.BattleYes,self.BattleNo = False,False
                                Text2 = ''
                            elif Poke2Evolution:
                                Poke2Evolution = False
                                self.Player.Pokemon[self.Particaptionlist[1]].Evoluation()
                                NewPoke2Evolution = True
                            elif NewPoke2Evolution:
                                NewPoke2Evolution = False
                                LearnedMoveNewpoke2 = True
                            elif LearnedMoveNewpoke2:
                                if self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Learned":
                                    LearnedMoveNewpoke2 = False
                                    Exp_Gain_Aftermath_poke3 = True   
                                elif self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        Exp_Gain_Aftermath_poke3 = True
                                        self.MoveDesicion = False
                                        LearnedMoveNewpoke2 = False
                                        self.BattleYes,self.BattleNo = False,False  
                                Text2 = '' 
                            elif Exp_Gain_Aftermath_poke3: 
                                Exp_Gain_Aftermath_poke3= False
                                LearnedMovepoke3 = True
                            elif LearnedMovepoke3:
                                if self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Learned":
                                    Poke3EvolutionDescison = True
                                    LearnedMovepoke3 = False
                                elif self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        Poke3EvolutionDescison = True
                                        self.MoveDesicion = False
                                        LearnedMovepoke3 = False
                                        self.BattleYes,self.BattleNo = False,False
                                Text2 = ''
                            elif Poke3Evolution:
                                Poke3Evolution = False
                                self.Player.Pokemon[self.Particaptionlist[2]].Evoluation()
                                NewPoke3Evolution = True
                            elif NewPoke3Evolution:
                                NewPoke3Evolution = False
                                LearnedMoveNewpoke3 = True
                            elif LearnedMoveNewpoke3:
                                if self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Learned":
                                    LearnedMoveNewpoke3 = False
                                    Exp_Gain_Aftermath_poke4 = True
                                elif self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        self.BattleYes,self.BattleNo = False,False
                                        LearnedMoveNewpoke3 = False
                                        self.MoveDesicion = False
                                        Exp_Gain_Aftermath_poke4 = True
                                Text2 = ''
                            elif Exp_Gain_Aftermath_poke4: 
                                Exp_Gain_Aftermath_poke4= False
                                LearnedMovepoke4 = True
                            elif LearnedMovepoke4:
                                if self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Learned":
                                    Poke4EvolutionDescison = True
                                    LearnedMovepoke4 = False
                                elif self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        self.BattleYes,self.BattleNo = False,False
                                        Poke4EvolutionDescison = True
                                        self.MoveDesicion = False
                                        LearnedMovepoke4 = False
                                Text2 = ''                             
                            elif Poke4Evolution:
                                Poke4Evolution = False
                                self.Player.Pokemon[self.Particaptionlist[3]].Evoluation()
                                NewPoke4Evolution = True
                            elif NewPoke4Evolution:
                                NewPoke4Evolution = False
                                LearnedMoveNewpoke4 = True
                            elif LearnedMoveNewpoke4:
                                if self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Learned":
                                    LearnedMoveNewpoke4 = False
                                    Exp_Gain_Aftermath_poke5 = True
                                elif self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        self.BattleYes,self.BattleNo = False,False
                                        self.MoveDesicion = False
                                        LearnedMoveNewpoke4 = False
                                        Exp_Gain_Aftermath_poke5 = True
                                Text2 = ''
                            elif Exp_Gain_Aftermath_poke5: 
                                Exp_Gain_Aftermath_poke5= False
                                LearnedMovepoke5 = True
                            elif LearnedMovepoke5:
                                if self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Learned":
                                    Poke5EvolutionDescison = True
                                    LearnedMovepoke5 = False
                                elif self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        self.BattleYes,self.BattleNo = False,False
                                        Poke5EvolutionDescison = True
                                        self.MoveDesicion = False
                                        LearnedMovepoke5 = False
                                Text2 = ''
                            elif Poke5Evolution:
                                Poke5Evolution = False
                                self.Player.Pokemon[self.Particaptionlist[4]].Evoluation()
                                NewPoke5Evolution = True
                            elif NewPoke5Evolution:
                                NewPoke5Evolution = False
                                LearnedMoveNewpoke5 = True
                            elif LearnedMoveNewpoke5:
                                if self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Learned":
                                    LearnedMoveNewpoke5 = False
                                    Exp_Gain_Aftermath_poke6 = True
                                elif self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        self.BattleYes,self.BattleNo = False,False
                                        LearnedMoveNewpoke5 = False
                                        self.MoveDesicion = False
                                        if self.Opponents_Pokemon.HP <= 0 and self.BattlePlayerPoke.HP > 0:Exp_Gain_Aftermath_poke6 = True
                                        else:EnemyPokemon = True
                                Text2 = ''
                            elif Exp_Gain_Aftermath_poke6: 
                                Exp_Gain_Aftermath_poke6= False
                                LearnedMovepoke6 = True
                            elif LearnedMovepoke6:
                                if self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Learned":
                                    LearnedMovepoke6 = False
                                    Poke6EvolutionDescison = True
                                elif self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        self.BattleYes,self.BattleNo = False,False
                                        self.MoveDesicion = False
                                        LearnedMovepoke6 = False
                                        Poke6EvolutionDescison = True
                                Text2 = ''
                            elif Poke6Evolution:
                                Poke6Evolution = False
                                self.Player.Pokemon[self.Particaptionlist[5]].Evoluation()
                                NewPoke6Evolution = True
                            elif NewPoke6Evolution:
                                NewPoke6Evolution = False
                                LearnedMoveNewpoke6 = True
                            elif LearnedMoveNewpoke6:
                                if self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Learned":
                                    LearnedMoveNewpoke6 = False
                                    EnemyPokemon = True
                                elif self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        self.BattleYes,self.BattleNo = False,False
                                        self.MoveDesicion = False
                                        LearnedMoveNewpoke6 = False
                                        EnemyPokemon = True
                                Text2 = ''
                            elif OSmack_Talk:
                                OSmack_Talk = False
                                if self.Events.Stage == "Oak Lab":
                                    self.BattleStart = False
                                    self.State_of_Battle = "Lost"
                                    running = False
                                else:Player_lost = True
                            elif Player_lost:
                                self.PlayerLost()
                                self.BattleStart = False
                                self.State_of_Battle = "Lost"
                                running = False
                            elif Bring_Out:
                                Rematch = True
                                Bring_Out = False
                                Player_Next_Pokemon = False
                            elif Battle_Aftermath: Exit = True
                SCREEN.fill("White")
                if Trainer_Intro:
                    ball_width = 0
                    self.BattleDialouge(f"{Trainer} wants to Fight!!",Text3="         Shift to go on")
                    SCREEN.blit(Trainer_img,Trainer_rect)
                    SCREEN.blit(self.Player_Back,self.Player_Back_rect)
                    pygame.draw.line(SCREEN,"Black",(470,401),(680,401),5)
                    pygame.draw.line(SCREEN,"Black",(678,371),(678,401),5)
                    for i,Ball in enumerate(self.PlayerPokeBallscenter):
                        if len(self.Player.Pokemon) >= i + 1: ball_width = 0
                        else: ball_width = 5
                        pygame.draw.circle(SCREEN,"Black",Ball,10,ball_width)
                    pygame.draw.line(SCREEN,"Black",(97,79),(287,79),5)
                    pygame.draw.line(SCREEN,"Black",(97,47),(97,79),5)
                    for i,Ball in enumerate(self.OPokeBallscenter):
                        if len(Other_Pokes) >= i + 1: ball_width = 0
                        else: ball_width = 5
                        pygame.draw.circle(SCREEN,"Black",Ball,10,ball_width)
                if Pokemon_Intro:
                    pygame.draw.line(SCREEN,"Black",(470,401),(680,401),5) #Player
                    pygame.draw.line(SCREEN,"Black",(678,371),(678,401),5)
                    SCREEN.blit(Trainer_img,Trainer_rect)
                    SCREEN.blit(self.Player_Back,self.Player_Back_rect)
                    pygame.draw.line(SCREEN,"Black",(97,79),(287,79),5) #Opponet
                    pygame.draw.line(SCREEN,"Black",(97,47),(97,79),5)
                    if Pokemon_Intro_A:
                        self.BattleDialouge(f"{Trainer} sent out {self.Opponents_Pokemon.Name}",Text3="         Shift to go on")
                        Trainer_rect.x += 1
                        if Trainer_rect.x > SCREEN.get_width():
                            SCREEN.blit(self.Opponents_Pokemon.Front_Img,self.Opponents_Pokemon.EnemyBattlerect)
                    elif Pokemon_Intro_B:
                        Trainer_rect.x = 900
                        self.BattleDialouge(f" Let's go {self.BattlePlayerPoke.NickName}",Text3="         Shift to go on")
                        SCREEN.blit(self.Opponents_Pokemon.Front_Img,self.Opponents_Pokemon.EnemyBattlerect)
                        self.Player_Back_rect.x -= 1
                        if self.Player_Back_rect.topright[0] < 0:
                            SCREEN.blit(self.BattlePlayerPoke.Back_Img,self.BattlePlayerPoke.PlayerBattlerect)
                if Battle:
                    self.Player_Back_rect.x = 55
                    pygame.draw.line(SCREEN,"Black",(470,401),(680,401),5) #Player
                    pygame.draw.line(SCREEN,"Black",(678,371),(678,401),5)
                    SCREEN.blit(UPoke_Name,UPoke_Name_rect)
                    SCREEN.blit(UPokeLV,UPokeLV_rect)
                    SCREEN.blit(UPokeHP,UPokeHP_rect)
                    UPokeHP_Text = self.Events.Game_font.render(f"{round(self.BattlePlayerPoke.HP)}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
                    UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (530,381))
                    self.BattlePlayerPoke.Draw_Healthar(UPokeHP_rect.centerx + 20,UPokeHP_rect.centery - 5)
                    UStatus_Text = self.Events.Game_font.render(self.BattlePlayerPoke.Status,True,"Black")
                    UStatus_Text_rect = UStatus_Text.get_rect(topleft = (629,347))
                    UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
                    UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
                    SCREEN.blit(UPokeHP_Text,UPokeHP_Text_rect)
                    if not self.BattlePlayerPoke.SubstituteOn:SCREEN.blit(self.BattlePlayerPoke.Back_Img,self.BattlePlayerPoke.PlayerBattlerect)
                    if self.BattlePlayerPoke.SubstituteOn:pygame.draw.rect(pygame.display.get_surface(),"cornsilk1",self.BattlePlayerPoke.PlayerBattlerect)
                    OStatus_Text = self.Events.Game_font.render(self.Opponents_Pokemon.Status,True,"Black")
                    OStatus_Text_rect = UStatus_Text.get_rect(topleft = (260,47))
                    self.BattlePlayerPoke.Movespp = [self.BattlePlayerPoke.Move1pp,self.BattlePlayerPoke.Move2pp,self.BattlePlayerPoke.Move3pp,self.BattlePlayerPoke.Move4pp]
                    if self.BattlePlayerPoke.Status != "OK" and self.BattlePlayerPoke.HP > 0:SCREEN.blit(UStatus_Text,UStatus_Text_rect)
                    if self.Opponents_Pokemon.Status != "OK" and self.Opponents_Pokemon.HP > 0:SCREEN.blit(OStatus_Text,OStatus_Text_rect)
                    if self.BattlePlayerPoke.Status == "OK":self.BattlePlayerPoke.ToxicTurn = 0
                    if self.Opponents_Pokemon.Status == "OK":self.Opponents_Pokemon.ToxicTurn = 0
                    if self.Opponents_Pokemon.HP > 0:
                        if not self.Opponents_Pokemon.SubstituteOn:
                            SCREEN.blit(self.Opponents_Pokemon.Front_Img,self.Opponents_Pokemon.EnemyBattlerect)
                        if self.Opponents_Pokemon.SubstituteOn:pygame.draw.rect(pygame.display.get_surface(),"cornsilk1",self.Opponents_Pokemon.EnemyBattlerect)
                        pygame.draw.line(SCREEN,"Black",(97,79),(287,79),5) #Opponet
                        pygame.draw.line(SCREEN,"Black",(97,47),(97,79),5)
                        SCREEN.blit(OPoke_Name,OPoke_Name_rect)
                        SCREEN.blit(OPokeLV,OPokeLV_rect)
                        SCREEN.blit(OPokeHP,OPokeHP_rect)
                        self.Opponents_Pokemon.Draw_Healthar(OPokeHP_rect.centerx + 20,OPokeHP_rect.centery - 5)
                    self.Opponents_Pokemon.BattleStat_update()
                    self.BattlePlayerPoke.BattleStat_update()
                    if TurnEffects:
                        self.BattlePlayerPoke.MovePriority,self.Opponents_Pokemon.MovePriority = 0,0
                        TurnAftermath1 = self.PokemonTurnEffects("Player")
                        TurnAftermath2 = self.PokemonTurnEffects("Enemy")
                        TurnEffects = False
                        TurnEffectsAftermath = True
                    if TurnEffectsAftermath:
                        if TurnAftermath1 == '' and TurnAftermath2 == '': TurnEffectsAftermath,Battle_Options = False,True
                        else: self.BattleDialouge(TurnAftermath1,TurnAftermath2)
                        if self.BattlePlayerPoke.HP <= 0: 
                            self.BattlePlayerPoke.HP = 0
                            Battle_Over = True
                            for poke in self.Player.Pokemon:
                                if poke.HP > 0: Player_Next_Pokemon = True
                        if self.Opponents_Pokemon.HP <= 0: 
                                Battle_Over = True
                                Exp_Gain = True
                    if Battle_Options:
                        if (self.Player_Turn[1] == "Done" and self.Enemy_Turn[1] == "Done") or (self.Player_Turn[1] == "" and self.Enemy_Turn[1] == "") or (self.Player_Turn[1] == "Waiting" and self.Enemy_Turn[1] == "Waiting") or (self.Player_Turn[1] == "None" and self.Enemy_Turn[1] == "None"):
                            self.PlayerBattleBox()
                        if self.Fight:
                            self.MoveType_rect = self.MoveType.get_rect(topleft = (519,556))
                            self.MovePP_rect = self.MovePP.get_rect(topleft = (519,600))
                            if self.BattlePlayerPoke.Attack == '' and self.BattlePlayerPoke.MoveTurn == "":
                                self.BattlePlayerPoke.AttackDamage = 0
                                self.Opponents_Pokemon.AttackDamage = 0
                                self.Show_Options1([(self.UMove1_Rect,self.UMove1_Text,self.UMove1_Text_Rect),(self.UMove2_Rect,self.UMove2_Text,self.UMove2_Text_Rect),(self.UMove3_Rect,self.UMove3_Text,self.UMove3_Text_Rect),(self.UMove4_Rect,self.UMove4_Text,self.UMove4_Text_Rect),(self.FightBack_Rect,self.FightBack_Text,self.FightBack_Text_Rect)],"White")
                                self.Fight_Options()
                                self.UMove1_Rect,self.UMove1_Text,self.UMove1_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[0])
                                self.UMove2_Rect,self.UMove2_Text,self.UMove2_Text_Rect = self.Make_Option_Button(pygame.Rect((258,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[1])
                                self.UMove3_Rect,self.UMove3_Text,self.UMove3_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,695),(150,100)),self.BattlePlayerPoke.Moves[2])
                                self.UMove4_Rect,self.UMove4_Text,self.UMove4_Text_Rect = self.Make_Option_Button(pygame.Rect((258,695),(150,100)),self.BattlePlayerPoke.Moves[3])
                            if self.BattlePlayerPoke.Attack != '': 
                                Get_Moves = True
                                self.Opponents_Pokemon.AftermathText1,self.Opponents_Pokemon.AftermathText2,self.Opponents_Pokemon.AftermathText3 = "","",""
                                self.BattlePlayerPoke.AftermathText1,self.BattlePlayerPoke.AftermathText2,self.BattlePlayerPoke.AftermathText3 = "","",""
                                self.BattlePlayerPoke.Get_Move(self.BattlePlayerPoke,self.Opponents_Pokemon)
                                if not self.BattlePlayerPoke.RageOn and self.BattlePlayerPoke.IdleTurns == 0:
                                    self.BattlePlayerPoke.PP_Control()
                                self.BattlePlayerPoke.MoveTurn = "Attack"
                                self.Fight = False                       
                        if self.BattlePokemon:
                            self.Pokemon_Menu()
                            if self.Switch and self.Player.GetRemainingPokemon() > 1:
                                if self.Pokemon1 and self.BattlePlayerPoke != self.Player.Pokemon[0]: UIndex= 0
                                elif self.Pokemon2 and self.BattlePlayerPoke != self.Player.Pokemon[1]: UIndex= 1
                                elif self.Pokemon3 and self.BattlePlayerPoke != self.Player.Pokemon[2]: UIndex= 2
                                elif self.Pokemon4 and self.BattlePlayerPoke != self.Player.Pokemon[3]: UIndex= 3
                                elif self.Pokemon5 and self.BattlePlayerPoke != self.Player.Pokemon[4]: UIndex= 4
                                elif self.Pokemon6 and self.BattlePlayerPoke != self.Player.Pokemon[5]: UIndex= 5
                                else: self.Switch = False
                                if UIndex != 9:
                                    self.BattlePlayerPoke.ToxicTurn = 0
                                    self.BattlePlayerPoke = self.Player.Pokemon[UIndex]
                                    self.Back = True
                                    self.BattlePlayerPoke.ToxicTurn = 0
                                    self.BattlePlayerPoke.FocusEnergy = False
                                    self.BattlePlayerPoke.RageOn = False
                                    self.BattlePlayerPoke.LightScreenUp = False
                                    self.BattlePlayerPoke.LightScreenDamage = 0
                                    self.BattlePlayerPoke.ReflectUp = False
                                    self.BattlePlayerPoke.ReflectDamage = 0
                                    self.BattlePlayerPoke.SubstituteOn = False
                                    self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6 = False,False,False,False,False,False
                                    self.BattlePlayerPoke.Particaption = True
                                    self.BattlePlayerPoke.In_Battle = True
                                    UPoke_Name = self.Events.Game_Font2.render(self.BattlePlayerPoke.NickName,True,"Black")
                                    UPoke_Name_rect = UPoke_Name.get_rect(topleft = (475,306))
                                    UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
                                    UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
                                    UPokeHP = self.Events.Game_font.render("HP:",True,"Black")
                                    UPokeHP_rect = UPokeHP.get_rect(topleft = (UPoke_Name_rect.x,346))
                                    UPokeHP_Text = self.Events.Game_font.render(f"{self.BattlePlayerPoke.HP}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
                                    UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (530,370))
                                    UPokeHP_Text = self.Events.Game_font.render(f"{round(self.BattlePlayerPoke.HP)}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
                                    UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (530,381))
                                    self.BattlePlayerPoke.Draw_Healthar(UPokeHP_rect.centerx + 20,UPokeHP_rect.centery - 5)
                                    UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
                                    UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
                                    self.UMove1_Rect,self.UMove1_Text,self.UMove1_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[0])
                                    self.UMove2_Rect,self.UMove2_Text,self.UMove2_Text_Rect = self.Make_Option_Button(pygame.Rect((258,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[1])
                                    self.UMove3_Rect,self.UMove3_Text,self.UMove3_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,695),(150,100)),self.BattlePlayerPoke.Moves[2])
                                    self.UMove4_Rect,self.UMove4_Text,self.UMove4_Text_Rect = self.Make_Option_Button(pygame.Rect((258,695),(150,100)),self.BattlePlayerPoke.Moves[3])
                                    self.Switch = False
                                    self.BattlePlayerPoke.MoveTurn = "Switch"
                                    self.MissedTurn()
                            if self.Back: 
                                self.BattlePokemon = False
                                self.Back = False
                        if self.BattleItems:
                            self.PlayerBag()
                            self.Use_Item_on_Pokemon()
                            if self.Back:
                                if self.Healing_Item[1]: self.Healing_Item[1] = False
                                else: self.BattleItems = False
                                self.Back = False
                        if not Move_Start:
                            if self.BattlePlayerPoke.MoveTurn != "":
                                if len(Trainer_Bag) > 0:
                                    if Two_D_ListCheck(Trainer_Bag,"Full Heal") and self.Opponents_Pokemon.Status != "OK":
                                        self.Opponents_Pokemon.Heal(0,Status=True)
                                        self.Opponents_Pokemon.MoveTurn = "Bag"
                                        self.Opponents_Pokemon.AftermathText1 = f"{Trainer} used a Full Heal"
                                        self.Opponents_Pokemon.AftermathText2 = f"{self.Opponents_Pokemon.Name} was healed from illness"
                                        Trainer_Bag = self.Remove_Enemy_Bag("Full Heal",1,Trainer_Bag)
                                    elif Two_D_ListCheck(Trainer_Bag,"X Defense") and self.Opponents_Pokemon.DEFCounter < 6:
                                        x = random.randint(1,4)
                                        if x == 2:
                                            self.Opponents_Pokemon.DEFCounter += 1
                                            self.Opponents_Pokemon.MoveTurn = "Bag"
                                            self.Opponents_Pokemon.AftermathText1 = f"{Trainer} used a X Defense"
                                            self.Opponents_Pokemon.AftermathText2 = f"{self.Opponents_Pokemon.Name} Defense rose"
                                            Trainer_Bag = self.Remove_Enemy_Bag("X Defense",1,Trainer_Bag)
                                        else:self.Opponents_Pokemon.MoveTurn = "Attack"
                                    elif Two_D_ListCheck(Trainer_Bag,"X Speed") and self.Opponents_Pokemon.SPEEDCounter < 6:
                                        x = random.randint(1,4)
                                        if x == 2:
                                            self.Opponents_Pokemon.SPEEDCounter += 1
                                            self.Opponents_Pokemon.MoveTurn = "Bag"
                                            self.Opponents_Pokemon.AftermathText1 = f"{Trainer} used a X Speed"
                                            self.Opponents_Pokemon.AftermathText2 = f"{self.Opponents_Pokemon.Name} Speed rose"
                                            Trainer_Bag = self.Remove_Enemy_Bag("X Speed",1,Trainer_Bag)
                                        else:self.Opponents_Pokemon.MoveTurn = "Attack"
                                    elif Two_D_ListCheck(Trainer_Bag,"X Attack") and self.Opponents_Pokemon.AtkCounter < 6:
                                        x = random.randint(1,4)
                                        if x == 2:
                                            self.Opponents_Pokemon.AtkCounter += 1
                                            self.Opponents_Pokemon.MoveTurn = "Bag"
                                            self.Opponents_Pokemon.AftermathText1 = f"{Trainer} used a X Attack."
                                            self.Opponents_Pokemon.AftermathText2 = f"{self.Opponents_Pokemon.Name} Attack rose"
                                            Trainer_Bag = self.Remove_Enemy_Bag("X Attack",1,Trainer_Bag)
                                        else:self.Opponents_Pokemon.MoveTurn = "Attack"
                                    elif Two_D_ListCheck(Trainer_Bag,"Guard Spec") and not self.Opponents_Pokemon.StatProtect:
                                        x = random.randint(1,4)
                                        if x == 2 :
                                            self.Opponents_Pokemon.StatProtect = True
                                            self.Opponents_Pokemon.MoveTurn = "Bag"
                                            self.Opponents_Pokemon.AftermathText1 = f"{Trainer} used a Guard Spec"
                                            Trainer_Bag = self.Remove_Enemy_Bag("Guard Spec",1,Trainer_Bag)
                                        else:self.Opponents_Pokemon.MoveTurn = "Attack"                               
                                    elif Two_D_ListCheck(Trainer_Bag,"Super Potion") and self.Opponents_Pokemon.HP <= self.Opponents_Pokemon.MAXHP * .10:
                                        x = random.randint(1,2)
                                        if x == 2:
                                            self.Opponents_Pokemon.Heal(50)
                                            self.Opponents_Pokemon.MoveTurn = "Bag"
                                            self.Opponents_Pokemon.AftermathText1 = f"{Trainer} used a Super Potion"
                                            Trainer_Bag = self.Remove_Enemy_Bag("Super Potion",1,Trainer_Bag)
                                        else:self.Opponents_Pokemon.MoveTurn = "Attack"    
                                    elif Two_D_ListCheck(Trainer_Bag,"Hyper Potion") and self.Opponents_Pokemon.HP <= self.Opponents_Pokemon.MAXHP * .20:
                                        x = random.randint(1,2)
                                        if x == 2:
                                            self.Opponents_Pokemon.Heal(200)
                                            self.Opponents_Pokemon.MoveTurn = "Bag"
                                            self.Opponents_Pokemon.AftermathText1 = f"{Trainer} used a Hyper Potion"
                                            Trainer_Bag = self.Remove_Enemy_Bag("Hyper Potion",1,Trainer_Bag)
                                        else:self.Opponents_Pokemon.MoveTurn = "Attack"    
                                    elif Two_D_ListCheck(Trainer_Bag,"Full Restore") and self.Opponents_Pokemon.HP <= self.Opponents_Pokemon.MAXHP * .20:
                                        x = random.randint(1,8)
                                        if x == 2:
                                            self.Opponents_Pokemon.Heal(999,Status=True)
                                            self.Opponents_Pokemon.MoveTurn = "Bag"
                                            self.Opponents_Pokemon.AftermathText1 = f"{Trainer} used a Full Restore"
                                            Trainer_Bag = self.Remove_Enemy_Bag("Full Restore",1,Trainer_Bag)
                                        else:self.Opponents_Pokemon.MoveTurn = "Attack"                                     
                                    else:
                                        self.Opponents_Pokemon.MoveTurn = "Attack"
                                else:
                                    self.Opponents_Pokemon.MoveTurn = "Attack"
                                Get_Moves = True
                                Move_Start = True
                                self.Fight = False
                        if self.Run:
                            self.BattleDialouge("You can't run from Trainer Battles!", Text3="       Shift to go on")
                        if Get_Moves:
                                if self.Opponents_Pokemon.MoveTurn == "Attack":
                                    if self.Opponents_Pokemon.IdleTurns > 0 or self.Opponents_Pokemon.IdleMove != '':
                                        self.Opponents_Pokemon.Attack = self.Opponents_Pokemon.IdleMove
                                    if self.Opponents_Pokemon.TrappedTurns > 0:
                                        self.Opponents_Pokemon.Attack = 'Trapped'
                                    if self.Opponents_Pokemon.Attack == "":
                                        self.Opponents_Pokemon.Attack = random.choice(self.Opponents_Pokemon.Moves)
                                        while self.Opponents_Pokemon.Attack == "-": 
                                            self.Opponents_Pokemon.Attack = random.choice(self.Opponents_Pokemon.Moves)
                                            if self.Opponents_Pokemon.Attack == self.Opponents_Pokemon.DisabledMove:
                                                self.Opponents_Pokemon.Attack == "-"
                                    if self.Opponents_Pokemon.Attack != "":
                                        self.Opponents_Pokemon.Get_Move(self.Opponents_Pokemon,self.BattlePlayerPoke)
                                Get_Moves,Speed_Test = False,True
                        if Speed_Test:
                            if self.BattlePlayerPoke.GetBattleSpeed() > self.Opponents_Pokemon.GetBattleSpeed():
                                self.Player_Turn[1] = "Move Call"
                                self.Player_Turn[0] = 1
                                self.Enemy_Turn[0] = 2
                                self.Enemy_Turn[1] = "Waiting"
                            elif self.BattlePlayerPoke.GetBattleSpeed() < self.Opponents_Pokemon.GetBattleSpeed():
                                self.Enemy_Turn[1] = "Move Call"
                                self.Enemy_Turn[0] = 1
                                self.Player_Turn[0] = 2
                                self.Player_Turn[1] = "Waiting"
                            elif self.BattlePlayerPoke.GetBattleSpeed() == self.Opponents_Pokemon.GetBattleSpeed():
                                if random.randint(0,1) == 0:
                                    self.Enemy_Turn[1] = "Move Call"
                                    self.Enemy_Turn[0] = 1
                                    self.Player_Turn[0] = 2
                                    self.Player_Turn[1] = "Waiting"
                                else:
                                    self.Player_Turn[1] = "Move Call"
                                    self.Player_Turn[0] = 1
                                    self.Enemy_Turn[0] = 2
                                    self.Enemy_Turn[1] = "Waiting"
                            Speed_Test = False
                            ParaEffect = random.randint(1,4)
                            self.OtherPriorityFactors()
                        if self.Player_Turn[1] == "Move Call":
                            self.Opponents_Pokemon.TargetHP = self.Opponents_Pokemon.HP - self.BattlePlayerPoke.AttackDamage
                            if Sleep_Check:
                                if self.BattlePlayerPoke.Status == "SLP":
                                    self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} is asleep")
                                else:
                                    Sleep_Check = False
                                    Parlyz_Check = True
                            if Parlyz_Check:
                                if self.BattlePlayerPoke.Status == "PAR" and ParaEffect == 2:
                                    self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} is paralyzed and cant move")
                                else: 
                                    Parlyz_Check = False
                                    FRZ_Check = True
                            if FRZ_Check:
                                if self.BattlePlayerPoke.Status == "FRZ":
                                    self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} is frozen and cant move")
                                else:
                                    FRZ_Check = False
                                    Confusion_Check = True
                            if Confusion_Check:
                                if self.BattlePlayerPoke.Status2 == "Confused" and self.BattlePlayerPoke.ConfusionTimeLimit > 0: self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} is confused")
                                elif self.BattlePlayerPoke.Status2 == "Confused" and self.BattlePlayerPoke.ConfusionTimeLimit == 0: 
                                    self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} snapped out of confusion")
                                else:
                                    Flinch_Check = True
                                    Confusion_Check = False
                            if Confusion_Effect:
                                if random.randint(0,1) == 0:
                                    Confusion_Aftermath = True
                                    self.BattlePlayerPoke.ExtraTargetHP = self.BattlePlayerPoke.ConfusionEffect()
                                else:Flinch_Check = True
                                Confusion_Effect = False
                            if Confusion_Aftermath:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} got confused and hit itself")
                            if self.BattlePlayerPoke.TrappedTurns > 0:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} is trapped")
                            if Flinch_Check:
                                if self.BattlePlayerPoke.Attack == "Flinch":
                                    self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} flinched")
                                else:
                                    Flinch_Check = False
                                    Obediance_Check = True
                            if Obediance_Check:
                                if self.BattlePlayerPoke.Trainer != self.PlayerName:
                                    Disobey = self.ObedianceCalc()
                                    if Disobey[0] == "Obey":Move_Call = True
                                    else:Obediance_Fail = True
                                else:Move_Call = True
                                Obediance_Check = False
                            if Obediance_Fail:self.BattleDialouge(Disobey[1])
                            if Move_Call and self.BattlePlayerPoke.TrappedTurns <= 0:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} used {self.BattlePlayerPoke.Attack}")
                        if self.Player_Turn[1] == "Move animation":
                            Poke_Animation = self.BattlePlayerPoke.BattleAnimation()
                            if Poke_Animation:
                                Poke_Animation = False
                                self.Player_Turn[1] = "HP animation"
                        if self.Player_Turn[1] == "HP animation":
                            if not self.Opponents_Pokemon.SubstituteOn:
                                if self.Opponents_Pokemon.TargetHP < 0: self.Opponents_Pokemon.TargetHP = 0
                                if self.Opponents_Pokemon.HP > self.Opponents_Pokemon.TargetHP:
                                    self.Opponents_Pokemon.HP -= 0.1
                                if self.Opponents_Pokemon.HP < self.Opponents_Pokemon.TargetHP: self.Opponents_Pokemon.HP = self.Opponents_Pokemon.TargetHP
                                if self.Opponents_Pokemon.HP == self.Opponents_Pokemon.TargetHP:
                                    self.Player_Turn[1] = "Move Aftermath"
                            else:
                                self.Opponents_Pokemon.SubstituteHP -= self.BattlePlayerPoke.AttackDamage
                                if self.Opponents_Pokemon.SubstituteHP <= 0: 
                                    self.Opponents_Pokemon.SubstituteOn = False
                                    self.BattlePlayerPoke.AftermathText3 = f"{self.Opponents_Pokemon.NickName}'s Substitute broke"
                                self.Player_Turn[1] = "Move Aftermath" 
                        if self.Player_Turn[1] == "C.HP animation":
                            if self.BattlePlayerPoke.HP > self.BattlePlayerPoke.ExtraTargetHP:
                                self.BattlePlayerPoke.HP -= 0.1
                            if self.BattlePlayerPoke.HP < self.BattlePlayerPoke.ExtraTargetHP: self.BattlePlayerPoke.HP = self.BattlePlayerPoke.ExtraTargetHP
                            if self.BattlePlayerPoke.HP == self.BattlePlayerPoke.ExtraTargetHP:
                                self.Player_Turn[1] = "Battle Over?"
                                Battle_overp1 = True
                        if self.Player_Turn[1] == "T.HP animation":
                            if self.BattlePlayerPoke.HP > self.BattlePlayerPoke.ExtraTargetHP:
                                self.BattlePlayerPoke.HP -= 0.1
                            if self.BattlePlayerPoke.HP < self.BattlePlayerPoke.ExtraTargetHP: self.BattlePlayerPoke.HP = self.BattlePlayerPoke.ExtraTargetHP
                            if self.BattlePlayerPoke.HP == self.BattlePlayerPoke.ExtraTargetHP:
                                self.Player_Turn[1] = "Battle Over?"
                        if self.Player_Turn[1] == "Move Aftermath":
                            self.BattlePlayerPoke.LastmoveUsed = self.BattlePlayerPoke.Attack
                            if self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.EnemyStatChangingList or self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.EnemyStatDamagingList:
                                self.Opponents_Pokemon.Attack_AfterMath(self.Opponents_Pokemon.Status,self.BattlePlayerPoke.AftermathStat,self.BattlePlayerPoke.EnemyChangedStat,'',0,False)
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.FieldAffectingList:
                                self.Opponents_Pokemon.Attack_AfterMath(self.Opponents_Pokemon.Status,'',0,self.BattlePlayerPoke.FieldEffect,self.BattlePlayerPoke.FieldEffectTerm,self.BattlePlayerPoke.FieldTarget)
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.StatusDamagingList or self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.StatusList:
                                self.Opponents_Pokemon.Attack_AfterMath(self.BattlePlayerPoke.AftermathStatus,'',0,'',0,False)
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.SelfStatChangingList:
                                self.BattlePlayerPoke.Attack_AfterMath(self.BattlePlayerPoke.Status,self.BattlePlayerPoke.AftermathStat,self.BattlePlayerPoke.SelfChangedStat,'',0,False)
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.MultiturnMovesList:
                                if self.Opponents_Pokemon.IdleMove == "Bide" and self.Opponents_Pokemon.IdleTurns > 0:
                                    self.Opponents_Pokemon.BideDamage += self.BattlePlayerPoke.AttackDamage
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.MultiturnMovesList:
                                if self.BattlePlayerPoke.IdleTurns > 0 and self.BattlePlayerPoke.AftermathText1 in (f"{self.BattlePlayerPoke.NickName} unleashed the energy","It Missed"):
                                    self.BattlePlayerPoke.IdleTurns = 0
                                    self.BattlePlayerPoke.IdleMove = ''
                                    self.BattlePlayerPoke.BideDamage = 0
                                elif self.BattlePlayerPoke.IdleMove == "Dig" and self.BattlePlayerPoke.IdleTurns == 1:self.BattlePlayerPoke.Dig = True
                                elif self.BattlePlayerPoke.IdleMove == "Fly" and self.BattlePlayerPoke.IdleTurns == 1:self.BattlePlayerPoke.Fly = True
                                elif self.BattlePlayerPoke.IdleTurns == 0:
                                    self.BattlePlayerPoke.Dig = False
                                    self.BattlePlayerPoke.Fly = False
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.TrappingMoves:
                                if self.Opponents_Pokemon.TrappedTurns <= 0:
                                    self.Opponents_Pokemon.TrappedTurns = self.BattlePlayerPoke.OPTrapTurns
                                    UTrap_Damage = self.BattlePlayerPoke.AttackDamage
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.DrainingAttacksList:
                                if not Drained_HP:
                                    if self.BattlePlayerPoke.AttackDamage/2 < 1:
                                        self.BattlePlayerPoke.HP += 1
                                    else:
                                        self.BattlePlayerPoke.HP += round(self.BattlePlayerPoke.AttackDamage/2)
                                    Drained_HP = True
                                if Drained_HP:
                                    if self.BattlePlayerPoke.HP > self.BattlePlayerPoke.MAXHP:self.BattlePlayerPoke.HP = self.BattlePlayerPoke.MAXHP
                            elif self.BattlePlayerPoke.Attack == "Disable" and self.Opponents_Pokemon.DisabledTimer <= 0:
                                self.Opponents_Pokemon.DisabledMove = self.BattlePlayerPoke.ODisabledMove
                                self.Opponents_Pokemon.DisabledTimer = self.BattlePlayerPoke.ODisabledTimer
                            elif self.BattlePlayerPoke.Attack == "Rest":
                                self.BattlePlayerPoke.Attack_AfterMath(self.BattlePlayerPoke.AftermathStatus,'',0,'',0,False)
                                self.BattlePlayerPoke.Status2= ""
                                self.BattlePlayerPoke.SleepTimer = 3
                                self.BattlePlayerPoke.HP = self.BattlePlayerPoke.ExtraTargetHP
                            elif self.BattlePlayerPoke.Attack == "Pay Day" and self.BattlePlayerPoke.AttackDamage > 0:
                                Extra_Money = self.BattlePlayerPoke.Level * 2
                            elif self.BattlePlayerPoke.Attack == "Rage" and self.BattlePlayerPoke.AttackDamage > 0:
                                if not Rage:
                                    if self.BattlePlayerPoke.RageOn:
                                        if self.BattlePlayerPoke.AtkCounter < 6:self.BattlePlayerPoke.AtkCounter += 1
                                    Rage = True
                                self.BattlePlayerPoke.RageOn = True
                                self.BattlePlayerPoke.AftermathText3 = f"{self.BattlePlayerPoke.NickName} rage builds"
                            elif self.Opponents_Pokemon.RageOn and self.BattlePlayerPoke.AttackDamage > 0:
                                if not Rage:
                                    if self.Opponents_Pokemon.AtkCounter < 6:self.Opponents_Pokemon.AtkCounter += 1
                                    Rage = True
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.FlinchingMoves:
                                self.Opponents_Pokemon.Attack = "Flinch"      
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.SelfFaintingMoves:
                                self.BattlePlayerPoke.HP = 0
                                self.BattlePlayerPoke.Faint = False
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.RecoilMoves:
                                    self.BattlePlayerPoke.HP -= self.BattlePlayerPoke.RecoilDamage
                                    self.BattlePlayerPoke.RecoilDamage = 0
                            elif self.Opponents_Pokemon.Attack == "Counter" and Pokemon_Move_Type[self.BattlePlayerPoke.Attack] in ("Normal","Fighting") and self.BattlePlayerPoke.AttackDamage > 0:
                                self.Opponents_Pokemon.CounterDamage = self.BattlePlayerPoke.AttackDamage * 2
                                self.Opponents_Pokemon.Get_Move(self.Opponents_Pokemon,self.BattlePlayerPoke)
                            elif self.BattlePlayerPoke.IdleMove in self.BattlePlayerPoke.PokemonMoves.RampageMoves and self.BattlePlayerPoke.IdleTurns == 0:
                                self.BattlePlayerPoke.Attack_AfterMath("Confused",'',0,'',0,False)
                                self.BattlePlayerPoke.AftermathText3 = f"{self.BattlePlayerPoke.NickName} was confused by fatigue"
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.HealingMoves:
                                if not Drained_HP:
                                    self.BattlePlayerPoke.HP += self.BattlePlayerPoke.HealedHP
                                    Drained_HP = True
                                if Drained_HP:
                                    if self.BattlePlayerPoke.HP > self.BattlePlayerPoke.MAXHP:self.BattlePlayerPoke.HP = self.BattlePlayerPoke.MAXHP
                            elif self.BattlePlayerPoke.Attack == "Haze":
                                self.BattlePlayerPoke.Get_Hazed()
                                self.Opponents_Pokemon.Get_Hazed()
                            if self.BattlePlayerPoke.Status == "SLP":
                                self.BattlePlayerPoke.IdleTurns = 0
                                self.BattlePlayerPoke.IdleMove = ''
                            if Pokemon_Move_Type[self.BattlePlayerPoke.Attack] == "Fire" and self.BattlePlayerPoke.Attack != "Fire Spin" and self.Opponents_Pokemon.Status == "FRZ":
                                OThawed = True
                            if self.BattlePlayerPoke.AftermathText1 == "":
                                if self.BattlePlayerPoke.Attack == "Substitute":
                                    if not self.BattlePlayerPoke.SubstituteOn and self.BattlePlayerPoke.HP > (self.BattlePlayerPoke.MAXHP * 0.25):
                                        self.BattlePlayerPoke.SubstituteOn = True
                                        self.BattlePlayerPoke.SubstituteHP = (self.BattlePlayerPoke.HP * 0.25) + 1
                                        self.BattlePlayerPoke.HP -= (self.BattlePlayerPoke.HP * 0.25)
                                        self.BattlePlayerPoke.AftermathText1 = f"{self.BattlePlayerPoke.NickName} made a Substitute"
                                    else:self.BattlePlayerPoke.AftermathText1 = "It failed"
                            if self.BattlePlayerPoke.AftermathText1 != '' or self.BattlePlayerPoke.AftermathText2 != '' or self.BattlePlayerPoke.AftermathText3 != '': self.BattleDialouge(self.BattlePlayerPoke.AftermathText1,self.BattlePlayerPoke.AftermathText2,self.BattlePlayerPoke.AftermathText3)
                            if self.BattlePlayerPoke.AftermathText1 == '' and self.BattlePlayerPoke.AftermathText2 == '' and self.BattlePlayerPoke.AftermathText3 == '': 
                                self.Player_Turn[1] = "Battle Over?"
                                Battle_overp1 = True
                        if self.Player_Turn[1] == "Battle Over?":
                            Rage = False
                            if self.Opponents_Pokemon.HP <= 0 and not Battle_Over and self.BattlePlayerPoke.HP > 0: 
                                Battle_Over = True
                                Exp_Gain = True
                                Drained_HP = False
                            elif self.BattlePlayerPoke.HP <= 0 and not Battle_Over and self.Opponents_Pokemon.HP > 0:
                                self.BattlePlayerPoke.HP = 0
                                Battle_Over = True
                                for poke in self.Player.Pokemon:
                                    if poke.HP > 0: Player_Next_Pokemon = True
                                if not Player_Next_Pokemon:Player_lost = True
                                self.Player_Turn[1] = "Done"
                            elif self.Opponents_Pokemon.HP > 0:
                                if self.Player_Turn[0] == 1:
                                    self.Enemy_Turn[1] = "Move Call"
                                    self.Player_Turn[1] = "Done"
                                    Sleep_Check = True
                                    Drained_HP = False
                                elif self.Player_Turn[0] == 2:
                                    TurnEffects = True
                                    Drained_HP = False
                                    Battle_Options = False
                                    self.BattlePlayerPoke.Attack = ''
                                    self.Opponents_Pokemon.Attack = ''
                                    self.Fight = False
                                    self.BattlePlayerPoke.AttackDamage = 0
                                    self.Opponents_Pokemon.AttackDamage = 0
                                    Sleep_Check = True
                                    Move_Start = False
                                    self.BattlePlayerPoke.MoveTurn = ""
                                    self.Opponents_Pokemon.MoveTurn = ""
                                    if Battle_overp1:
                                        self.Opponents_Pokemon.ConfusionTimeLimit -= 1
                                        self.BattlePlayerPoke.ConfusionTimeLimit -= 1
                                        self.BattlePlayerPoke.SleepTimer -= 1
                                        self.Opponents_Pokemon.SleepTimer -= 1
                                        self.BattlePlayerPoke.MoveTurn = ""
                                        self.Opponents_Pokemon.MoveTurn = ""
                                        self.BattlePlayerPoke.SleepTimer -= 1
                                        self.Opponents_Pokemon.SleepTimer -= 1
                                        self.BattlePlayerPoke.TrappedTurns -= 1
                                        self.Opponents_Pokemon.TrappedTurns -= 1
                                        if self.BattlePlayerPoke.TrappedTurns == 0:
                                            UTrapped_Check =True
                                            self.BattlePlayerPoke.TrappedTurns = -10
                                        if self.Opponents_Pokemon.TrappedTurns == 0:
                                            OTrapped_Check =True
                                            self.Opponents_Pokemon.TrappedTurns = -10
                                        Battle_overp1 = False
                                        Status_Check = True
                                    if self.BattlePlayerPoke.DisabledTimer <= 0 and self.BattlePlayerPoke.DisabledMove != '':
                                        self.BattlePlayerPoke.DisabledMove = ''
                                        UAble_Check = True
                                    if self.Opponents_Pokemon.DisabledTimer <= 0 and self.Opponents_Pokemon.DisabledMove != '':
                                        self.Opponents_Pokemon.DisabledMove = ''
                                        OAble_Check = True
                                    if self.BattlePlayerPoke.Status == "SLP":
                                        if self.BattlePlayerPoke.SleepTimer <= 0:
                                            self.BattlePlayerPoke.Status = 'OK'
                                            UAwake_Check = True 
                                    if self.Opponents_Pokemon.Status == "SLP":
                                        if self.Opponents_Pokemon.SleepTimer <= 0:
                                            self.Opponents_Pokemon.Status = 'OK'
                                            OAwake_Check = True 
                                    if Status_Check:
                                        if UAwake_Check:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} woke up")
                                        elif OAwake_Check:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} woke up")
                                        elif UAble_Check:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName}'s move is enabled")
                                        elif OAble_Check:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName}'s move is enabled")
                                        elif UTrapped_Check:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} is untrapped")
                                        elif OTrapped_Check:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} is untrapped")
                                        elif UThawed:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} thawed out of the ice")
                                        elif OThawed:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} thawed out of the ice")
                                        if True not in (UAwake_Check,OAwake_Check,UAble_Check,OAble_Check,UTrapped_Check,OTrapped_Check,UThawed,OThawed):
                                            self.Player_Turn[1] = "Done"
                                            Status_Check = False
                                    self.BattlePlayerPoke.AftermathText1,self.BattlePlayerPoke.AftermathText2,self.BattlePlayerPoke.AftermathText3 = "","",""
                                    self.Opponents_Pokemon.AftermathText1,self.Opponents_Pokemon.AftermathText2,self.Opponents_Pokemon.AftermathText3 = "","",""
                                    self.Opponents_Pokemon.AftermathText1,self.Opponents_Pokemon.AftermathText2,self.Opponents_Pokemon.AftermathText3 = "","",""
                            elif self.BattlePlayerPoke.HP <= 0 and self.Opponents_Pokemon.HP <= 0:
                                Battle_Over = True
                                Exp_Gain = True
                                self.BattlePlayerPoke.TrappedTurns = 0
                        if self.Enemy_Turn[1] == "Move Call":
                            self.BattlePlayerPoke.TargetHP = self.BattlePlayerPoke.HP - self.Opponents_Pokemon.AttackDamage
                            if Sleep_Check:
                                if self.Opponents_Pokemon.Status == "SLP":
                                    self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} is asleep")
                                else:
                                    Sleep_Check = False
                                    Parlyz_Check = True
                            if Parlyz_Check:
                                if self.Opponents_Pokemon.Status == "PAR" and ParaEffect == 2:
                                    self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} is paralyzed and cant move")
                                else: 
                                    Parlyz_Check = False
                                    FRZ_Check = True
                            if FRZ_Check:
                                if self.Opponents_Pokemon.Status == "FRZ":
                                    self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} is frozen and cant move")
                                else:
                                    FRZ_Check = False
                                    Confusion_Check = True
                            if Confusion_Check:
                                if self.Opponents_Pokemon.Status2 == "Confused" and self.Opponents_Pokemon.ConfusionTimeLimit > 0: self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} is confused")
                                elif self.Opponents_Pokemon.Status2 == "Confused" and self.Opponents_Pokemon.ConfusionTimeLimit == 0: 
                                    self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} snapped out of confusion")
                                    Flinch_Check = True
                                    self.Opponents_Pokemon.Status2 = ""
                                else:
                                    Flinch_Check = True
                                    Confusion_Check = False
                            if Confusion_Effect:
                                if random.randint(0,1) == 0:
                                    Confusion_Aftermath = True
                                    self.Opponents_Pokemon.ExtraTargetHP = self.Opponents_Pokemon.ConfusionEffect()
                                else:Flinch_Check = True
                                Confusion_Effect = False
                            if Confusion_Aftermath:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} got confused and hit itself")
                            if self.Opponents_Pokemon.TrappedTurns > 0:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} is trapped")
                            if Flinch_Check:
                                if self.Opponents_Pokemon.Attack == "Flinch":
                                    self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} flinched")
                                else:
                                    Flinch_Check = False
                                    Move_Call = True
                            if Move_Call and self.Opponents_Pokemon.TrappedTurns <= 0:self.BattleDialouge(f"{self.Opponents_Pokemon.Name} used {self.Opponents_Pokemon.Attack}")
                        if self.Enemy_Turn[1] == "Move animation":
                            Poke_Animation = self.Opponents_Pokemon.BattleAnimation()
                            if Poke_Animation:
                                Poke_Animation = False
                                self.Enemy_Turn[1] = "HP animation"
                        if self.Enemy_Turn[1] == "HP animation":
                            if not self.BattlePlayerPoke.SubstituteOn:
                                if self.BattlePlayerPoke.HP > self.BattlePlayerPoke.TargetHP:
                                    self.BattlePlayerPoke.HP -= 0.1
                                if self.BattlePlayerPoke.HP < self.BattlePlayerPoke.TargetHP: self.BattlePlayerPoke.HP = self.BattlePlayerPoke.TargetHP
                                if self.BattlePlayerPoke.HP == self.BattlePlayerPoke.TargetHP:
                                    self.Enemy_Turn[1] = "Move Aftermath"
                            else:
                                self.BattlePlayerPoke.SubstituteHP -= self.Opponents_Pokemon.AttackDamage
                                if self.BattlePlayerPoke.SubstituteHP <= 0: 
                                    self.BattlePlayerPoke.SubstituteOn = False
                                    self.Opponents_Pokemon.AftermathText3 = f"{self.BattlePlayerPoke.NickName}'s Substitute broke"
                                self.Enemy_Turn[1] = "Move Aftermath" 
                        if self.Enemy_Turn[1] == "C.HP animation":
                            if self.Opponents_Pokemon.HP > self.Opponents_Pokemon.ExtraTargetHP:
                                self.Opponents_Pokemon.HP -= 0.1
                            if self.Opponents_Pokemon.HP < self.Opponents_Pokemon.ExtraTargetHP: self.Opponents_Pokemon.HP = self.Opponents_Pokemon.ExtraTargetHP
                            if self.Opponents_Pokemon.HP == self.Opponents_Pokemon.ExtraTargetHP:
                                self.Enemy_Turn[1] = "Battle Over?"
                                Battle_overp1 = True
                        if self.Enemy_Turn[1] == "T.HP animation":
                            if self.Opponents_Pokemon.HP > self.Opponents_Pokemon.ExtraTargetHP:
                                self.Opponents_Pokemon.HP -= 0.1
                            if self.Opponents_Pokemon.HP < self.Opponents_Pokemon.ExtraTargetHP: self.Opponents_Pokemon.HP = self.Opponents_Pokemon.ExtraTargetHP
                            if self.Opponents_Pokemon.HP == self.Opponents_Pokemon.ExtraTargetHP:
                                self.Enemy_Turn[1] = "Battle Over?"
                        if self.Enemy_Turn[1] == "Move Aftermath":
                            self.Opponents_Pokemon.LastmoveUsed = self.Opponents_Pokemon.Attack
                            if self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.EnemyStatChangingList or self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.EnemyStatDamagingList:
                                self.BattlePlayerPoke.Attack_AfterMath(self.BattlePlayerPoke.Status,self.Opponents_Pokemon.AftermathStat,self.Opponents_Pokemon.EnemyChangedStat,'',0,False)
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.FieldAffectingList:
                                self.BattlePlayerPoke.Attack_AfterMath(self.BattlePlayerPoke.Status,'',0,self.Opponents_Pokemon.FieldEffect,self.Opponents_Pokemon.FieldEffectTerm,self.Opponents_Pokemon.FieldTarget)
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.StatusDamagingList or self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.StatusList:
                                self.BattlePlayerPoke.Attack_AfterMath(self.Opponents_Pokemon.AftermathStatus,'',0,'',0,False)
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.SelfStatChangingList:
                                self.Opponents_Pokemon.Attack_AfterMath(self.Opponents_Pokemon.Status,self.Opponents_Pokemon.AftermathStat,self.Opponents_Pokemon.SelfChangedStat,'',0,False)
                            elif self.BattlePlayerPoke.Attack in self.Opponents_Pokemon.PokemonMoves.MultiturnMovesList:
                                if self.BattlePlayerPoke.IdleMove == "Bide" and self.BattlePlayerPoke.IdleTurns > 0:
                                    self.BattlePlayerPoke.BideDamage += self.Opponents_Pokemon.AttackDamage
                            elif self.Opponents_Pokemon.Attack in self.BattlePlayerPoke.PokemonMoves.MultiturnMovesList:
                                if self.Opponents_Pokemon.IdleTurns > 0 and self.Opponents_Pokemon.AftermathText1 in (f"{self.Opponents_Pokemon.NickName} unleashed the energy","It Missed"):
                                    self.Opponents_Pokemon.IdleTurns = 0
                                    self.Opponents_Pokemon.IdleMove = ''
                                    self.Opponents_Pokemon.BideDamage = 0
                                elif self.Opponents_Pokemon.IdleMove == "Dig" and self.Opponents_Pokemon.IdleTurns == 1:self.Opponents_Pokemon.Dig = True
                                elif self.Opponents_Pokemon.IdleMove == "Fly" and self.Opponents_Pokemon.IdleTurns == 1:self.Opponents_Pokemon.Fly = True
                                elif self.Opponents_Pokemon.IdleTurns == 0:
                                    self.Opponents_Pokemon.Dig = False
                                    self.Opponents_Pokemon.Fly = False
                            elif self.Opponents_Pokemon.Attack in self.BattlePlayerPoke.PokemonMoves.TrappingMoves:
                                if self.BattlePlayerPoke.TrappedTurns <= 0:
                                    self.BattlePlayerPoke.TrappedTurns = self.Opponents_Pokemon.OPTrapTurns
                                    OTrap_Damage = self.Opponents_Pokemon.AttackDamage
                            elif self.Opponents_Pokemon.Attack == "Disable" and self.BattlePlayerPoke.DisabledTimer <= 0:
                                self.BattlePlayerPoke.DisabledMove = self.Opponents_Pokemon.ODisabledMove
                                self.BattlePlayerPoke.DisabledTimer = self.Opponents_Pokemon.ODisabledTimer
                            elif self.Opponents_Pokemon.Attack == "Rest":
                                self.Opponents_Pokemon.Attack_AfterMath(self.Opponents_Pokemon.AftermathStatus,'',0,'',0,False)
                                self.Opponents_Pokemon.Status2= ""
                                self.Opponents_Pokemon.SleepTimer = 3
                                self.Opponents_Pokemon.HP = self.Opponents_Pokemon.ExtraTargetHP
                            elif self.Opponents_Pokemon.Attack in self.BattlePlayerPoke.PokemonMoves.DrainingAttacksList:
                                if not Drained_HP:
                                    if self.Opponents_Pokemon.AttackDamage/2 < 1:
                                        self.Opponents_Pokemon.HP += 1
                                    else:
                                        self.Opponents_Pokemon.HP += round(self.Opponents_Pokemon.AttackDamage/2)
                                    Drained_HP = True
                                if Drained_HP:
                                    if self.Opponents_Pokemon.HP > self.Opponents_Pokemon.MAXHP:self.Opponents_Pokemon.HP = self.Opponents_Pokemon.MAXHP
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.FlinchingMoves:
                                self.BattlePlayerPoke.Attack = "Flinch"
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.SelfFaintingMoves:
                                if self.Opponents_Pokemon.Faint:
                                    self.Opponents_Pokemon.HP = 0
                                    self.Opponents_Pokemon.Faint = False
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.RecoilMoves:
                                self.Opponents_Pokemon.HP -= self.Opponents_Pokemon.RecoilDamage
                                self.Opponents_Pokemon.RecoilDamage = 0
                            elif self.Opponents_Pokemon.Attack == "Pay Day" and self.Opponents_Pokemon.AttackDamage > 0:
                                Extra_Money = self.Opponents_Pokemon.Level * 2
                            elif self.Opponents_Pokemon.Attack == "Rage" and self.Opponents_Pokemon.AttackDamage > 0:
                                if not Rage:
                                    if self.Opponents_Pokemon.RageOn:
                                        if self.Opponents_Pokemon.AtkCounter < 6:self.Opponents_Pokemon.AtkCounter += 1
                                    Rage = True
                                self.Opponents_Pokemon.RageOn = True
                                self.Opponents_Pokemon.AftermathText3 = f"{self.Opponents_Pokemon.NickName} rage builds"
                            elif self.BattlePlayerPoke.RageOn and self.Opponents_Pokemon.AttackDamage > 0:
                                if not Rage:
                                    if self.BattlePlayerPoke.AtkCounter < 6:self.BattlePlayerPoke.AtkCounter += 1
                                    Rage = True
                            elif self.BattlePlayerPoke.Attack == "Counter" and Pokemon_Move_Type[self.Opponents_Pokemon.Attack] in ("Normal","Fighting") and self.Opponents_Pokemon.AttackDamage > 0:
                                self.BattlePlayerPoke.CounterDamage = self.Opponents_Pokemon.AttackDamage * 2
                                self.BattlePlayerPoke.Get_Move(self.BattlePlayerPoke,self.Opponents_Pokemon)
                            elif self.Opponents_Pokemon.IdleMove in self.Opponents_Pokemon.PokemonMoves.RampageMoves and self.Opponents_Pokemon.IdleTurns == 0:
                                self.Opponents_Pokemon.Attack_AfterMath("Confused",'',0,'',0,False)
                                self.Opponents_Pokemon.AftermathText3 = f"{self.Opponents_Pokemon.NickName} was confused by fatigue"
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.HealingMoves:
                                if not Drained_HP:
                                    self.Opponents_Pokemon.HP += self.Opponents_Pokemon.HealedHP
                                    Drained_HP = True
                                if Drained_HP:
                                    if self.Opponents_Pokemon.HP > self.Opponents_Pokemon.MAXHP:self.Opponents_Pokemon.HP = self.Opponents_Pokemon.MAXHP
                            elif self.Opponents_Pokemon.Attack == "Haze":
                                self.BattlePlayerPoke.Get_Hazed()
                                self.Opponents_Pokemon.Get_Hazed()
                            if self.Opponents_Pokemon.Status == "SLP":
                                self.Opponents_Pokemon.IdleTurns = 0
                                self.Opponents_Pokemon.IdleMove = ''
                            if Pokemon_Move_Type[self.Opponents_Pokemon.Attack] == "Fire" and self.Opponents_Pokemon.Attack != "Fire Spin" and self.BattlePlayerPoke.Status == "FRZ":
                                UThawed = True
                            if self.Opponents_Pokemon.AftermathText1 == "":
                                if self.Opponents_Pokemon.Attack == "Substitute":
                                    if not self.Opponents_Pokemon.SubstituteOn and self.Opponents_Pokemon.HP > (self.Opponents_Pokemon.MAXHP * 0.25):
                                        self.Opponents_Pokemon.SubstituteOn = True
                                        self.Opponents_Pokemon.SubstituteHP = (self.Opponents_Pokemon.HP * 0.25) + 1
                                        self.Opponents_Pokemon.HP -= (self.Opponents_Pokemon.HP * 0.25)
                                        self.Opponents_Pokemon.AftermathText1 = f"{self.Opponents_Pokemon.NickName} made a Substitute"
                                    else:self.Opponents_Pokemon.AftermathText1 = "It failed"
                            if self.Opponents_Pokemon.AftermathText1 != '' or self.Opponents_Pokemon.AftermathText2 != '' or self.Opponents_Pokemon.AftermathText3 != '' : self.BattleDialouge(self.Opponents_Pokemon.AftermathText1,self.Opponents_Pokemon.AftermathText2,self.Opponents_Pokemon.AftermathText3)
                            else: 
                                self.Enemy_Turn[1] = "Battle Over?"
                                Battle_overp1 = True
                        if self.Enemy_Turn[1] == "Battle Over?":
                            Rage = False
                            if self.BattlePlayerPoke.HP <= 0 and not Battle_Over and self.Opponents_Pokemon.HP > 0 : 
                                self.BattlePlayerPoke.HP = 0
                                Battle_Over = True
                                self.Opponents_Pokemon.TrappedTurns = 0
                                for poke in self.Player.Pokemon:
                                    if poke.HP > 0: Player_Next_Pokemon = True
                                if not Player_Next_Pokemon:OSmack_Talk = True
                                self.Enemy_Turn[1] = "Done"
                            elif self.Opponents_Pokemon.HP <= 0 and not Battle_Over and self.BattlePlayerPoke.HP > 0:
                                Battle_Over = True
                                Exp_Gain = True
                                Drained_HP = False
                                self.BattlePlayerPoke.TrappedTurns = 0
                                self.Enemy_Turn[1] = "Done"
                            elif self.BattlePlayerPoke.HP <= 0 and self.Opponents_Pokemon.HP <= 0 and Battle_Over:
                                Battle_Over = True
                                Exp_Gain = True
                                self.BattlePlayerPoke.TrappedTurns = 0
                            else:
                                if self.Enemy_Turn[0] == 1:
                                    self.Player_Turn[1] = "Move Call"
                                    self.Enemy_Turn[1] = "Done"
                                    self.Fight = False
                                    Sleep_Check = True
                                elif self.Enemy_Turn[0] == 2:
                                    TurnEffects = True
                                    Battle_Options = False
                                    self.BattlePlayerPoke.Attack = ''
                                    self.Opponents_Pokemon.Attack = ''
                                    self.BattlePlayerPoke.AttackDamage = 0
                                    self.Opponents_Pokemon.AttackDamage = 0
                                    self.Fight = False
                                    Sleep_Check = True
                                    Move_Start = False
                                    self.BattlePlayerPoke.MoveTurn = ""
                                    self.Opponents_Pokemon.MoveTurn = ""
                                    if Battle_overp1:
                                        Sleep_Check = True
                                        Move_Start = False
                                        self.BattlePlayerPoke.MoveTurn = ""
                                        self.Opponents_Pokemon.MoveTurn = ""
                                        self.BattlePlayerPoke.SleepTimer -= 1
                                        self.Opponents_Pokemon.SleepTimer -= 1
                                        self.BattlePlayerPoke.DisabledTimer -= 1
                                        self.Opponents_Pokemon.DisabledTimer -= 1
                                        self.BattlePlayerPoke.TrappedTurns -= 1
                                        self.Opponents_Pokemon.TrappedTurns -= 1
                                        self.Opponents_Pokemon.ConfusionTimeLimit -= 1
                                        self.BattlePlayerPoke.ConfusionTimeLimit -= 1
                                        if self.BattlePlayerPoke.TrappedTurns == 0:
                                            UTrapped_Check =True
                                            self.BattlePlayerPoke.TrappedTurns = -10
                                        if self.Opponents_Pokemon.TrappedTurns == 0:
                                            OTrapped_Check =True
                                            self.Opponents_Pokemon.TrappedTurns = -10
                                        if self.BattlePlayerPoke.DisabledTimer <= 0:self.BattlePlayerPoke.DisabledMove = ''
                                        if self.Opponents_Pokemon.DisabledTimer <= 0:self.Opponents_Pokemon.DisabledMove = ''
                                        Battle_overp1 = False
                                        Status_Check = True
                                    if self.BattlePlayerPoke.DisabledTimer <= 0 and self.BattlePlayerPoke.DisabledMove != '':
                                        self.BattlePlayerPoke.DisabledMove = ''
                                        UAble_Check = True
                                    if self.Opponents_Pokemon.DisabledTimer <= 0 and self.Opponents_Pokemon.DisabledMove != '':
                                        self.Opponents_Pokemon.DisabledMove = ''
                                        OAble_Check = True
                                    if self.BattlePlayerPoke.Status == "SLP":
                                        if self.BattlePlayerPoke.SleepTimer <= 0:
                                            self.BattlePlayerPoke.Status = 'OK'
                                            UAwake_Check = True 
                                    if self.Opponents_Pokemon.Status == "SLP":
                                        if self.Opponents_Pokemon.SleepTimer <= 0:
                                            self.Opponents_Pokemon.Status = 'OK'
                                            OAwake_Check = True 
                                    if Status_Check:
                                        if UAwake_Check:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} woke up")
                                        elif OAwake_Check:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} woke up")
                                        elif UAble_Check:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName}'s move is enabled")
                                        elif OAble_Check:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName}'s move is enabled")
                                        elif UTrapped_Check:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} is untrapped")
                                        elif OTrapped_Check:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} is untrapped")
                                        elif UThawed:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} thawed out of the ice")
                                        elif OThawed:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} thawed out of the ice")
                                        if True not in (UAwake_Check,OAwake_Check,UAble_Check,OAble_Check,UTrapped_Check,OTrapped_Check,UThawed,OThawed):
                                            self.Enemy_Turn[1] = "Done"
                                            Status_Check = False
                                    self.Opponents_Pokemon.AftermathText1,self.Opponents_Pokemon.AftermathText2,self.Opponents_Pokemon.AftermathText3 = "","",""
                                    self.BattlePlayerPoke.AftermathText1,self.BattlePlayerPoke.AftermathText2,self.BattlePlayerPoke.AftermathText3 = "","",""
                        if Battle_Over:
                            if self.Opponents_Pokemon.HP <= 0 and self.BattlePlayerPoke.HP > 0:
                                self.Enemy_Turn[1] = ""
                                self.Player_Turn[1] = ""
                                if Exp_Gain:
                                    self.Particaptionlist = [i[0] for i in enumerate(self.Player.Pokemon) if i[1].HP > 0 and i[1].Particaption]
                                    if not Two_D_ListCheck(self.Player.Bag,"EXP All"):
                                        for i in self.Particaptionlist:
                                            self.Player.Pokemon[i].Exp_Gain(self.Opponents_Pokemon,len(self.Particaptionlist),self.PlayerName,False)
                                    if Two_D_ListCheck(self.Player.Bag,"EXP All"):
                                        for i in range(len(self.Player.Pokemon)):
                                            if self.Player.Pokemon[i].HP > 0:
                                                self.Player.Pokemon[i].Exp_Gain(self.Opponents_Pokemon,len(self.Particaptionlist),self.PlayerName,True)
                                        for poke in self.Player.Pokemon:
                                            if poke not in self.Particaptionlist and poke.HP > 0: self.Particaptionlist.append(poke)
                                    LV_uplist = [i[0] for i in enumerate(self.Player.Pokemon) if i[0] in self.Particaptionlist and i[1].Level_up]
                                    Exp_Gain = False
                                    Exp_Gain_Aftermath_poke1 = True
                                if Exp_Gain_Aftermath_poke1:
                                    if LV_uplist:
                                        if self.Particaptionlist[0] == LV_uplist[0]: 
                                            Text2 = f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[0]].Level}"
                                        else: Text2 = ''
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[0]].GainEXP)} exp",Text2)   
                                if LearnedMovepoke1:
                                    if self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[0]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[0]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Poke1EvolutionDescison = True
                                            LearnedMovepoke1 = False
                                    else:
                                        Poke1EvolutionDescison = True
                                        LearnedMovepoke1 = False
                                if Poke1EvolutionDescison:
                                    if self.Player.Pokemon[self.Particaptionlist[0]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[0]].Level and self.Player.Pokemon[self.Particaptionlist[0]].Level_up:
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} is trying to evolve. Should they evolve")
                                        self.BattleDecison()
                                        if self.BattleYes: 
                                            Poke1Evolution = True
                                            Poke1EvolutionDescison = False
                                        if self.BattleNo: 
                                            Exp_Gain_Aftermath_poke2 = True
                                            Poke1EvolutionDescison = False
                                        self.BattleYes,self.BattleNo = False,False
                                    else:
                                        Poke1EvolutionDescison = False
                                        Exp_Gain_Aftermath_poke2 = True
                                if Poke1Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[0]].Front_Img,(400,100))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[0]].NextStage[1]}")
                                if NewPoke1Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[0]].Front_Img,(400,100))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[0]].Name,Caught=True)
                                if LearnedMoveNewpoke1:
                                    if self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[0]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[0]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Exp_Gain_Aftermath_poke2 = True
                                            LearnedMoveNewpoke1 = False  
                                    else:
                                        Exp_Gain_Aftermath_poke2 = True
                                        LearnedMoveNewpoke1 = False                           
                                if Exp_Gain_Aftermath_poke2:
                                    if len(self.Particaptionlist) >= 2:
                                        if len(LV_uplist) >= 2:
                                            if self.Particaptionlist[1] == LV_uplist[1]: 
                                                Text2 = f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[1]].Level}"
                                            else: Text2 = ''
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[1]].GainEXP)} exp",Text2)
                                    else:
                                        Exp_Gain_Aftermath_poke2 = False
                                        EnemyPokemon = True
                                if LearnedMovepoke2:
                                    if self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[1]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[1]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            self.BattleNo = False
                                            Poke2EvolutionDescison = True
                                            LearnedMovepoke2 = False
                                    else:
                                        Poke2EvolutionDescison = True
                                        LearnedMovepoke2 = False
                                if Poke2EvolutionDescison:
                                    if len(self.Particaptionlist) > 1:
                                        if self.Player.Pokemon[self.Particaptionlist[1]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[1]].Level and self.Player.Pokemon[self.Particaptionlist[1]].Level_up:
                                            self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} is trying to evolve. Should they evolve")
                                            self.BattleDecison()
                                            if self.BattleYes: 
                                                Poke2Evolution = True
                                                Poke2EvolutionDescison = False
                                            if self.BattleNo: 
                                                Exp_Gain_Aftermath_poke3 = True
                                                Poke2EvolutionDescison = False
                                            self.BattleYes,self.BattleNo = False,False
                                        else:
                                            Poke2EvolutionDescison = False
                                            Exp_Gain_Aftermath_poke3 = True
                                    else:
                                        Poke2EvolutionDescison = False
                                        Exp_Gain_Aftermath_poke3 = True
                                if Poke2Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[1]].Front_Img,(400,100))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[1]].NextStage[1]}")
                                if NewPoke2Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[1]].Front_Img,(400,100))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[1]].Name,Caught=True)
                                if LearnedMoveNewpoke2:
                                    if self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[1]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[1]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Exp_Gain_Aftermath_poke3 = True
                                            LearnedMoveNewpoke2 = False  
                                    else:
                                        Exp_Gain_Aftermath_poke3 = True
                                        LearnedMoveNewpoke2 = False
                                if Exp_Gain_Aftermath_poke3:
                                    if len(self.Particaptionlist) >= 3:
                                        if len(LV_uplist) >= 3:
                                            if self.Particaptionlist[2] == LV_uplist[2]: 
                                                Text2 = f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[2]].Level}"
                                            else: Text2 = ''
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[2]].GainEXP)} exp",Text2)
                                    else:
                                        Exp_Gain_Aftermath_poke3 = False
                                        EnemyPokemon = True
                                if LearnedMovepoke3:
                                    if self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[2]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[2]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Poke3EvolutionDescison = True
                                            LearnedMovepoke3 = False
                                    else:
                                        Poke3EvolutionDescison = True
                                        LearnedMovepoke3 = False
                                if Poke3EvolutionDescison:
                                    if len(self.Particaptionlist) > 2:
                                        if self.Player.Pokemon[self.Particaptionlist[2]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[2]].Level and self.Player.Pokemon[self.Particaptionlist[2]].Level_up:
                                            self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} is trying to evolve. Should they evolve")
                                            self.BattleDecison()
                                            if self.BattleYes: 
                                                Poke3Evolution = True
                                                Poke3EvolutionDescison = False
                                            if self.BattleNo: 
                                                Exp_Gain_Aftermath_poke4 = True
                                                Poke3EvolutionDescison = False
                                            self.BattleYes,self.BattleNo = False,False
                                        else:
                                            Poke3EvolutionDescison = False
                                            Exp_Gain_Aftermath_poke4 = True
                                    else:
                                        Poke3EvolutionDescison = False
                                        Exp_Gain_Aftermath_poke4 = True
                                if Poke3Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[2]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[2]].NextStage[1]}")
                                if NewPoke3Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[2]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[2]].Name,Caught=True)
                                if LearnedMoveNewpoke3:
                                    if self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[2]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[2]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            Exp_Gain_Aftermath_poke4 = True
                                            self.BattleNo = False
                                            LearnedMoveNewpoke3 = False
                                    else:
                                        Exp_Gain_Aftermath_poke4 = True
                                        LearnedMoveNewpoke3 = False
                                if Exp_Gain_Aftermath_poke4:
                                    if len(self.Particaptionlist) >= 4:
                                        if len(LV_uplist) >= 4:
                                            if self.Particaptionlist[3] == LV_uplist[3]: 
                                                Text2 = f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[3]].Level}"
                                            else: Text2 = ''
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[3]].GainEXP)} exp",Text2)
                                    else:
                                        Exp_Gain_Aftermath_poke4 = False
                                        EnemyPokemon = True
                                if LearnedMovepoke4:
                                    if self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[3]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[3]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            Poke4EvolutionDescison = True
                                            self.BattleNo = False
                                            LearnedMovepoke4 = False
                                    else:
                                        Poke4EvolutionDescison = True
                                        LearnedMovepoke4 = False
                                if Poke4EvolutionDescison:
                                    if len(self.Particaptionlist) > 3:
                                        if self.Player.Pokemon[self.Particaptionlist[3]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[3]].Level and self.Player.Pokemon[self.Particaptionlist[3]].Level_up:
                                            self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} is trying to evolve. Should they evolve")
                                            self.BattleDecison()
                                            if self.BattleYes: 
                                                Poke4Evolution = True
                                                Poke4EvolutionDescison = False
                                            if self.BattleNo: 
                                                Exp_Gain_Aftermath_poke5 = True
                                                Poke4EvolutionDescison = False
                                            self.BattleYes,self.BattleNo = False,False
                                        else:
                                            Poke4EvolutionDescison = False
                                            Exp_Gain_Aftermath_poke5 = True
                                    else:
                                        Poke4EvolutionDescison = False
                                        Exp_Gain_Aftermath_poke5 = True
                                if Poke4Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[3]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[3]].NextStage[1]}")
                                if NewPoke4Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[3]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[3]].Name,Caught=True)
                                if LearnedMoveNewpoke4:
                                    if self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[3]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[3]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            self.BattleNo = False
                                            Exp_Gain_Aftermath_poke5 = True
                                            LearnedMoveNewpoke4 = False    
                                    else:
                                        Exp_Gain_Aftermath_poke5 = True
                                        LearnedMoveNewpoke4 = False                              
                                if Exp_Gain_Aftermath_poke5:
                                    if len(self.Particaptionlist) >= 5:
                                        if len(LV_uplist) >= 5:
                                            if self.Particaptionlist[4] == LV_uplist[4]: 
                                                Text2 = f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[4]].Level}"
                                            else: Text2 = ''
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[4]].GainEXP)} exp",Text2)
                                    else:
                                        Exp_Gain_Aftermath_poke5 = False
                                        EnemyPokemon = True
                                if LearnedMovepoke5:
                                    if self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[4]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[4]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Poke5EvolutionDescison = True
                                            LearnedMovepoke5 = False
                                    else:
                                        Poke5EvolutionDescison = True
                                        LearnedMovepoke5 = False
                                if Poke5EvolutionDescison:
                                    if len(self.Particaptionlist) > 4:
                                        if self.Player.Pokemon[self.Particaptionlist[4]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[4]].Level and self.Player.Pokemon[self.Particaptionlist[4]].Level_up:
                                            self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} is trying to evolve. Should they evolve")
                                            self.BattleDecison()
                                            if self.BattleYes: 
                                                Poke5Evolution = True
                                                Poke5EvolutionDescison = False
                                            if self.BattleNo: 
                                                Exp_Gain_Aftermath_poke6 = True
                                                Poke5EvolutionDescison = False
                                            self.BattleYes,self.BattleNo = False,False
                                        else:
                                            Poke5EvolutionDescison = False
                                            Exp_Gain_Aftermath_poke6 = True
                                    else:
                                        Poke5EvolutionDescison = False
                                        Exp_Gain_Aftermath_poke6 = True
                                if Poke5Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[4]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[4]].NextStage[1]}")
                                if NewPoke5Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[4]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[4]].Name,Caught=True)
                                if LearnedMoveNewpoke5:
                                    if self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[4]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[4]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            self.BattleNo = False
                                            Exp_Gain_Aftermath_poke6 = True
                                            LearnedMovepoke5 = False
                                    else:
                                        Exp_Gain_Aftermath_poke6 = True
                                        LearnedMoveNewpoke5 = False                                                          
                                if Exp_Gain_Aftermath_poke6:
                                    if len(self.Particaptionlist) >= 6:
                                        if len(LV_uplist) >= 6:
                                            if self.Particaptionlist[5] == LV_uplist[5]: 
                                                Text2 = f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[5]].Level}"
                                            else: Text2 = ''
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[5]].GainEXP)} exp",Text2)
                                    else:
                                        Exp_Gain_Aftermath_poke6 = False
                                        EnemyPokemon = True
                                if LearnedMovepoke6:
                                    if self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[5]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[5]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Poke6EvolutionDescison = True
                                            LearnedMovepoke6 = False
                                    else:
                                        LearnedMovepoke6 = False
                                        Poke6EvolutionDescison = True
                                if Poke6EvolutionDescison:
                                    if len(self.Particaptionlist) > 5:
                                        if self.Player.Pokemon[self.Particaptionlist[5]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[5]].Level and self.Player.Pokemon[self.Particaptionlist[5]].Level_up:
                                            self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} is trying to evolve. Should they evolve")
                                            self.BattleDecison()
                                            if self.BattleYes: 
                                                Poke6Evolution = True
                                                Poke6EvolutionDescison = False
                                            if self.BattleNo: 
                                                Battle_Aftermath = True
                                                Poke4EvolutionDescison = False
                                            self.BattleYes,self.BattleNo = False,False
                                        else:
                                            Poke6EvolutionDescison = False
                                            EnemyPokemon = True
                                    else:
                                        Poke6EvolutionDescison = False
                                        EnemyPokemon = True
                                if Poke6Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[5]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[5]].NextStage[1]}")
                                if NewPoke6Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[5]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[4]].Name,Caught=True)
                                if LearnedMoveNewpoke6:
                                    if self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[5]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[5]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            EnemyPokemon = True
                                            LearnedMovepoke6 = False
                                    else:
                                        EnemyPokemon = True
                                        LearnedMoveNewpoke6 = False
                                if EnemyPokemon:
                                    if len(Other_Pokes) > OPoke_Index + 1:
                                        OPoke_Index += 1
                                        EnemyNextPokemon = Other_Pokes[OPoke_Index]
                                        EnemyPokemon = False
                                        ChangePokemonDesicion = True
                                    else:
                                        EnemyPokemon = False
                                        Battle_Aftermath = True                             
                                if ChangePokemonDesicion:
                                    self.BattlePlayerPoke.TrappedTurns = 0
                                    self.BattleDialouge(f"{Trainer} is about to bring out {EnemyNextPokemon.Name}. Do you wanna change pokemon",Next=False)
                                    self.BattleDecison()
                                    if self.BattleYes:
                                        Player_Next_Pokemon = True
                                        self.BattleYes = False
                                        ChangePokemonDesicion = False
                                    if self.BattleNo:
                                        self.Opponents_Pokemon = EnemyNextPokemon
                                        self.AddPokeDex(self.Opponents_Pokemon.Name)
                                        Text2 = ''
                                        try:
                                            for i in range(6):
                                                self.Player.Pokemon[i].Level_up = False
                                                self.Player.Pokemon[i].Particaption = False
                                        except:pass
                                        self.BattlePlayerPoke.Particaption = True
                                        self.Opponents_Pokemon.BattleRole = "Enemy"
                                        OPoke_Name = self.Events.Game_Font2.render(self.Opponents_Pokemon.Name,True,"Black")
                                        OPoke_Name_rect = OPoke_Name.get_rect(topleft = (30,10))
                                        OPokeHP = self.Events.Game_font.render("HP:",True,"Black")
                                        OPokeHP_rect = OPokeHP.get_rect(topleft = (110,50))
                                        OPokeLV = self.Events.Game_Font2.render(f"LV:{self.Opponents_Pokemon.Level}",True,"Black")
                                        OPokeLV_rect = OPokeLV.get_rect(topleft = (OPoke_Name_rect.topright[0] + 30,OPoke_Name_rect.y))
                                        TurnEffects = True
                                        Battle_Options = False
                                        self.BattlePlayerPoke.Attack = ''
                                        self.Opponents_Pokemon.Attack = ''
                                        self.BattlePlayerPoke.MoveTurn = ""
                                        Move_Start = False
                                        self.Fight = False
                                        self.Player_Turn[1] = "Done"
                                        self.Enemy_Turn[1] = "Done"
                                        Sleep_Check = True
                                        Rematch = False
                                        self.BattleNo = False
                                        ChangePokemonDesicion = False  
                                        Battle_Over = False                             
                                if Player_Next_Pokemon:
                                    self.Pokemon_Menu()
                                    if self.Player_NP.HP > 0: 
                                        Bring_Out = True
                                        Player_Next_Pokemon = False
                                if Bring_Out:
                                    self.BattleDialouge(f"Lets go {self.Player_NP.NickName}")
                                    self.BattlePlayerPoke.Particaption = False
                                if Rematch:
                                    try:
                                        for i in range(6):
                                            self.Player.Pokemon[i].Level_up = False
                                            self.Player.Pokemon[i].Particaption = False
                                    except:pass
                                    self.BattlePlayerPoke = self.Player_NP
                                    Text2 = ''
                                    self.BattlePlayerPoke.Particaption = True
                                    UPoke_Name = self.Events.Game_Font2.render(self.BattlePlayerPoke.NickName,True,"Black")
                                    UPoke_Name_rect = UPoke_Name.get_rect(topleft = (475,306))
                                    UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
                                    UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
                                    UPokeHP = self.Events.Game_font.render("HP:",True,"Black")
                                    UPokeHP_rect = UPokeHP.get_rect(topleft = (UPoke_Name_rect.x,346))
                                    UPokeHP_Text = self.Events.Game_font.render(f"{self.BattlePlayerPoke.HP}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
                                    UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (530,370))
                                    UPokeHP_Text = self.Events.Game_font.render(f"{round(self.BattlePlayerPoke.HP)}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
                                    UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (530,381))
                                    self.BattlePlayerPoke.Draw_Healthar(UPokeHP_rect.centerx + 20,UPokeHP_rect.centery - 5)
                                    UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
                                    UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
                                    self.UMove1_Rect,self.UMove1_Text,self.UMove1_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[0])
                                    self.UMove2_Rect,self.UMove2_Text,self.UMove2_Text_Rect = self.Make_Option_Button(pygame.Rect((258,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[1])
                                    self.UMove3_Rect,self.UMove3_Text,self.UMove3_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,695),(150,100)),self.BattlePlayerPoke.Moves[2])
                                    self.UMove4_Rect,self.UMove4_Text,self.UMove4_Text_Rect = self.Make_Option_Button(pygame.Rect((258,695),(150,100)),self.BattlePlayerPoke.Moves[3])
                                    self.Opponents_Pokemon = EnemyNextPokemon
                                    self.AddPokeDex(self.Opponents_Pokemon.Name)
                                    self.Opponents_Pokemon.BattleRole = "Enemy"
                                    OPoke_Name = self.Events.Game_Font2.render(self.Opponents_Pokemon.Name,True,"Black")
                                    OPoke_Name_rect = OPoke_Name.get_rect(topleft = (30,10))
                                    OPokeHP = self.Events.Game_font.render("HP:",True,"Black")
                                    OPokeHP_rect = OPokeHP.get_rect(topleft = (110,50))
                                    OPokeLV = self.Events.Game_Font2.render(f"LV:{self.Opponents_Pokemon.Level}",True,"Black")
                                    OPokeLV_rect = OPokeLV.get_rect(topleft = (OPoke_Name_rect.topright[0] + 30,OPoke_Name_rect.y))
                                    TurnEffects = True
                                    Battle_Options = False
                                    self.BattlePlayerPoke.Attack = ''
                                    self.Opponents_Pokemon.Attack = ''
                                    self.BattlePlayerPoke.MoveTurn = ""
                                    self.Fight = False
                                    self.Player_Turn[1] = "Done"
                                    self.Enemy_Turn[1] = "Done"
                                    Rematch = False
                                    Sleep_Check = True
                                    Battle_Over = False
                                    Move_Start = False
                                    self.Player_NP = Pokemon("Squirtle",1,["-",'-','-','-'],"Wild","Squirt")
                                    self.Player_NP.HP = 0                                
                            elif self.BattlePlayerPoke.HP <= 0 and self.Opponents_Pokemon.HP > 0:
                                if Player_Next_Pokemon:
                                    self.Pokemon_Menu()
                                    if self.Player_NP.HP > 0: 
                                        Bring_Out = True
                                        Player_Next_Pokemon = False
                                if Bring_Out:
                                    self.BattleDialouge(f"Lets go {self.Player_NP.NickName}")
                                if Rematch:
                                    self.BattlePlayerPoke = self.Player_NP
                                    self.BattlePlayerPoke.Particaption = True
                                    UPoke_Name = self.Events.Game_Font2.render(self.BattlePlayerPoke.NickName,True,"Black")
                                    UPoke_Name_rect = UPoke_Name.get_rect(topleft = (475,306))
                                    UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
                                    UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
                                    UPokeHP = self.Events.Game_font.render("HP:",True,"Black")
                                    UPokeHP_rect = UPokeHP.get_rect(topleft = (UPoke_Name_rect.x,346))
                                    UPokeHP_Text = self.Events.Game_font.render(f"{self.BattlePlayerPoke.HP}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
                                    UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (530,370))
                                    UPokeHP_Text = self.Events.Game_font.render(f"{round(self.BattlePlayerPoke.HP)}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
                                    UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (530,381))
                                    self.BattlePlayerPoke.Draw_Healthar(UPokeHP_rect.centerx + 20,UPokeHP_rect.centery - 5)
                                    UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
                                    UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
                                    self.UMove1_Rect,self.UMove1_Text,self.UMove1_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[0])
                                    self.UMove2_Rect,self.UMove2_Text,self.UMove2_Text_Rect = self.Make_Option_Button(pygame.Rect((258,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[1])
                                    self.UMove3_Rect,self.UMove3_Text,self.UMove3_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,695),(150,100)),self.BattlePlayerPoke.Moves[2])
                                    self.UMove4_Rect,self.UMove4_Text,self.UMove4_Text_Rect = self.Make_Option_Button(pygame.Rect((258,695),(150,100)),self.BattlePlayerPoke.Moves[3])
                                    TurnEffects = True
                                    Battle_Options = False
                                    Player_Next_Pokemon = False
                                    Bring_Out = False
                                    self.BattlePlayerPoke.Attack = ''
                                    self.Opponents_Pokemon.Attack = ''
                                    self.BattlePlayerPoke.MoveTurn = ""
                                    self.Fight = False
                                    self.Player_Turn[1] = "Done"
                                    Battle_Over = False
                                    self.Enemy_Turn[1] = "Done"
                                    Sleep_Check = True
                                    Move_Start = False
                                    Rematch = False
                                    self.Player_NP = Pokemon("Squirtle",1,["-",'-','-','-'],"Wild","Squirt")
                                    self.Player_NP.HP = 0
                                if OSmack_Talk:self.BattleDialouge(*LoseText)
                                if Player_lost:               
                                    self.BattleDialouge(f"{self.PlayerName} is out of useable pokemon and blacked out")
                            elif self.Opponents_Pokemon.HP <= 0 and self.BattlePlayerPoke.HP <= 0:
                                self.Enemy_Turn[1] = ""
                                self.Player_Turn[1] = ""
                                if Exp_Gain:
                                    self.Particaptionlist = [i[0] for i in enumerate(self.Player.Pokemon) if i[1].HP > 0 and i[1].Particaption]
                                    if not Two_D_ListCheck(self.Player.Bag,"EXP All"):
                                        for i in self.Particaptionlist:
                                            self.Player.Pokemon[i].Exp_Gain(self.Opponents_Pokemon,len(self.Particaptionlist),self.PlayerName,False)
                                    if Two_D_ListCheck(self.Player.Bag,"EXP All"):
                                        for i in range(len(self.Player.Pokemon)):
                                            if self.Player.Pokemon[i].HP > 0:
                                                self.Player.Pokemon[i].Exp_Gain(self.Opponents_Pokemon,len(self.Particaptionlist),self.PlayerName,True)
                                        for poke in self.Player.Pokemon:
                                            if poke not in self.Particaptionlist and poke.HP > 0: self.Particaptionlist.append(poke)
                                    LV_uplist = [i[0] for i in enumerate(self.Player.Pokemon) if i[0] in self.Particaptionlist and i[1].Level_up]
                                    Exp_Gain = False
                                    if len(self.Particaptionlist) == 0:EnemyPokemon = True
                                    if len(self.Particaptionlist) > 0:Exp_Gain_Aftermath_poke1 = True
                                if Exp_Gain_Aftermath_poke1:
                                    if LV_uplist:
                                        if self.Particaptionlist[0] == LV_uplist[0]: 
                                            Text2 = f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[0]].Level}"
                                        else: Text2 = ''
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[0]].GainEXP)} exp",Text2)   
                                if LearnedMovepoke1:
                                    if self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[0]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[0]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            self.BattleNo = False
                                            Poke1EvolutionDescison = True
                                            LearnedMovepoke1 = False
                                    else:
                                        Poke1EvolutionDescison = True
                                        LearnedMovepoke1 = False
                                if Poke1EvolutionDescison:
                                    if self.Player.Pokemon[self.Particaptionlist[0]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[0]].Level and self.Player.Pokemon[self.Particaptionlist[0]].Level_up:
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} is trying to evolve. Should they evolve")
                                        self.BattleDecison()
                                        if self.BattleYes: 
                                            Poke1Evolution = True
                                            Poke1EvolutionDescison = False
                                        if self.BattleNo: 
                                            Exp_Gain_Aftermath_poke2 = True
                                            Poke1EvolutionDescison = False
                                        self.BattleYes,self.BattleNo = False,False
                                    else:
                                        Poke1EvolutionDescison = False
                                        Exp_Gain_Aftermath_poke2 = True
                                if Poke1Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[0]].Front_Img,(400,100))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[0]].NextStage[1]}")
                                if NewPoke1Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[0]].Front_Img,(400,100))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[0]].Name,Caught=True)
                                if LearnedMoveNewpoke1:
                                    if self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[0]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[0]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            self.BattleNo = False
                                            Exp_Gain_Aftermath_poke2 = True
                                            LearnedMoveNewpoke1 = False  
                                    else:
                                        Exp_Gain_Aftermath_poke2 = True
                                        LearnedMoveNewpoke1 = False                           
                                if Exp_Gain_Aftermath_poke2:
                                    if len(self.Particaptionlist) >= 2:
                                        if len(LV_uplist) >= 2:
                                            if self.Particaptionlist[1] == LV_uplist[1]: 
                                                Text2 = f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[1]].Level}"
                                            else: Text2 = ''
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[1]].GainEXP)} exp",Text2)
                                    else:
                                        Exp_Gain_Aftermath_poke2 = False
                                        EnemyPokemon = True
                                if LearnedMovepoke2:
                                    if self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[1]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[1]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            self.BattleNo = False
                                            Poke2EvolutionDescison = True
                                            LearnedMovepoke2 = False
                                    else:
                                        Poke2EvolutionDescison = True
                                        LearnedMovepoke2 = False
                                if Poke2EvolutionDescison:
                                    if len(self.Particaptionlist) > 1:
                                        if self.Player.Pokemon[self.Particaptionlist[1]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[1]].Level and self.Player.Pokemon[self.Particaptionlist[1]].Level_up:
                                            self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} is trying to evolve. Should they evolve")
                                            self.BattleDecison()
                                            if self.BattleYes: 
                                                Poke2Evolution = True
                                                Poke2EvolutionDescison = False
                                            if self.BattleNo: 
                                                Exp_Gain_Aftermath_poke3 = True
                                                Poke2EvolutionDescison = False
                                            self.BattleYes,self.BattleNo = False,False
                                        else:
                                            Poke2EvolutionDescison = False
                                            Exp_Gain_Aftermath_poke3 = True
                                    else:
                                        Poke2EvolutionDescison = False
                                        Exp_Gain_Aftermath_poke3 = True
                                if Poke2Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[1]].Front_Img,(400,100))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[1]].NextStage[1]}")
                                if NewPoke2Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[1]].Front_Img,(400,100))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[1]].Name,Caught=True)
                                if LearnedMoveNewpoke2:
                                    if self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Choice":
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[1]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[1]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            self.BattleNo = False
                                            Poke2EvolutionDescison = True
                                            LearnedMovepoke2 = False
                                    else:
                                        Exp_Gain_Aftermath_poke3 = True
                                        LearnedMoveNewpoke2 = False
                                if Exp_Gain_Aftermath_poke3:
                                    if len(self.Particaptionlist) >= 3:
                                        if len(LV_uplist) >= 3:
                                            if self.Particaptionlist[2] == LV_uplist[2]: 
                                                Text2 = f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[2]].Level}"
                                            else: Text2 = ''
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[2]].GainEXP)} exp",Text2)
                                    else:
                                        Exp_Gain_Aftermath_poke3 = False
                                        EnemyPokemon = True
                                if LearnedMovepoke3:
                                    if self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[2]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[2]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            self.BattleNo = False
                                            Poke3EvolutionDescison = True
                                            LearnedMovepoke3 = False
                                    else:
                                        Poke3EvolutionDescison = True
                                        LearnedMovepoke3 = False
                                if Poke3EvolutionDescison:
                                    if len(self.Particaptionlist) > 2:
                                        if self.Player.Pokemon[self.Particaptionlist[2]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[2]].Level and self.Player.Pokemon[self.Particaptionlist[2]].Level_up:
                                            self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} is trying to evolve. Should they evolve")
                                            self.BattleDecison()
                                            if self.BattleYes: 
                                                Poke3Evolution = True
                                                Poke3EvolutionDescison = False
                                            if self.BattleNo: 
                                                Exp_Gain_Aftermath_poke4 = True
                                                Poke3EvolutionDescison = False
                                            self.BattleYes,self.BattleNo = False,False
                                        else:
                                            Poke3EvolutionDescison = False
                                            Exp_Gain_Aftermath_poke4 = True
                                    else:
                                        Poke3EvolutionDescison = False
                                        Exp_Gain_Aftermath_poke4 = True
                                if Poke3Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[2]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[2]].NextStage[1]}")
                                if NewPoke3Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[2]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[2]].Name,Caught=True)
                                if LearnedMoveNewpoke3:
                                    if self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[2]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[2]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            self.BattleNo = False
                                            Exp_Gain_Aftermath_poke4 = True
                                            LearnedMoveNewpoke3 = False
                                    else:
                                        Exp_Gain_Aftermath_poke4 = True
                                        LearnedMoveNewpoke3 = False
                                if Exp_Gain_Aftermath_poke4:
                                    if len(self.Particaptionlist) >= 4:
                                        if len(LV_uplist) >= 4:
                                            if self.Particaptionlist[3] == LV_uplist[3]: 
                                                Text2 = f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[3]].Level}"
                                            else: Text2 = ''
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[3]].GainEXP)} exp",Text2)
                                    else:
                                        Exp_Gain_Aftermath_poke4 = False
                                        EnemyPokemon = True
                                if LearnedMovepoke4:
                                    if self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[3]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[3]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            self.BattleNo = False
                                            Poke4EvolutionDescison = True
                                            LearnedMovepoke4 = False
                                    else:
                                        Poke4EvolutionDescison = True
                                        LearnedMovepoke4 = False
                                if Poke4EvolutionDescison:
                                    if len(self.Particaptionlist) > 3:
                                        if self.Player.Pokemon[self.Particaptionlist[3]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[3]].Level and self.Player.Pokemon[self.Particaptionlist[3]].Level_up:
                                            self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} is trying to evolve. Should they evolve")
                                            self.BattleDecison()
                                            if self.BattleYes: 
                                                Poke4Evolution = True
                                                Poke4EvolutionDescison = False
                                            if self.BattleNo: 
                                                Exp_Gain_Aftermath_poke5 = True
                                                Poke4EvolutionDescison = False
                                            self.BattleYes,self.BattleNo = False,False
                                        else:
                                            Poke4EvolutionDescison = False
                                            Exp_Gain_Aftermath_poke5 = True
                                    else:
                                        Poke4EvolutionDescison = False
                                        Exp_Gain_Aftermath_poke5 = True
                                if Poke4Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[3]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[3]].NextStage[1]}")
                                if NewPoke4Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[3]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[3]].Name,Caught=True)
                                if LearnedMoveNewpoke4:
                                    if self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[3]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[3]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            self.BattleNo = False
                                            Exp_Gain_Aftermath_poke5 = True
                                            LearnedMoveNewpoke4 = False    
                                    else:
                                        Exp_Gain_Aftermath_poke5 = True
                                        LearnedMoveNewpoke4 = False                              
                                if Exp_Gain_Aftermath_poke5:
                                    if len(self.Particaptionlist) >= 5:
                                        if len(LV_uplist) >= 5:
                                            if self.Particaptionlist[4] == LV_uplist[4]: 
                                                Text2 = f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[4]].Level}"
                                            else: Text2 = ''
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[4]].GainEXP)} exp",Text2)
                                    else:
                                        Exp_Gain_Aftermath_poke5 = False
                                        EnemyPokemon = True
                                if LearnedMovepoke5:
                                    if self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[4]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[4]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            self.BattleNo = False
                                            Poke5EvolutionDescison = True
                                            LearnedMovepoke5 = False
                                    else:
                                        Poke5EvolutionDescison = True
                                        LearnedMovepoke5 = False
                                if Poke5EvolutionDescison:
                                    if len(self.Particaptionlist) > 4:
                                        if self.Player.Pokemon[self.Particaptionlist[4]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[4]].Level and self.Player.Pokemon[self.Particaptionlist[4]].Level_up:
                                            self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} is trying to evolve. Should they evolve")
                                            self.BattleDecison()
                                            if self.BattleYes: 
                                                Poke5Evolution = True
                                                Poke5EvolutionDescison = False
                                            if self.BattleNo: 
                                                Exp_Gain_Aftermath_poke6 = True
                                                Poke5EvolutionDescison = False
                                            self.BattleYes,self.BattleNo = False,False
                                        else:
                                            Poke5EvolutionDescison = False
                                            Exp_Gain_Aftermath_poke6 = True
                                    else:
                                        Poke5EvolutionDescison = False
                                        EnemyPokemon = True
                                if Poke5Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[4]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[4]].NextStage[1]}")
                                if NewPoke5Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[4]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[4]].Name,Caught=True)
                                if LearnedMoveNewpoke5:
                                    if self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[4]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[4]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            self.BattleNo = False
                                            Exp_Gain_Aftermath_poke6 = True
                                            LearnedMovepoke5 = False
                                    else:
                                        EnemyPokemon = True
                                        LearnedMoveNewpoke5 = False       
                                if EnemyPokemon:
                                    if len(Other_Pokes) > OPoke_Index + 1:
                                        OPoke_Index += 1
                                        EnemyNextPokemon = Other_Pokes[OPoke_Index]
                                        EnemyPokemon = False
                                        ChangePokemonDesicion = True
                                    else:
                                        EnemyPokemon = False
                                        Battle_Aftermath = True   
                                if ChangePokemonDesicion:
                                    self.Opponents_Pokemon = EnemyNextPokemon
                                    self.AddPokeDex(self.Opponents_Pokemon.Name)
                                    Text2 = ''
                                    try:
                                        for i in range(6):
                                            self.Player.Pokemon[i].Level_up = False
                                            self.Player.Pokemon[i].Particaption = False
                                    except:pass
                                    self.BattlePlayerPoke.Particaption = True
                                    self.Opponents_Pokemon.BattleRole = "Enemy"
                                    OPoke_Name = self.Events.Game_Font2.render(self.Opponents_Pokemon.Name,True,"Black")
                                    OPoke_Name_rect = OPoke_Name.get_rect(topleft = (30,10))
                                    OPokeHP = self.Events.Game_font.render("HP:",True,"Black")
                                    OPokeHP_rect = OPokeHP.get_rect(topleft = (110,50))
                                    OPokeLV = self.Events.Game_Font2.render(f"LV:{self.Opponents_Pokemon.Level}",True,"Black")
                                    OPokeLV_rect = OPokeLV.get_rect(topleft = (OPoke_Name_rect.topright[0] + 30,OPoke_Name_rect.y))
                                    self.BattlePlayerPoke.Attack = ''
                                    self.Opponents_Pokemon.Attack = ''
                                    self.BattlePlayerPoke.MoveTurn = ""
                                    ChangePokemonDesicion = False   
                                    Player_Next_Pokemon = True                                       
                                if Player_Next_Pokemon:
                                    self.Pokemon_Menu()
                                    if self.Player_NP.HP > 0: 
                                        Bring_Out = True
                                        Player_Next_Pokemon = False
                                if Bring_Out:
                                    self.BattleDialouge(f"Lets go {self.Player_NP.NickName}")
                                    self.BattlePlayerPoke.Particaption = False
                                if Rematch:
                                    self.BattlePlayerPoke = self.Player_NP
                                    Text2 = ''
                                    self.BattlePlayerPoke.Particaption = True
                                    UPoke_Name = self.Events.Game_Font2.render(self.BattlePlayerPoke.NickName,True,"Black")
                                    UPoke_Name_rect = UPoke_Name.get_rect(topleft = (475,306))
                                    UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
                                    UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
                                    UPokeHP = self.Events.Game_font.render("HP:",True,"Black")
                                    UPokeHP_rect = UPokeHP.get_rect(topleft = (UPoke_Name_rect.x,346))
                                    UPokeHP_Text = self.Events.Game_font.render(f"{self.BattlePlayerPoke.HP}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
                                    UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (530,370))
                                    UPokeHP_Text = self.Events.Game_font.render(f"{round(self.BattlePlayerPoke.HP)}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
                                    UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (530,381))
                                    self.BattlePlayerPoke.Draw_Healthar(UPokeHP_rect.centerx + 20,UPokeHP_rect.centery - 5)
                                    UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
                                    UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
                                    self.UMove1_Rect,self.UMove1_Text,self.UMove1_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[0])
                                    self.UMove2_Rect,self.UMove2_Text,self.UMove2_Text_Rect = self.Make_Option_Button(pygame.Rect((258,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[1])
                                    self.UMove3_Rect,self.UMove3_Text,self.UMove3_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,695),(150,100)),self.BattlePlayerPoke.Moves[2])
                                    self.UMove4_Rect,self.UMove4_Text,self.UMove4_Text_Rect = self.Make_Option_Button(pygame.Rect((258,695),(150,100)),self.BattlePlayerPoke.Moves[3])
                                    TurnEffects = True
                                    Battle_Options = False
                                    self.BattlePlayerPoke.Attack = ''
                                    self.Opponents_Pokemon.Attack = ''
                                    self.BattlePlayerPoke.MoveTurn = ""
                                    self.Fight = False
                                    self.Player_Turn[1] = "Done"
                                    self.Enemy_Turn[1] = "Done"
                                    Rematch = False
                                    Sleep_Check = True
                                    Battle_Over = False
                                    Move_Start = False
                                    self.Player_NP = Pokemon("Squirtle",1,["-",'-','-','-'],"Wild","Squirt")
                                    self.Player_NP.HP = 0 
                            if Battle_Aftermath:
                                Trainer_rect.topleft = (574,36)
                                SCREEN.blit(Trainer_img,Trainer_rect)
                                pygame.draw.line(SCREEN,"Black",(470,401),(680,401),5) #Player
                                pygame.draw.line(SCREEN,"Black",(678,371),(678,401),5)
                                SCREEN.blit(UPoke_Name,UPoke_Name_rect)
                                SCREEN.blit(UPokeLV,UPokeLV_rect)
                                SCREEN.blit(UPokeHP,UPokeHP_rect)
                                self.BattlePlayerPoke.Draw_Healthar(UPokeHP_rect.centerx + 20,UPokeHP_rect.centery - 5)
                                SCREEN.blit(self.BattlePlayerPoke.Back_Img,self.BattlePlayerPoke.PlayerBattlerect)
                                SCREEN.blit(UPokeHP_Text,UPokeHP_Text_rect)
                                self.BattleDialouge(WinText[0],WinText[1],WinText[2],f"{self.PlayerName} got ${Money}")
                                self.State_of_Battle = "Win"
                            if Exit:
                                self.Player.Money += Money
                                self.Player.Money += Extra_Money
                                self.BattleStart = False
                                self.Black_Screen = pygame.Rect(-1000,0,SCREEN.get_width(),SCREEN.get_height())
                                break                    
                pygame.display.update()
                clock.tick(120)
            self.Reset_PokemonAfterBattle()

    def WIldBattle(self):
        self.Opponents_Pokemon.BattleRole = "Enemy"
        OPoke_Name = self.Events.Game_Font2.render(self.Opponents_Pokemon.Name,True,"Black")
        OPoke_Name_rect = OPoke_Name.get_rect(topleft = (30,10))
        OPokeHP = self.Events.Game_font.render("HP:",True,"Black")
        OPokeHP_rect = OPokeHP.get_rect(topleft = (110,50))
        OPokeLV = self.Events.Game_Font2.render(f"LV:{self.Opponents_Pokemon.Level}",True,"Black")
        OPokeLV_rect = OPokeLV.get_rect(topleft = (OPoke_Name_rect.topright[0] + 30,OPoke_Name_rect.y))
        OPokeStatus_Text = self.Events.Game_font.render(self.Opponents_Pokemon.Status,True,"Black")
        OPokeStatus_rect = OPokeStatus_Text.get_rect(topleft = (261, 43))
        UPokeHP = self.Events.Game_font.render("HP:",True,"Black")
        Trainer_Intro = True
        Pokemon_Intro = False
        Get_Moves = False
        UIndex= 9
        Text2 = ''
        Speed_Test = False
        self.Player_Turn = [1,"None"]
        Poke_Animation = False
        self.Enemy_Turn = [0,"None"]
        Battle = False
        Battle_Options = True
        Run_Aftermath = False
        Exp_Gain = True
        Exp_Gain_Aftermath_poke1 = False
        LearnedMovepoke1 = False
        Poke1EvolutionDescison = False
        LearnedMoveNewpoke1 = False
        Poke1Evolution = False
        NewPoke1Evolution = False
        Exp_Gain_Aftermath_poke2 = False
        LearnedMovepoke2 = False
        Poke2EvolutionDescison = False
        LearnedMoveNewpoke2 = False
        Poke2Evolution = False
        NewPoke2Evolution = False
        Exp_Gain_Aftermath_poke3 = False
        LearnedMovepoke3 = False
        Poke3EvolutionDescison = False
        LearnedMoveNewpoke3 = False
        Poke3Evolution = False
        NewPoke3Evolution = False
        Exp_Gain_Aftermath_poke4 = False
        LearnedMovepoke4 = False
        Poke4EvolutionDescison = False
        LearnedMoveNewpoke4 = False
        Poke4Evolution = False
        NewPoke4Evolution = False
        Exp_Gain_Aftermath_poke5 = False
        LearnedMovepoke5 = False
        Poke5EvolutionDescison = False
        LearnedMoveNewpoke5 = False
        Poke5Evolution = False
        NewPoke5Evolution = False
        Exp_Gain_Aftermath_poke6 = False
        LearnedMovepoke6 = False
        Poke6EvolutionDescison = False
        LearnedMoveNewpoke6 = False
        Poke6Evolution = False
        NewPoke6Evolution = False
        self.Particaptionlist = []
        Battle_Over = False
        Battle_Aftermath = False
        Exit = False
        Bring_Out = False
        TurnEffects = False
        TurnEffectsAftermath = False
        Player_Next_Pokemon = False
        Player_lost = False
        Rematch = False
        TurnAftermath1 = ''
        TurnAftermath2 = ''
        Caught = [False,0]
        Catching_Aftermath = False
        Shake_1 = False
        Shake_2 = False
        Shake_3 = False
        Catch_Confirm = False
        NickName = ''
        NickName_surf = self.Events.Game_font.render(NickName,True,"Black")
        NickName_rect = NickName_surf.get_rect(center = self.Events.NameInputBox.center)
        NickName_Maker = False
        Attempts = 0
        Parlyz_Check = False
        ParaEffect = random.randint(1,4)
        Confusion_Effect = False
        Move_Call = False
        Move_Start = False
        Confusion_Check = False
        Sleep_Check = True
        UTrap_Damage = 0
        OTrap_Damage = 0
        Confusion_Aftermath = False
        running = True
        Drained_HP = False
        UAwake_Check = False
        Status_Check = False
        Battle_overp1 = False
        UAble_Check = False
        UTrapped_Check = False
        OTrapped_Check = False
        OAwake_Check = False
        Flinch_Check = False
        FRZ_Check = False
        UThawed = False
        OThawed = False
        OAble_Check = False
        Disobey = []
        Obediance_Fail = False
        Obediance_Check = False
        Extra_Money = 0
        if self.BattleStart:
            self.Player.Moveable = False
            self.AddPokeDex(self.Opponents_Pokemon.Name)
            while self.Black_Screen.x <= SCREEN.get_width():
                self.Black_Screen.x += 10
                pygame.draw.rect(SCREEN,"Black",self.Black_Screen)
                pygame.display.update()
            self.Draw_Player = False
            for poke in self.Player.Pokemon:
                if poke.HP > 0:
                    poke.In_Battle = True
                    poke.Particaption = True
                    self.BattlePlayerPoke:Pokemon = poke
                    break
            UPoke_Name = self.Events.Game_Font2.render(self.BattlePlayerPoke.NickName,True,"Black")
            UPoke_Name_rect = UPoke_Name.get_rect(topleft = (475,306))
            UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
            UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
            UPokeHP = self.Events.Game_font.render("HP:",True,"Black")
            UPokeHP_rect = UPokeHP.get_rect(topleft = (UPoke_Name_rect.x,346))
            UPokeHP_Text = self.Events.Game_font.render(f"{self.BattlePlayerPoke.HP}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
            UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (530,370))
            UStatus_Text = self.Events.Game_font.render(self.BattlePlayerPoke.Status,True,"Black")
            UStatus_rect = UStatus_Text.get_rect(topleft = (530,3))
            self.UMove1_Rect,self.UMove1_Text,self.UMove1_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[0])
            self.UMove2_Rect,self.UMove2_Text,self.UMove2_Text_Rect = self.Make_Option_Button(pygame.Rect((258,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[1])
            self.UMove3_Rect,self.UMove3_Text,self.UMove3_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,695),(150,100)),self.BattlePlayerPoke.Moves[2])
            self.UMove4_Rect,self.UMove4_Text,self.UMove4_Text_Rect = self.Make_Option_Button(pygame.Rect((258,695),(150,100)),self.BattlePlayerPoke.Moves[3])
            while running:
                self.BattlePlayerPoke.EnemyBattlerect,self.Opponents_Pokemon.PlayerBattlerect = self.Opponents_Pokemon.EnemyBattlerect,self.BattlePlayerPoke.PlayerBattlerect
                for e in pygame.event.get():
                    if e.type == pygame.QUIT:
                        pygame.quit()
                        sys.exit()
                    if (self.BattlePokemon or self.Healing_Item[1]) and e.type == pygame.KEYDOWN:
                        if e.key == pygame.K_BACKSPACE: self.Back = True
                    if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                        if Trainer_Intro:
                            Trainer_Intro = False
                            Pokemon_Intro = True
                        elif Pokemon_Intro:
                            Pokemon_Intro = False
                            Battle = True
                        elif Battle:
                            if self.Run: self.Run = False
                            elif TurnEffectsAftermath: TurnEffectsAftermath,Battle_Options = False,True
                            elif self.Player_Turn[1] == "Move Call":
                                if Sleep_Check:
                                    Sleep_Check = False
                                    self.Player_Turn[1] = "Battle Over?"
                                if Parlyz_Check:
                                    Parlyz_Check = False
                                    self.Player_Turn[1] = "Battle Over?"
                                    ParaEffect = random.randint(1,4)
                                if FRZ_Check:
                                    FRZ_Check = False
                                    self.Player_Turn[1] = "Battle Over?"
                                if Confusion_Check:
                                    if self.BattlePlayerPoke.Status2 == "Confused" and self.BattlePlayerPoke.ConfusionTimeLimit > 0:Confusion_Effect = True
                                    elif self.BattlePlayerPoke.Status2 == "Confused" and self.BattlePlayerPoke.ConfusionTimeLimit == 0:
                                        Flinch_Check = True
                                        self.BattlePlayerPoke.Status2 = ""
                                    Confusion_Check = False
                                elif self.BattlePlayerPoke.TrappedTurns > 0:
                                    self.BattlePlayerPoke.ExtraTargetHP = self.BattlePlayerPoke.HP - OTrap_Damage
                                    self.Player_Turn[1] = "T.HP animation"
                                elif Flinch_Check and self.BattlePlayerPoke.Attack == "Flinch":
                                    self.Player_Turn[1] = "Battle Over?"
                                    Flinch_Check = False
                                    self.BattlePlayerPoke.Attack = ""
                                    Battle_overp1 = True
                                elif Obediance_Fail:
                                    if Disobey[1] in (f"{self.BattlePlayerPoke.NickName} smells the roses",f"{self.BattlePlayerPoke.NickName} flipped you off"):
                                        self.Player_Turn[1] = "Move Aftermath"
                                        self.BattlePlayerPoke.AftermathText1,self.BattlePlayerPoke.AftermathText2,self.BattlePlayerPoke.AftermathText3 = "","",""
                                    elif Disobey[1] == f"{self.BattlePlayerPoke.NickName} instead used {self.BattlePlayerPoke.Attack}":
                                        self.BattlePlayerPoke.Get_Move(self.BattlePlayerPoke,self.Opponents_Pokemon)
                                        self.Opponents_Pokemon.TargetHP = self.Opponents_Pokemon.HP - self.BattlePlayerPoke.AttackDamage
                                        if True in (self.Opponents_Pokemon.Fly,self.Opponents_Pokemon.Dig) and self.BattlePlayerPoke.Attack not in self.BattlePlayerPoke.PokemonMoves.UnAffectedFlyMoves and self.BattlePlayerPoke.Attack not in self.BattlePlayerPoke.PokemonMoves.SelfStatChangingList:
                                            self.Opponents_Pokemon.TargetHP = self.Opponents_Pokemon.HP
                                            self.BattlePlayerPoke.MissedMove()
                                        self.Player_Turn[1] = "Move animation"
                                    elif Disobey[1] == f"{self.BattlePlayerPoke.NickName} took a nap":
                                        self.Player_Turn[1] = "Move Aftermath"
                                        self.BattlePlayerPoke.Attack_AfterMath("SLP",'',0,'',0,False)
                                        self.BattlePlayerPoke.AftermathText1,self.BattlePlayerPoke.AftermathText2,self.BattlePlayerPoke.AftermathText3 = "","",""
                                    else:
                                        self.BattlePlayerPoke.ExtraTargetHP = self.BattlePlayerPoke.ConfusionEffect()
                                        self.Player_Turn[1] = "C.HP animation"
                                        self.BattlePlayerPoke.AftermathText1,self.BattlePlayerPoke.AftermathText2,self.BattlePlayerPoke.AftermathText3 = "","",""
                                elif Confusion_Aftermath:
                                    Confusion_Aftermath = False
                                    self.Player_Turn[1] = "C.HP animation"
                                elif Move_Call: 
                                    Move_Call = False
                                    if True in (self.Opponents_Pokemon.Fly,self.Opponents_Pokemon.Dig) and self.BattlePlayerPoke.Attack not in self.BattlePlayerPoke.PokemonMoves.UnAffectedFlyMoves and self.BattlePlayerPoke.Attack not in self.BattlePlayerPoke.PokemonMoves.SelfStatChangingList:
                                        self.Opponents_Pokemon.TargetHP = self.Opponents_Pokemon.HP
                                        self.BattlePlayerPoke.MissedMove()
                                    self.Player_Turn[1] = "Move animation"
                                    ParaEffect = random.randint(1,4)
                            elif self.Enemy_Turn[1] == "Move Call": 
                                if Sleep_Check:
                                    Sleep_Check = False
                                    self.Enemy_Turn[1] = "Battle Over?"
                                    Battle_overp1 = True
                                if Parlyz_Check:
                                    Parlyz_Check = False
                                    self.Enemy_Turn[1] = "Battle Over?"
                                    ParaEffect = random.randint(1,4)
                                if FRZ_Check:
                                    FRZ_Check = False
                                    self.Enemy_Turn[1] = "Battle Over?"
                                if Confusion_Check:
                                    if self.Opponents_Pokemon.Status2 == "Confused" and self.Opponents_Pokemon.ConfusionTimeLimit > 0:Confusion_Effect = True
                                    elif self.Opponents_Pokemon.Status2 == "Confused" and self.Opponents_Pokemon.ConfusionTimeLimit == 0:
                                        Flinch_Check = True
                                        self.Opponents_Pokemon.Status2 = ""
                                    Confusion_Check = False     
                                elif self.Opponents_Pokemon.TrappedTurns > 0:
                                    self.Opponents_Pokemon.ExtraTargetHP = self.Opponents_Pokemon.HP - UTrap_Damage
                                    self.Enemy_Turn[1] = "T.HP animation"
                                elif Flinch_Check and self.Opponents_Pokemon.Attack == "Flinch":
                                    self.Enemy_Turn[1] = "Battle Over?"
                                    Flinch_Check = False
                                    self.Opponents_Pokemon.Attack = ""
                                    Battle_overp1 = True
                                elif Confusion_Aftermath:
                                    Confusion_Aftermath = False
                                    self.Enemy_Turn[1] == "C.HP animation"
                                elif Move_Call: 
                                    Move_Call = False
                                    if True in (self.BattlePlayerPoke.Fly,self.BattlePlayerPoke.Dig) and self.Opponents_Pokemon.Attack not in self.BattlePlayerPoke.PokemonMoves.UnAffectedFlyMoves and self.Opponents_Pokemon.Attack not in self.BattlePlayerPoke.PokemonMoves.SelfStatChangingList:
                                        self.BattlePlayerPoke.TargetHP = self.BattlePlayerPoke.HP
                                        self.Opponents_Pokemon.MissedMove()
                                    self.Enemy_Turn[1] = "Move animation"
                                    ParaEffect = random.randint(1,4)
                            elif self.Player_Turn[1] == "Move Aftermath": 
                                self.Player_Turn[1] = "Battle Over?"
                                if self.Opponents_Pokemon.LightScreenUp and self.BattlePlayerPoke.Attack != "" and self.BattlePlayerPoke.AttackDamage > 0 and Pokemon_Move_Type[self.BattlePlayerPoke.Attack] in self.BattlePlayerPoke.PokemonMoves.SpecialMoves:
                                    self.Opponents_Pokemon.LightScreenDamage += 1
                                if self.Opponents_Pokemon.ReflectUp and self.BattlePlayerPoke.Attack != "" and self.BattlePlayerPoke.AttackDamage > 0 and Pokemon_Move_Type[self.BattlePlayerPoke.Attack] not in self.BattlePlayerPoke.PokemonMoves.SpecialMoves:
                                    self.Opponents_Pokemon.ReflectDamage += 1
                                Battle_overp1 = True
                            elif self.Enemy_Turn[1] == "Move Aftermath":  
                                Battle_overp1 = True
                                if self.BattlePlayerPoke.LightScreenUp and self.Opponents_Pokemon.Attack != "" and self.Opponents_Pokemon.AttackDamage > 0 and Pokemon_Move_Type[self.Opponents_Pokemon.Attack] in self.BattlePlayerPoke.PokemonMoves.SpecialMoves:
                                    self.BattlePlayerPoke.LightScreenDamage += 1
                                if self.BattlePlayerPoke.ReflectUp and self.Opponents_Pokemon.Attack != "" and self.Opponents_Pokemon.AttackDamage > 0 and Pokemon_Move_Type[self.Opponents_Pokemon.Attack] not in self.BattlePlayerPoke.PokemonMoves.SpecialMoves:
                                    self.BattlePlayerPoke.ReflectDamage += 1
                                self.Enemy_Turn[1] = "Battle Over?"
                            elif self.Player_Turn[1] == "Battle Over?" or self.Enemy_Turn[1] == "Battle Over?":
                                if UAwake_Check:
                                    UAwake_Check = False
                                elif OAwake_Check:
                                    OAwake_Check = False
                                elif UAble_Check:
                                    UAble_Check = False
                                elif OAble_Check:
                                    OAble_Check = False
                                elif UTrapped_Check:UTrapped_Check=False
                                elif OTrapped_Check:OTrapped_Check=False
                                elif UThawed:
                                    UThawed = False
                                    self.BattlePlayerPoke.Status = "OK"
                                elif OThawed:
                                    OThawed = False
                                    self.Opponents_Pokemon.Status = "OK"
                            elif Run_Aftermath:
                                if run: Battle_Over,Exit = True,True
                                else:
                                    Run_Aftermath = False
                                    self.MissedTurn()
                                    self.Enemy_Turn[1] = "Move Call"
                                    self.Enemy_Turn[0] = 2
                            elif Shake_1:
                                Shake_1 = False
                                Shake_2 = True
                            elif Shake_2:
                                Shake_2 = False
                                Shake_3 = True
                            elif Shake_3:
                                Shake_3 = False
                                Catch_Confirm = True
                            elif Catch_Confirm:
                                if Caught[0]:
                                    NickName_Maker = True
                                    Caught = [False,3] 
                                    Catch_Confirm = False                               
                                else:
                                    self.Player.Remove_Bag(self.Catching[1],1)
                                    self.MissedTurn()
                                    self.Catching[0] = False
                                    self.Enemy_Turn[1] = "Move Call"
                                    self.Enemy_Turn[0] = 2
                                    Catch_Confirm = False
                                    Catching_Aftermath = False
                            elif Exp_Gain_Aftermath_poke1: 
                                Exp_Gain_Aftermath_poke1= False
                                LearnedMovepoke1 = True
                            elif LearnedMovepoke1:
                                if self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Learned":
                                    Poke1EvolutionDescison = True
                                    LearnedMovepoke1 = False
                                elif self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        Poke1EvolutionDescison = True
                                        LearnedMovepoke1 = False
                                        self.MoveDesicion = False
                                        self.BattleYes,self.BattleNo = False,False
                                Text2 = ''
                            elif Poke1Evolution:
                                Poke1Evolution = False
                                self.Player.Pokemon[self.Particaptionlist[0]].Evoluation()
                                NewPoke1Evolution = True
                            elif NewPoke1Evolution:
                                NewPoke1Evolution = False
                                LearnedMoveNewpoke1 = True
                            elif LearnedMoveNewpoke1:
                                if self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Learned":
                                    LearnedMoveNewpoke1 = False
                                    Exp_Gain_Aftermath_poke2 = True
                                elif self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        LearnedMoveNewpoke1 = False
                                        self.MoveDesicion = False
                                        Exp_Gain_Aftermath_poke2 = True
                                        self.BattleYes,self.BattleNo = False,False
                                Text2 = ''
                            elif Exp_Gain_Aftermath_poke2: 
                                Exp_Gain_Aftermath_poke2= False
                                LearnedMovepoke2 = True
                            elif LearnedMovepoke2:
                                if self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Learned":
                                    Poke2EvolutionDescison = True
                                    LearnedMovepoke2 = False
                                elif self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        Poke2EvolutionDescison = True
                                        LearnedMovepoke2 = False
                                        self.MoveDesicion = False
                                        self.BattleYes,self.BattleNo = False,False
                                Text2 = ''
                            elif Poke2Evolution:
                                Poke2Evolution = False
                                self.Player.Pokemon[self.Particaptionlist[1]].Evoluation()
                                NewPoke2Evolution = True
                            elif NewPoke2Evolution:
                                NewPoke2Evolution = False
                                LearnedMoveNewpoke2 = True
                            elif LearnedMoveNewpoke2:
                                if self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Learned":
                                    LearnedMoveNewpoke2 = False
                                    Exp_Gain_Aftermath_poke3 = True   
                                elif self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        Exp_Gain_Aftermath_poke3 = True
                                        self.MoveDesicion = False
                                        LearnedMoveNewpoke2 = False
                                        self.BattleYes,self.BattleNo = False,False   
                                Text2 = ''
                            elif Exp_Gain_Aftermath_poke3: 
                                Exp_Gain_Aftermath_poke3= False
                                LearnedMovepoke3 = True
                            elif LearnedMovepoke3:
                                if self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Learned":
                                    Poke3EvolutionDescison = True
                                    LearnedMovepoke3 = False
                                elif self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        Poke3EvolutionDescison = True
                                        self.MoveDesicion = False
                                        LearnedMovepoke3 = False
                                        self.BattleYes,self.BattleNo = False,False
                                Text2 = ''
                            elif Poke3Evolution:
                                Poke3Evolution = False
                                self.Player.Pokemon[self.Particaptionlist[2]].Evoluation()
                                NewPoke3Evolution = True
                            elif NewPoke3Evolution:
                                NewPoke3Evolution = False
                                LearnedMoveNewpoke3 = True
                            elif LearnedMoveNewpoke3:
                                if self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Learned":
                                    LearnedMoveNewpoke3 = False
                                    Exp_Gain_Aftermath_poke4 = True
                                elif self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        self.BattleYes,self.BattleNo = False,False
                                        self.MoveDesicion = False
                                        LearnedMoveNewpoke3 = False
                                        Exp_Gain_Aftermath_poke4 = True
                                Text2 = ''
                            elif Exp_Gain_Aftermath_poke4: 
                                Exp_Gain_Aftermath_poke4= False
                                LearnedMovepoke4 = True
                            elif LearnedMovepoke4:
                                if self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Learned":
                                    Poke4EvolutionDescison = True
                                    LearnedMovepoke4 = False
                                elif self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        self.BattleYes,self.BattleNo = False,False
                                        Poke4EvolutionDescison = True
                                        self.MoveDesicion = False
                                        LearnedMovepoke4 = False 
                                Text2 = ''                            
                            elif Poke4Evolution:
                                Poke4Evolution = False
                                self.Player.Pokemon[self.Particaptionlist[3]].Evoluation()
                                NewPoke4Evolution = True
                            elif NewPoke4Evolution:
                                NewPoke4Evolution = False
                                LearnedMoveNewpoke4 = True
                            elif LearnedMoveNewpoke4:
                                if self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Learned":
                                    LearnedMoveNewpoke4 = False
                                    Exp_Gain_Aftermath_poke5 = True
                                elif self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        self.BattleYes,self.BattleNo = False,False
                                        LearnedMoveNewpoke4 = False
                                        self.MoveDesicion = False
                                        Exp_Gain_Aftermath_poke5 = True
                                Text2 = ''
                            elif Exp_Gain_Aftermath_poke5: 
                                Exp_Gain_Aftermath_poke5= False
                                LearnedMovepoke5 = True
                            elif LearnedMovepoke5:
                                if self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Learned":
                                    Poke5EvolutionDescison = True
                                    LearnedMovepoke5 = False
                                elif self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        self.BattleYes,self.BattleNo = False,False
                                        Poke5EvolutionDescison = True
                                        self.MoveDesicion = False
                                        LearnedMovepoke5 = False
                                Text2 = ''
                            elif Poke5Evolution:
                                Poke5Evolution = False
                                self.Player.Pokemon[self.Particaptionlist[4]].Evoluation()
                                NewPoke5Evolution = True
                            elif NewPoke5Evolution:
                                NewPoke5Evolution = False
                                LearnedMoveNewpoke5 = True
                            elif LearnedMoveNewpoke5:
                                if self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Learned":
                                    LearnedMoveNewpoke5 = False
                                    Exp_Gain_Aftermath_poke6 = True
                                elif self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        self.BattleYes,self.BattleNo = False,False
                                        LearnedMoveNewpoke5 = False
                                        self.MoveDesicion = False
                                        Exp_Gain_Aftermath_poke6 = True
                                Text2 = ''
                            elif Exp_Gain_Aftermath_poke6: 
                                Exp_Gain_Aftermath_poke6= False
                                LearnedMovepoke6 = True
                            elif LearnedMovepoke6:
                                if self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Learned":
                                    LearnedMovepoke6 = False
                                    Poke6EvolutionDescison = True
                                elif self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        self.BattleYes,self.BattleNo = False,False
                                        LearnedMovepoke6 = False
                                        self.MoveDesicion = False
                                        Poke6EvolutionDescison = True
                                Text2 = ''
                            elif Poke6EvolutionDescison:
                                Poke6EvolutionDescison = False
                                Poke6Evolution = True
                            elif Poke6Evolution:
                                Poke6Evolution = False
                                self.Player.Pokemon[self.Particaptionlist[5]].Evoluation()
                                NewPoke6Evolution = True
                            elif NewPoke6Evolution:
                                NewPoke6Evolution = False
                                LearnedMoveNewpoke6 = True
                            elif LearnedMoveNewpoke6:
                                if self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Learned":
                                    LearnedMoveNewpoke6 = False
                                    Exit = True
                                elif self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Choice":
                                    if not self.AnotherMove and (self.AnotherMoveGiven or not self.AnotherMoveGiven):
                                        self.AnotherMove = False
                                        self.BattleYes,self.BattleNo = False,False
                                        LearnedMoveNewpoke6 = False
                                        self.MoveDesicion = False
                                        Exit = True
                                Text2 = ''
                            elif Player_lost:
                                self.PlayerLost()
                                self.BattleStart = False
                                running = False
                            elif Bring_Out:
                                Rematch = True
                                Bring_Out = False
                                Player_Next_Pokemon = False
                    if NickName_Maker:
                        self.Events.NameInputBox.w = max(50,NickName_surf.get_width()) + 10
                        if e.type == pygame.KEYDOWN:
                            if e.key == pygame.K_BACKSPACE:
                                NickName = NickName[:-1]
                            elif e.key == pygame.K_RETURN and len(NickName) >= 1:
                                self.Opponents_Pokemon.NickName = NickName
                                self.Opponents_Pokemon.PlayerBattlerect = self.Opponents_Pokemon.Back_Img.get_rect(topleft = (70, 240))
                                self.BattleYes,self.BattleNo = False,True
                            else:
                                if len(NickName) < 7:NickName += e.unicode
                SCREEN.fill("White")
                if Trainer_Intro:
                    SCREEN.blit(self.Opponents_Pokemon.Front_Img,self.Opponents_Pokemon.EnemyBattlerect)
                    ball_width = 0
                    self.BattleDialouge(f" A wild {self.Opponents_Pokemon.Name} appears!!",Text3="         Shift to go on")
                    SCREEN.blit(self.Player_Back,self.Player_Back_rect)
                    pygame.draw.line(SCREEN,"Black",(470,401),(680,401),5)
                    pygame.draw.line(SCREEN,"Black",(678,371),(678,401),5)
                    for i,Ball in enumerate(self.PlayerPokeBallscenter):
                        if len(self.Player.Pokemon) >= i + 1: ball_width = 0
                        else: ball_width = 5
                        pygame.draw.circle(SCREEN,"Black",Ball,10,ball_width)
                    pygame.draw.line(SCREEN,"Black",(97,79),(287,79),5)
                    pygame.draw.line(SCREEN,"Black",(97,47),(97,79),5)
                if Pokemon_Intro:
                    pygame.draw.line(SCREEN,"Black",(470,401),(680,401),5)
                    pygame.draw.line(SCREEN,"Black",(678,371),(678,401),5)
                    pygame.draw.line(SCREEN,"Black",(97,79),(287,79),5)
                    pygame.draw.line(SCREEN,"Black",(97,47),(97,79),5)
                    self.BattleDialouge(f" Let's go {self.BattlePlayerPoke.NickName}",Text3="         Shift to go on")
                    SCREEN.blit(self.Opponents_Pokemon.Front_Img,self.Opponents_Pokemon.EnemyBattlerect)
                    SCREEN.blit(self.Player_Back,self.Player_Back_rect)
                    self.Player_Back_rect.x -= 1
                    if self.Player_Back_rect.topright[0] < 0:
                        SCREEN.blit(self.BattlePlayerPoke.Back_Img,self.BattlePlayerPoke.PlayerBattlerect)
                if Battle:
                    self.Player_Back_rect.x = 55
                    pygame.draw.line(SCREEN,"Black",(470,401),(680,401),5) #Player
                    pygame.draw.line(SCREEN,"Black",(678,371),(678,401),5)
                    SCREEN.blit(UPoke_Name,UPoke_Name_rect)
                    SCREEN.blit(UPokeLV,UPokeLV_rect)
                    SCREEN.blit(UPokeHP,UPokeHP_rect)
                    UPokeHP_Text = self.Events.Game_font.render(f"{round(self.BattlePlayerPoke.HP)}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
                    UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (620, 344))
                    self.BattlePlayerPoke.Draw_Healthar(UPokeHP_rect.centerx + 20,UPokeHP_rect.centery - 5)
                    UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
                    UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
                    UStatus_Text = self.Events.Game_font.render(self.BattlePlayerPoke.Status,True,"Black")
                    UStatus_rect = UStatus_Text.get_rect(topleft = (629,375))
                    OPokeStatus_Text = self.Events.Game_font.render(self.Opponents_Pokemon.Status,True,"Black")
                    OPokeStatus_rect = OPokeStatus_Text.get_rect(topleft = (261, 43))
                    SCREEN.blit(UPokeHP_Text,UPokeHP_Text_rect)
                    if not self.BattlePlayerPoke.SubstituteOn:SCREEN.blit(self.BattlePlayerPoke.Back_Img,self.BattlePlayerPoke.PlayerBattlerect)
                    if self.BattlePlayerPoke.SubstituteOn:pygame.draw.rect(pygame.display.get_surface(),"cornsilk1",self.BattlePlayerPoke.PlayerBattlerect)
                    if self.BattlePlayerPoke.Status != "OK" and self.BattlePlayerPoke.HP > 0:SCREEN.blit(UStatus_Text,UStatus_rect)
                    if self.Opponents_Pokemon.Status != "OK" and self.Opponents_Pokemon.HP > 0:SCREEN.blit(OPokeStatus_Text,OPokeStatus_rect)
                    if self.BattlePlayerPoke.Status == "OK":self.BattlePlayerPoke.ToxicTurn = 0
                    if self.Opponents_Pokemon.Status == "OK":self.Opponents_Pokemon.ToxicTurn = 0
                    self.BattlePlayerPoke.Movespp = [self.BattlePlayerPoke.Move1pp,self.BattlePlayerPoke.Move2pp,self.BattlePlayerPoke.Move3pp,self.BattlePlayerPoke.Move4pp]
                    if self.Opponents_Pokemon.HP > 0 and not self.Catching[0]:
                        if not self.Opponents_Pokemon.SubstituteOn:SCREEN.blit(self.Opponents_Pokemon.Front_Img,self.Opponents_Pokemon.EnemyBattlerect)
                        if self.Opponents_Pokemon.SubstituteOn:pygame.draw.rect(pygame.display.get_surface(),"cornsilk1",self.Opponents_Pokemon.EnemyBattlerect)
                        pygame.draw.line(SCREEN,"Black",(97,79),(287,79),5) #Opponet
                        pygame.draw.line(SCREEN,"Black",(97,47),(97,79),5)
                        SCREEN.blit(OPoke_Name,OPoke_Name_rect)
                        SCREEN.blit(OPokeLV,OPokeLV_rect)
                        SCREEN.blit(OPokeHP,OPokeHP_rect)
                        self.Opponents_Pokemon.Draw_Healthar(OPokeHP_rect.centerx + 20,OPokeHP_rect.centery - 5)
                    self.Opponents_Pokemon.BattleStat_update()
                    self.BattlePlayerPoke.BattleStat_update()
                    if TurnEffects:
                        TurnAftermath1 = self.PokemonTurnEffects("Player")
                        TurnAftermath2 = self.PokemonTurnEffects("Enemy")
                        TurnEffects = False
                        TurnEffectsAftermath = True
                    if TurnEffectsAftermath:
                        if TurnAftermath1 == '' and TurnAftermath2 == '': TurnEffectsAftermath,Battle_Options = False,True
                        else: self.BattleDialouge(TurnAftermath1,TurnAftermath2)
                        if self.BattlePlayerPoke.HP <= 0: 
                            self.BattlePlayerPoke.HP = 0
                            Battle_Over = True
                            for poke in self.Player.Pokemon:
                                if poke.HP > 0: Player_Next_Pokemon = True
                        if self.Opponents_Pokemon.HP <= 0: 
                                Battle_Over = True
                                Exp_Gain = True
                    if Battle_Options:
                        if (self.Player_Turn[1] == "Done" and self.Enemy_Turn[1] == "Done") or (self.Player_Turn[1] == "" and self.Enemy_Turn[1] == "") or (self.Player_Turn[1] == "Waiting" and self.Enemy_Turn[1] == "Waiting") or (self.Player_Turn[1] == "None" and self.Enemy_Turn[1] == "None"):
                            self.PlayerBattleBox()
                        if self.Fight:
                            self.MoveType_rect = self.MoveType.get_rect(topleft = (519,556))
                            self.MovePP_rect = self.MovePP.get_rect(topleft = (519,600))
                            if self.BattlePlayerPoke.Attack == '' and self.BattlePlayerPoke.MoveTurn == "":
                                self.BattlePlayerPoke.AttackDamage = 0
                                self.Opponents_Pokemon.AttackDamage = 0
                                self.Show_Options1([(self.UMove1_Rect,self.UMove1_Text,self.UMove1_Text_Rect),(self.UMove2_Rect,self.UMove2_Text,self.UMove2_Text_Rect),(self.UMove3_Rect,self.UMove3_Text,self.UMove3_Text_Rect),(self.UMove4_Rect,self.UMove4_Text,self.UMove4_Text_Rect),(self.FightBack_Rect,self.FightBack_Text,self.FightBack_Text_Rect)],"White")
                                self.Fight_Options()
                            if self.BattlePlayerPoke.Attack != '': 
                                Get_Moves = True
                                self.BattlePlayerPoke.Get_Move(self.BattlePlayerPoke,self.Opponents_Pokemon)
                                self.BattlePlayerPoke.PP_Control()
                                if not self.BattlePlayerPoke.RageOn and self.BattlePlayerPoke.IdleTurns == 0:
                                    self.BattlePlayerPoke.MoveTurn = "Attack"
                                self.Fight = False  
                        if self.BattlePokemon:
                            self.Pokemon_Menu()
                            if self.Switch and self.Player.GetRemainingPokemon() > 1:
                                if self.Pokemon1 and self.BattlePlayerPoke != self.Player.Pokemon[0]: UIndex= 0
                                elif self.Pokemon2 and self.BattlePlayerPoke != self.Player.Pokemon[1]: UIndex= 1
                                elif self.Pokemon3 and self.BattlePlayerPoke != self.Player.Pokemon[2]: UIndex= 2
                                elif self.Pokemon4 and self.BattlePlayerPoke != self.Player.Pokemon[3]: UIndex= 3
                                elif self.Pokemon5 and self.BattlePlayerPoke != self.Player.Pokemon[4]: UIndex= 4
                                elif self.Pokemon6 and self.BattlePlayerPoke != self.Player.Pokemon[5]: UIndex= 5
                                else: self.Switch = False
                                if UIndex != 9:
                                    self.BattlePlayerPoke.ToxicTurn = 0
                                    self.BattlePlayerPoke.Remove_Battle_Counters()
                                    self.BattlePlayerPoke.In_Battle = False
                                    self.BattlePlayerPoke.FocusEnergy = False
                                    self.BattlePlayerPoke.LightScreenUp = False
                                    self.BattlePlayerPoke.LightScreenDamage = 0
                                    self.BattlePlayerPoke.ReflectUp = False
                                    self.BattlePlayerPoke.ReflectDamage = 0
                                    self.BattlePlayerPoke.SubstituteOn = False
                                    self.BattlePlayerPoke = self.Player.Pokemon[UIndex]
                                    UIndex = 9
                                    self.BattlePlayerPoke.ToxicTurn = 0
                                    self.Back = True
                                    self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6 = False,False,False,False,False,False
                                    self.BattlePlayerPoke.Particaption = True
                                    self.BattlePlayerPoke.In_Battle = True
                                    UPoke_Name = self.Events.Game_Font2.render(self.BattlePlayerPoke.NickName,True,"Black")
                                    UPoke_Name_rect = UPoke_Name.get_rect(topleft = (475,306))
                                    UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
                                    UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
                                    UPokeHP = self.Events.Game_font.render("HP:",True,"Black")
                                    UPokeHP_rect = UPokeHP.get_rect(topleft = (UPoke_Name_rect.x,346))
                                    UPokeHP_Text = self.Events.Game_font.render(f"{self.BattlePlayerPoke.HP}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
                                    UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (530,370))
                                    UPokeHP_Text = self.Events.Game_font.render(f"{round(self.BattlePlayerPoke.HP)}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
                                    UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (530,381))
                                    self.BattlePlayerPoke.Draw_Healthar(UPokeHP_rect.centerx + 20,UPokeHP_rect.centery - 5)
                                    UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
                                    UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
                                    self.UMove1_Rect,self.UMove1_Text,self.UMove1_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[0])
                                    self.UMove2_Rect,self.UMove2_Text,self.UMove2_Text_Rect = self.Make_Option_Button(pygame.Rect((258,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[1])
                                    self.UMove3_Rect,self.UMove3_Text,self.UMove3_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,695),(150,100)),self.BattlePlayerPoke.Moves[2])
                                    self.UMove4_Rect,self.UMove4_Text,self.UMove4_Text_Rect = self.Make_Option_Button(pygame.Rect((258,695),(150,100)),self.BattlePlayerPoke.Moves[3])
                                    self.Switch = False
                                    self.BattlePlayerPoke.MoveTurn = "Switch"
                                    self.MissedTurn()
                            if self.Back: 
                                self.BattlePokemon = False
                                self.Back = False
                                if self.Switch:
                                    self.Switch = False
                                    self.MissedTurn()
                                    self.Enemy_Turn[1] = "Move Call"
                                    self.Enemy_Turn[0] = 2
                        if self.BattleItems:
                            self.PlayerBag()
                            self.Use_Item_on_Pokemon()
                            if self.Catching[0]:
                                Caught = self.CatchPokemon()
                                Catching_Aftermath = True
                                Shake_1 = True
                                self.Back = True
                            if self.Back:
                                if self.Healing_Item[1]: self.Healing_Item[1] = False
                                else: self.BattleItems = False
                                self.Back = False
                        if not Move_Start:
                            if self.BattlePlayerPoke.MoveTurn != "":
                                self.Opponents_Pokemon.MoveTurn = "Attack"
                                Get_Moves = True
                                Move_Start = True
                                self.Fight = False
                        if Catching_Aftermath:
                            if Shake_1:
                                if Caught[1] >= 1: self.BattleDialouge("The Poke Ball shakes once")
                                else: 
                                    Shake_1 = False
                                    Shake_2 = True
                            if Shake_2:
                                if Caught[1] >= 2: self.BattleDialouge("The Poke Ball shakes twice")
                                else: 
                                    Shake_2 = False
                                    Shake_3= True
                            if Shake_3:
                                if Caught[1] >= 3: self.BattleDialouge("The Poke Ball shakes for a third time")
                                else: 
                                    Catch_Confirm = True
                                    Shake_3 = False
                            if Catch_Confirm:
                                if Caught[0]:
                                    self.BattleDialouge("The PokeMon is caught")
                                    self.Opponents_Pokemon.Trainer = self.PlayerName
                                    self.Opponents_Pokemon.BattleRole ="Player"
                                    self.AddPokeDex(self.Opponents_Pokemon.Name,True)
                                else:
                                    self.BattleDialouge("The Pokemon Broke out")
                            if NickName_Maker: 
                                self.BattleDialouge("Do you want to nickname this pokemon")
                                self.BattleDecison()
                                if self.BattleYes:
                                    SCREEN.fill("White")
                                    NickName_surf = self.Events.Game_font.render(NickName,True,"Black")
                                    NickName_rect = NickName_surf.get_rect(center = self.Events.NameInputBox.center)
                                    pygame.draw.rect(SCREEN,"Black",self.Events.NameInputBox,2)
                                    SCREEN.blit(NickName_surf,NickName_rect)
                                if self.BattleNo:
                                    self.Player.Add_Pokemon(self.Opponents_Pokemon)
                                    self.Player.Remove_Bag(self.Catching[1],1)
                                    self.Catching = [False,"Poke"]
                                    self.No = False
                                    running = False
                                    break
                        if self.Run:
                            run,Attempts = self.Escape(Attempts)
                            if self.PokeDollUsed:
                                run = True
                                self.PokeDollUsed = False
                            Run_Aftermath = True
                            self.Run = False
                        if Run_Aftermath:
                            if run and not self.Opponents_Pokemon.Running: 
                                self.BattleDialouge("You ran away")
                            elif self.Opponents_Pokemon.Running: 
                                self.BattleDialouge(f"{self.Opponents_Pokemon.Name} ran away")
                            elif not run: self.BattleDialouge("You could not run away")
                        if Get_Moves:
                                if self.Opponents_Pokemon.IdleTurns > 0 or self.Opponents_Pokemon.IdleMove != '':
                                    self.Opponents_Pokemon.Attack = self.Opponents_Pokemon.IdleMove
                                if self.Opponents_Pokemon.TrappedTurns > 0:
                                    self.Opponents_Pokemon.Attack = 'Trapped'
                                if self.Opponents_Pokemon.Attack == "":
                                    self.Opponents_Pokemon.Attack = random.choice(self.Opponents_Pokemon.Moves)
                                    while self.Opponents_Pokemon.Attack == "-": 
                                        self.Opponents_Pokemon.Attack = random.choice(self.Opponents_Pokemon.Moves)
                                        if self.Opponents_Pokemon.Attack == self.Opponents_Pokemon.DisabledMove:
                                            self.Opponents_Pokemon.Attack == "-"
                                if self.Opponents_Pokemon.Attack != "":
                                    self.Opponents_Pokemon.Get_Move(self.Opponents_Pokemon,self.BattlePlayerPoke)
                                Get_Moves,Speed_Test = False,True
                        if Speed_Test:
                            if self.BattlePlayerPoke.GetBattleSpeed() > self.Opponents_Pokemon.GetBattleSpeed():
                                self.Player_Turn[1] = "Move Call"
                                self.Player_Turn[0] = 1
                                self.Enemy_Turn[0] = 2
                                self.Enemy_Turn[1] = "Waiting"
                            elif self.BattlePlayerPoke.GetBattleSpeed() < self.Opponents_Pokemon.GetBattleSpeed():
                                self.Enemy_Turn[1] = "Move Call"
                                self.Enemy_Turn[0] = 1
                                self.Player_Turn[0] = 2
                                self.Player_Turn[1] = "Waiting"
                            elif self.BattlePlayerPoke.GetBattleSpeed() == self.Opponents_Pokemon.GetBattleSpeed():
                                if random.randint(0,1) == 0:
                                    self.Enemy_Turn[1] = "Move Call"
                                    self.Enemy_Turn[0] = 1
                                    self.Player_Turn[0] = 2
                                    self.Player_Turn[1] = "Waiting"
                                else:
                                    self.Player_Turn[1] = "Move Call"
                                    self.Player_Turn[0] = 1
                                    self.Enemy_Turn[0] = 2
                                    self.Enemy_Turn[1] = "Waiting"
                            Speed_Test = False
                            ParaEffect = random.randint(1,4)
                            self.OtherPriorityFactors()
                        if self.Player_Turn[1] == "Move Call":
                            self.Opponents_Pokemon.TargetHP = self.Opponents_Pokemon.HP - self.BattlePlayerPoke.AttackDamage
                            if Sleep_Check:
                                if self.BattlePlayerPoke.Status == "SLP":
                                    self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} is asleep")
                                else:
                                    Sleep_Check = False
                                    Parlyz_Check = True
                            if Parlyz_Check:
                                if self.BattlePlayerPoke.Status == "PAR" and ParaEffect == 2:
                                    self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} is paralyzed and cant move")
                                else: 
                                    Parlyz_Check = False
                                    FRZ_Check = True
                            if FRZ_Check:
                                if self.BattlePlayerPoke.Status == "FRZ":
                                    self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} is frozen and cant move")
                                else:
                                    FRZ_Check = False
                                    Confusion_Check = True
                            if Confusion_Check:
                                if self.BattlePlayerPoke.Status2 == "Confused" and self.BattlePlayerPoke.ConfusionTimeLimit > 0: self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} is confused")
                                elif self.BattlePlayerPoke.Status2 == "Confused" and self.BattlePlayerPoke.ConfusionTimeLimit == 0: 
                                    self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} snapped out of confusion")
                                    Flinch_Check = True
                                else:
                                    Flinch_Check = True
                                    Confusion_Check = False
                            if Confusion_Effect:
                                if random.randint(0,1) == 0:
                                    Confusion_Aftermath = True
                                    self.BattlePlayerPoke.ExtraTargetHP = self.BattlePlayerPoke.ConfusionEffect()
                                else:Flinch_Check = True
                                Confusion_Effect = False
                            if Confusion_Aftermath:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} got confused and hit itself")
                            if self.BattlePlayerPoke.TrappedTurns > 0:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} is trapped")
                            if Flinch_Check:
                                if self.BattlePlayerPoke.Attack == "Flinch":
                                    self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} flinched")
                                else:
                                    Flinch_Check = False
                                    Obediance_Check = True
                            if Obediance_Check:
                                if self.BattlePlayerPoke.Trainer != self.PlayerName:
                                    Disobey = self.ObedianceCalc()
                                    if Disobey[0] == "Obey":Move_Call = True
                                    else:Obediance_Fail = True
                                else:Move_Call = True
                                Obediance_Check = False
                            if Obediance_Fail:self.BattleDialouge(Disobey[1])
                            if Move_Call and self.BattlePlayerPoke.TrappedTurns <= 0:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} used {self.BattlePlayerPoke.Attack}")
                        if self.Player_Turn[1] == "Move animation":
                            Poke_Animation = self.BattlePlayerPoke.BattleAnimation()
                            if Poke_Animation:
                                Poke_Animation = False
                                self.Player_Turn[1] = "HP animation"
                        if self.Player_Turn[1] == "HP animation":
                            if not self.Opponents_Pokemon.SubstituteOn:
                                if self.Opponents_Pokemon.TargetHP < 0: self.Opponents_Pokemon.TargetHP = 0
                                if self.Opponents_Pokemon.HP > self.Opponents_Pokemon.TargetHP:
                                    self.Opponents_Pokemon.HP -= 0.1
                                if self.Opponents_Pokemon.HP < self.Opponents_Pokemon.TargetHP: self.Opponents_Pokemon.HP = self.Opponents_Pokemon.TargetHP
                                if self.Opponents_Pokemon.HP == self.Opponents_Pokemon.TargetHP:
                                    self.Player_Turn[1] = "Move Aftermath"
                            else:
                                self.Opponents_Pokemon.SubstituteHP -= self.BattlePlayerPoke.AttackDamage
                                if self.Opponents_Pokemon.SubstituteHP <= 0: 
                                    self.Opponents_Pokemon.SubstituteOn = False
                                    self.BattlePlayerPoke.AftermathText3 = f"{self.Opponents_Pokemon.NickName}'s Substitute broke"
                                self.Player_Turn[1] = "Move Aftermath" 
                        if self.Player_Turn[1] == "C.HP animation":
                            if self.BattlePlayerPoke.HP > self.BattlePlayerPoke.ExtraTargetHP:
                                self.BattlePlayerPoke.HP -= 0.1
                            if self.BattlePlayerPoke.HP < self.BattlePlayerPoke.ExtraTargetHP: self.BattlePlayerPoke.HP = self.BattlePlayerPoke.ExtraTargetHP
                            if self.BattlePlayerPoke.HP == self.BattlePlayerPoke.ExtraTargetHP:
                                self.Player_Turn[1] = "Battle Over?"
                        if self.Player_Turn[1] == "T.HP animation":
                            if self.BattlePlayerPoke.HP > self.BattlePlayerPoke.ExtraTargetHP:
                                self.BattlePlayerPoke.HP -= 0.1
                            if self.BattlePlayerPoke.HP < self.BattlePlayerPoke.ExtraTargetHP: self.BattlePlayerPoke.HP = self.BattlePlayerPoke.ExtraTargetHP
                            if self.BattlePlayerPoke.HP == self.BattlePlayerPoke.ExtraTargetHP:
                                self.Player_Turn[1] = "Battle Over?"
                        if self.Player_Turn[1] == "Move Aftermath":
                            self.BattlePlayerPoke.LastmoveUsed = self.BattlePlayerPoke.Attack
                            if self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.EnemyStatChangingList or self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.EnemyStatDamagingList:
                                self.Opponents_Pokemon.Attack_AfterMath(self.Opponents_Pokemon.Status,self.BattlePlayerPoke.AftermathStat,self.BattlePlayerPoke.EnemyChangedStat,'',0,False)
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.FieldAffectingList:
                                self.Opponents_Pokemon.Attack_AfterMath(self.Opponents_Pokemon.Status,'',0,self.BattlePlayerPoke.FieldEffect,self.BattlePlayerPoke.FieldEffectTerm,self.BattlePlayerPoke.FieldTarget)
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.StatusDamagingList or self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.StatusList:
                                self.Opponents_Pokemon.Attack_AfterMath(self.BattlePlayerPoke.AftermathStatus,'',0,'',0,False)
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.SelfStatChangingList:
                                self.BattlePlayerPoke.Attack_AfterMath(self.BattlePlayerPoke.Status,self.BattlePlayerPoke.AftermathStat,self.BattlePlayerPoke.SelfChangedStat,'',0,False)
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.MultiturnMovesList:
                                if self.Opponents_Pokemon.IdleMove == "Bide" and self.Opponents_Pokemon.IdleTurns > 0:
                                    self.Opponents_Pokemon.BideDamage += self.BattlePlayerPoke.AttackDamage
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.MultiturnMovesList:
                                if self.BattlePlayerPoke.IdleTurns > 0 and self.BattlePlayerPoke.AftermathText1 in (f"{self.BattlePlayerPoke.NickName} unleashed the energy","It Missed"):
                                    self.BattlePlayerPoke.IdleTurns = 0
                                    self.BattlePlayerPoke.IdleMove = ''
                                    self.BattlePlayerPoke.BideDamage = 0
                                elif self.BattlePlayerPoke.IdleMove == "Dig" and self.BattlePlayerPoke.IdleTurns == 1:self.BattlePlayerPoke.Dig = True
                                elif self.BattlePlayerPoke.IdleMove == "Fly" and self.BattlePlayerPoke.IdleTurns == 1:self.BattlePlayerPoke.Fly = True
                                elif self.BattlePlayerPoke.IdleTurns == 0:
                                    self.BattlePlayerPoke.Dig = False
                                    self.BattlePlayerPoke.Fly = False
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.TrappingMoves:
                                if self.Opponents_Pokemon.TrappedTurns <= 0:
                                    self.Opponents_Pokemon.TrappedTurns = self.BattlePlayerPoke.OPTrapTurns
                                    UTrap_Damage = self.BattlePlayerPoke.AttackDamage
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.DrainingAttacksList:
                                if not Drained_HP:
                                    if self.BattlePlayerPoke.AttackDamage/2 < 1:
                                        self.BattlePlayerPoke.HP += 1
                                    else:
                                        self.BattlePlayerPoke.HP += round(self.BattlePlayerPoke.AttackDamage/2)
                                    Drained_HP = True
                                if Drained_HP:
                                    if self.BattlePlayerPoke.HP > self.BattlePlayerPoke.MAXHP:self.BattlePlayerPoke.HP = self.BattlePlayerPoke.MAXHP
                            elif self.BattlePlayerPoke.Attack == "Disable" and self.Opponents_Pokemon.DisabledTimer <= 0:
                                self.Opponents_Pokemon.DisabledMove = self.BattlePlayerPoke.ODisabledMove
                                self.Opponents_Pokemon.DisabledTimer = self.BattlePlayerPoke.ODisabledTimer
                            elif self.BattlePlayerPoke.Attack == "Rest":
                                self.BattlePlayerPoke.Attack_AfterMath(self.BattlePlayerPoke.AftermathStatus,'',0,'',0,False)
                                self.BattlePlayerPoke.Status2= ""
                                self.BattlePlayerPoke.SleepTimer = 3
                                self.BattlePlayerPoke.HP = self.BattlePlayerPoke.ExtraTargetHP
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.FlinchingMoves:
                                self.Opponents_Pokemon.Attack = "Flinch"
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.WildBattleMoves:
                                if self.BattlePlayerPoke.Running:
                                    run,Run_Aftermath = True,True
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.SelfFaintingMoves:
                                if not Exploded:
                                    if self.BattlePlayerPoke.Faint:
                                        self.BattlePlayerPoke.HP = 0
                                        self.BattlePlayerPoke.Faint = False
                                    Exploded = True
                            elif self.BattlePlayerPoke.Attack == "Pay Day" and self.BattlePlayerPoke.AttackDamage > 0:
                                Extra_Money = self.BattlePlayerPoke.Level * 2
                            elif self.BattlePlayerPoke.Attack == "Rage" and self.BattlePlayerPoke.AttackDamage > 0:
                                if not Rage:
                                    if self.BattlePlayerPoke.RageOn:
                                        if self.BattlePlayerPoke.AtkCounter < 6:self.BattlePlayerPoke.AtkCounter += 1
                                    Rage = True
                                self.BattlePlayerPoke.RageOn = True
                                self.BattlePlayerPoke.AftermathText3 = f"{self.BattlePlayerPoke.NickName} rage builds"
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.RecoilMoves:
                                self.BattlePlayerPoke.HP -= self.BattlePlayerPoke.RecoilDamage
                                self.BattlePlayerPoke.RecoilDamage = 0                         
                            elif self.Opponents_Pokemon.RageOn and self.BattlePlayerPoke.AttackDamage > 0:
                                if not Rage:
                                    if self.Opponents_Pokemon.AtkCounter < 6:self.Opponents_Pokemon.AtkCounter += 1
                                    Rage = True
                            elif self.Opponents_Pokemon.Attack == "Counter" and Pokemon_Move_Type[self.BattlePlayerPoke.Attack] in ("Normal","Fighting") and self.BattlePlayerPoke.AttackDamage > 0:
                                self.Opponents_Pokemon.CounterDamage = self.BattlePlayerPoke.AttackDamage * 2
                                self.Opponents_Pokemon.Get_Move(self.Opponents_Pokemon,self.BattlePlayerPoke)
                            elif self.BattlePlayerPoke.IdleMove in self.BattlePlayerPoke.PokemonMoves.RampageMoves and self.BattlePlayerPoke.IdleTurns == 0:
                                self.BattlePlayerPoke.Attack_AfterMath("Confused",'',0,'',0,False)
                                self.BattlePlayerPoke.AftermathText3 = f"{self.BattlePlayerPoke.NickName} was confused by fatigue"
                            elif self.BattlePlayerPoke.Attack in self.BattlePlayerPoke.PokemonMoves.HealingMoves:
                                if not Drained_HP:
                                    self.BattlePlayerPoke.HP += self.BattlePlayerPoke.HealedHP
                                    Drained_HP = True
                                if Drained_HP:
                                    if self.BattlePlayerPoke.HP > self.BattlePlayerPoke.MAXHP:self.BattlePlayerPoke.HP = self.BattlePlayerPoke.MAXHP
                            elif self.BattlePlayerPoke.Attack == "Haze":
                                self.BattlePlayerPoke.Get_Hazed()
                                self.Opponents_Pokemon.Get_Hazed()
                            if self.BattlePlayerPoke.Status == "SLP":
                                self.BattlePlayerPoke.IdleTurns = 0
                                self.BattlePlayerPoke.IdleMove = ''
                            if Pokemon_Move_Type[self.BattlePlayerPoke.Attack] == "Fire" and self.BattlePlayerPoke.Attack != "Fire Spin" and self.Opponents_Pokemon.Status == "FRZ":
                                OThawed = True
                            if self.BattlePlayerPoke.AftermathText1 == "":
                                if self.BattlePlayerPoke.Attack == "Substitute":
                                    if not self.BattlePlayerPoke.SubstituteOn and self.BattlePlayerPoke.HP > (self.BattlePlayerPoke.MAXHP * 0.25):
                                        self.BattlePlayerPoke.SubstituteOn = True
                                        self.BattlePlayerPoke.SubstituteHP = (self.BattlePlayerPoke.HP * 0.25) + 1
                                        self.BattlePlayerPoke.HP -= (self.BattlePlayerPoke.HP * 0.25)
                                        self.BattlePlayerPoke.AftermathText1 = f"{self.BattlePlayerPoke.NickName} made a Substitute"
                                    else:self.BattlePlayerPoke.AftermathText1 = "It failed"
                            if self.BattlePlayerPoke.AftermathText1 != '' or self.BattlePlayerPoke.AftermathText2 != '' or self.BattlePlayerPoke.AftermathText3 != '': self.BattleDialouge(self.BattlePlayerPoke.AftermathText1,self.BattlePlayerPoke.AftermathText2,self.BattlePlayerPoke.AftermathText3)
                            if self.BattlePlayerPoke.AftermathText1 == '' and self.BattlePlayerPoke.AftermathText2 == '' and self.BattlePlayerPoke.AftermathText3 == '': 
                                self.Player_Turn[1] = "Battle Over?"
                                Battle_overp1 = True
                        if self.Player_Turn[1] == "Battle Over?":
                            Rage = False
                            if self.Opponents_Pokemon.HP <= 0 and not Battle_Over and self.BattlePlayerPoke.HP > 0: 
                                Battle_Over = True
                                Exp_Gain = True
                                self.BattlePlayerPoke.TrappedTurns = 0
                            elif self.BattlePlayerPoke.HP <= 0 and self.Opponents_Pokemon.HP > 0 and not Battle_Over: 
                                self.BattlePlayerPoke.HP = 0
                                Battle_Over = True
                                for poke in self.Player.Pokemon:
                                    if poke.HP > 0: Player_Next_Pokemon = True
                                if not Player_Next_Pokemon:Player_lost = True
                                self.Player_Turn[1] = "Done"
                            elif self.BattlePlayerPoke.HP <= 0 and self.Opponents_Pokemon.HP <= 0:
                                Battle_Over = True
                                Exp_Gain = True
                                self.BattlePlayerPoke.TrappedTurns = 0
                            elif self.Opponents_Pokemon.HP > 0:
                                if self.Player_Turn[0] == 1:
                                    self.Enemy_Turn[1] = "Move Call"
                                    self.Player_Turn[1] = "Done"
                                elif self.Player_Turn[0] == 2:
                                    TurnEffects = True
                                    Battle_Options = False
                                    self.BattlePlayerPoke.Attack = ''
                                    self.Opponents_Pokemon.Attack = ''
                                    self.Opponents_Pokemon.ConfusionTimeLimit -= 1
                                    self.BattlePlayerPoke.ConfusionTimeLimit -= 1
                                    self.Fight = False
                                    Move_Start = False
                                    self.BattlePlayerPoke.TrappedTurns -= 1
                                    self.Opponents_Pokemon.TrappedTurns -= 1
                                    if self.BattlePlayerPoke.TrappedTurns == 0:UTrapped_Check =True
                                    if self.Opponents_Pokemon.TrappedTurns == 0:OTrapped_Check =True
                                    if Battle_overp1:
                                        self.BattlePlayerPoke.MoveTurn = ""
                                        self.Opponents_Pokemon.MoveTurn = ""
                                        self.BattlePlayerPoke.SleepTimer -= 1
                                        self.Opponents_Pokemon.SleepTimer -= 1
                                        Battle_overp1 = False
                                        Status_Check = True
                                    if self.BattlePlayerPoke.DisabledTimer <= 0 and self.BattlePlayerPoke.DisabledMove != '':
                                        self.BattlePlayerPoke.DisabledMove = ''
                                        UAble_Check = True
                                    if self.Opponents_Pokemon.DisabledTimer <= 0 and self.Opponents_Pokemon.DisabledMove != '':
                                        self.Opponents_Pokemon.DisabledMove = ''
                                        OAble_Check = True
                                    if self.BattlePlayerPoke.Status == "SLP":
                                        if self.BattlePlayerPoke.SleepTimer <= 0:
                                            self.BattlePlayerPoke.Status = 'OK'
                                            UAwake_Check = True 
                                    if self.Opponents_Pokemon.Status == "SLP":
                                        if self.Opponents_Pokemon.SleepTimer <= 0:
                                            self.Opponents_Pokemon.Status = 'OK'
                                            OAwake_Check = True 
                                    if Status_Check:
                                        if UAwake_Check:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} woke up")
                                        elif OAwake_Check:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} woke up")
                                        elif UAble_Check:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName}'s move is enabled")
                                        elif OAble_Check:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName}'s move is enabled woke up")
                                        elif UTrapped_Check:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} is untrapped")
                                        elif OTrapped_Check:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} is untrapped")
                                        elif UThawed:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} thawed out of the ice")
                                        elif OThawed:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} thawed out of the ice")
                                        if True not in (UAwake_Check,OAwake_Check,UAble_Check,OAble_Check,UTrapped_Check,OTrapped_Check,UThawed,OThawed):
                                            self.Player_Turn[1] = "Done"
                                            Status_Check = False
                                    self.BattlePlayerPoke.AftermathText1,self.BattlePlayerPoke.AftermathText2,self.BattlePlayerPoke.AftermathText3 = "","",""
                                    self.Opponents_Pokemon.AftermathText1,self.Opponents_Pokemon.AftermathText2,self.Opponents_Pokemon.AftermathText3 = "","",""
                                Sleep_Check = True
                            Drained_HP = False
                        if self.Enemy_Turn[1] == "Move Call":
                            self.BattlePlayerPoke.TargetHP = self.BattlePlayerPoke.HP - self.Opponents_Pokemon.AttackDamage
                            if Sleep_Check:
                                if self.Opponents_Pokemon.Status == "SLP":
                                    self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} is asleep")
                                else:
                                    Sleep_Check = False
                                    Parlyz_Check = True
                            if Parlyz_Check:
                                if self.Opponents_Pokemon.Status == "PAR" and ParaEffect == 2:
                                    self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} is paralyzed and cant move")
                                else: 
                                    Parlyz_Check = False
                                    FRZ_Check = True
                            if FRZ_Check:
                                if self.Opponents_Pokemon.Status == "FRZ":
                                    self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} is frozen and cant move")
                                else:
                                    FRZ_Check = False
                                    Confusion_Check = True
                            if Confusion_Check:
                                if self.Opponents_Pokemon.Status2 == "Confused" and self.Opponents_Pokemon.ConfusionTimeLimit > 0: self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} is confused")
                                elif self.Opponents_Pokemon.Status2 == "Confused" and self.Opponents_Pokemon.ConfusionTimeLimit == 0: 
                                    self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} snapped out of confusion")
                                    Flinch_Check = True
                                    self.Opponents_Pokemon.Status2 = ""
                                else:
                                    Flinch_Check = True
                                    Confusion_Check = False
                            if Confusion_Effect:
                                if random.randint(0,1) == 0:
                                    Confusion_Aftermath = True
                                    self.Opponents_Pokemon.ExtraTargetHP = self.Opponents_Pokemon.ConfusionEffect()
                                else:Flinch_Check = True
                                Confusion_Effect = False
                            if Confusion_Aftermath:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} got confused and hit itself")
                            if self.Opponents_Pokemon.TrappedTurns > 0:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} is trapped")
                            if Flinch_Check:
                                if self.Opponents_Pokemon.Attack == "Flinch":
                                    self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} flinched")
                                else:
                                    Flinch_Check = False
                                    Move_Call = True
                            if Move_Call and self.Opponents_Pokemon.TrappedTurns <= 0:self.BattleDialouge(f"{self.Opponents_Pokemon.Name} used {self.Opponents_Pokemon.Attack}")
                        if self.Enemy_Turn[1] == "Move animation":
                            Poke_Animation = self.Opponents_Pokemon.BattleAnimation()
                            if Poke_Animation:
                                Poke_Animation = False
                                self.Enemy_Turn[1] = "HP animation"
                        if self.Enemy_Turn[1] == "HP animation":
                            if not self.BattlePlayerPoke.SubstituteOn:
                                if self.BattlePlayerPoke.HP > self.BattlePlayerPoke.TargetHP:
                                    self.BattlePlayerPoke.HP -= 0.1
                                if self.BattlePlayerPoke.HP < self.BattlePlayerPoke.TargetHP: self.BattlePlayerPoke.HP = self.BattlePlayerPoke.TargetHP
                                if self.BattlePlayerPoke.HP == self.BattlePlayerPoke.TargetHP:
                                    self.Enemy_Turn[1] = "Move Aftermath"
                            else:
                                self.BattlePlayerPoke.SubstituteHP -= self.Opponents_Pokemon.AttackDamage
                                if self.BattlePlayerPoke.SubstituteHP <= 0: 
                                    self.BattlePlayerPoke.SubstituteOn = False
                                    self.Opponents_Pokemon.AftermathText3 = f"{self.BattlePlayerPoke.NickName}'s Substitute broke"
                                self.Enemy_Turn[1] = "Move Aftermath" 
                        if self.Enemy_Turn[1] == "C.HP animation":
                            if self.Opponents_Pokemon.HP > self.Opponents_Pokemon.ExtraTargetHP:
                                self.Opponents_Pokemon.HP -= 0.1
                            if self.Opponents_Pokemon.HP < self.Opponents_Pokemon.ExtraTargetHP: self.Opponents_Pokemon.HP = self.Opponents_Pokemon.ExtraTargetHP
                            if self.Opponents_Pokemon.HP == self.Opponents_Pokemon.ExtraTargetHP:
                                self.Enemy_Turn[1] = "Battle Over?"
                        if self.Enemy_Turn[1] == "T.HP animation":
                            if self.Opponents_Pokemon.HP > self.Opponents_Pokemon.ExtraTargetHP:
                                self.Opponents_Pokemon.HP -= 0.1
                            if self.Opponents_Pokemon.HP < self.Opponents_Pokemon.ExtraTargetHP: self.Opponents_Pokemon.HP = self.Opponents_Pokemon.ExtraTargetHP
                            if self.Opponents_Pokemon.HP == self.Opponents_Pokemon.ExtraTargetHP:
                                self.Enemy_Turn[1] = "Battle Over?"
                        if self.Enemy_Turn[1] == "Move Aftermath":
                            self.Opponents_Pokemon.LastmoveUsed = self.Opponents_Pokemon.Attack
                            if self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.EnemyStatChangingList or self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.EnemyStatDamagingList:
                                self.BattlePlayerPoke.Attack_AfterMath(self.BattlePlayerPoke.Status,self.Opponents_Pokemon.AftermathStat,self.Opponents_Pokemon.EnemyChangedStat,'',0,False)
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.FieldAffectingList:
                                self.BattlePlayerPoke.Attack_AfterMath(self.BattlePlayerPoke.Status,'',0,self.Opponents_Pokemon.FieldEffect,self.Opponents_Pokemon.FieldEffectTerm,self.Opponents_Pokemon.FieldTarget)
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.StatusDamagingList or self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.StatusList:
                                self.BattlePlayerPoke.Attack_AfterMath(self.Opponents_Pokemon.AftermathStatus,'',0,'',0,False)
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.SelfStatChangingList:
                                self.Opponents_Pokemon.Attack_AfterMath(self.Opponents_Pokemon.Status,self.Opponents_Pokemon.AftermathStat,self.Opponents_Pokemon.SelfChangedStat,'',0,False)
                            elif self.BattlePlayerPoke.Attack in self.Opponents_Pokemon.PokemonMoves.MultiturnMovesList:
                                if self.BattlePlayerPoke.IdleMove == "Bide" and self.BattlePlayerPoke.IdleTurns > 0:
                                    self.BattlePlayerPoke.BideDamage += self.Opponents_Pokemon.AttackDamage
                            elif self.Opponents_Pokemon.Attack in self.BattlePlayerPoke.PokemonMoves.MultiturnMovesList:
                                if self.Opponents_Pokemon.IdleTurns > 0 and self.Opponents_Pokemon.AftermathText1 in (f"{self.Opponents_Pokemon.NickName} unleashed the energy","It Missed"):
                                    self.Opponents_Pokemon.IdleTurns = 0
                                    self.Opponents_Pokemon.IdleMove = ''
                                    self.Opponents_Pokemon.BideDamage = 0
                                elif self.Opponents_Pokemon.IdleMove == "Dig" and self.Opponents_Pokemon.IdleTurns == 1:self.Opponents_Pokemon.Dig = True
                                elif self.Opponents_Pokemon.IdleMove == "Fly" and self.Opponents_Pokemon.IdleTurns == 1:self.Opponents_Pokemon.Fly = True
                                elif self.Opponents_Pokemon.IdleTurns == 0:
                                    self.Opponents_Pokemon.Dig = False
                                    self.Opponents_Pokemon.Fly = False
                            elif self.Opponents_Pokemon.Attack in self.BattlePlayerPoke.PokemonMoves.TrappingMoves:
                                if self.BattlePlayerPoke.TrappedTurns <= 0:
                                    self.BattlePlayerPoke.TrappedTurns = self.Opponents_Pokemon.OPTrapTurns
                                    OTrap_Damage = self.Opponents_Pokemon.AttackDamage
                            elif self.Opponents_Pokemon.Attack in self.BattlePlayerPoke.PokemonMoves.DrainingAttacksList:
                                if not Drained_HP:
                                    if self.Opponents_Pokemon.AttackDamage/2 < 1:
                                        self.Opponents_Pokemon.HP += 1
                                    else:
                                        self.Opponents_Pokemon.HP += round(self.Opponents_Pokemon.AttackDamage/2)
                                    Drained_HP = True
                                if Drained_HP:
                                    if self.Opponents_Pokemon.HP > self.Opponents_Pokemon.MAXHP:self.Opponents_Pokemon.HP = self.Opponents_Pokemon.MAXHP
                            elif self.Opponents_Pokemon.Attack == "Disable" and self.BattlePlayerPoke.DisabledTimer <= 0:
                                self.BattlePlayerPoke.DisabledMove = self.Opponents_Pokemon.ODisabledMove
                                self.BattlePlayerPoke.DisabledTimer = self.Opponents_Pokemon.ODisabledTimer
                            elif self.Opponents_Pokemon.Attack == "Rest":
                                self.Opponents_Pokemon.Attack_AfterMath(self.Opponents_Pokemon.AftermathStatus,'',0,'',0,False)
                                self.Opponents_Pokemon.Status2= ""
                                self.Opponents_Pokemon.SleepTimer = 3
                                self.Opponents_Pokemon.HP = self.Opponents_Pokemon.ExtraTargetHP
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.FlinchingMoves:
                                self.BattlePlayerPoke.Attack = "Flinch"
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.WildBattleMoves:
                                if self.Opponents_Pokemon.Running:
                                    run,Run_Aftermath = True,True
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.SelfFaintingMoves:
                                if not Exploded:
                                    if self.Opponents_Pokemon.Faint:
                                        self.Opponents_Pokemon.HP = 0
                                        self.Opponents_Pokemon.Faint = False
                                    Exploded = True
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.RecoilMoves:
                                self.Opponents_Pokemon.HP -= self.Opponents_Pokemon.RecoilDamage
                                self.Opponents_Pokemon.RecoilDamage = 0
                            elif self.Opponents_Pokemon.Attack == "Pay Day" and self.Opponents_Pokemon.AttackDamage > 0:
                                Extra_Money = self.Opponents_Pokemon.Level * 2
                            elif self.Opponents_Pokemon.Attack == "Rage" and self.Opponents_Pokemon.AttackDamage > 0:
                                if not Rage:
                                    if self.Opponents_Pokemon.RageOn:
                                        if self.Opponents_Pokemon.AtkCounter < 6:self.Opponents_Pokemon.AtkCounter += 1
                                    Rage = True
                                self.Opponents_Pokemon.RageOn = True
                                self.Opponents_Pokemon.AftermathText3 = f"{self.Opponents_Pokemon.NickName} rage builds"
                            elif self.BattlePlayerPoke.RageOn and self.Opponents_Pokemon.AttackDamage > 0:
                                if not Rage:
                                    if self.BattlePlayerPoke.AtkCounter < 6:self.BattlePlayerPoke.AtkCounter += 1
                                    Rage = True
                            elif self.BattlePlayerPoke.Attack == "Counter" and Pokemon_Move_Type[self.Opponents_Pokemon.Attack] in ("Normal","Fighting") and self.Opponents_Pokemon.AttackDamage > 0:
                                self.BattlePlayerPoke.CounterDamage = self.Opponents_Pokemon.AttackDamage * 2
                                self.BattlePlayerPoke.Get_Move(self.BattlePlayerPoke,self.Opponents_Pokemon)
                            elif self.Opponents_Pokemon.Attack == "Haze":
                                self.BattlePlayerPoke.Get_Hazed()
                                self.Opponents_Pokemon.Get_Hazed()
                            elif self.Opponents_Pokemon.IdleMove in self.Opponents_Pokemon.PokemonMoves.RampageMoves and self.Opponents_Pokemon.IdleTurns == 0:
                                self.Opponents_Pokemon.Attack_AfterMath("Confused",'',0,'',0,False)
                                self.Opponents_Pokemon.AftermathText3 = f"{self.Opponents_Pokemon.NickName} was confused by fatigue"
                            elif self.Opponents_Pokemon.Attack in self.Opponents_Pokemon.PokemonMoves.HealingMoves:
                                if not Drained_HP:
                                    self.Opponents_Pokemon.HP += self.Opponents_Pokemon.HealedHP
                                    Drained_HP = True
                                if Drained_HP:
                                    if self.Opponents_Pokemon.HP > self.Opponents_Pokemon.MAXHP:self.Opponents_Pokemon.HP = self.Opponents_Pokemon.MAXHP
                            if self.Opponents_Pokemon.Status == "SLP":
                                self.Opponents_Pokemon.IdleTurns = 0
                                self.Opponents_Pokemon.IdleMove = ''
                            if Pokemon_Move_Type[self.Opponents_Pokemon.Attack] == "Fire" and self.Opponents_Pokemon.Attack != "Fire Spin" and self.BattlePlayerPoke.Status == "FRZ":
                                UThawed = True
                            if self.Opponents_Pokemon.AftermathText1 == "":
                                if self.Opponents_Pokemon.Attack == "Substitute":
                                    if not self.Opponents_Pokemon.SubstituteOn and self.Opponents_Pokemon.HP > (self.Opponents_Pokemon.MAXHP * 0.25):
                                        self.Opponents_Pokemon.SubstituteOn = True
                                        self.Opponents_Pokemon.SubstituteHP = (self.Opponents_Pokemon.HP * 0.25) + 1
                                        self.Opponents_Pokemon.HP -= (self.Opponents_Pokemon.HP * 0.25)
                                        self.Opponents_Pokemon.AftermathText1 = f"{self.Opponents_Pokemon.NickName} made a Substitute"
                                    else:self.Opponents_Pokemon.AftermathText1 = "It failed"
                            if self.Opponents_Pokemon.AftermathText1 != '' or self.Opponents_Pokemon.AftermathText2 != '' or self.Opponents_Pokemon.AftermathText3 != '' : self.BattleDialouge(self.Opponents_Pokemon.AftermathText1,self.Opponents_Pokemon.AftermathText2,self.Opponents_Pokemon.AftermathText3)
                            else: 
                                self.Enemy_Turn[1] = "Battle Over?"
                                Battle_overp1 = True
                        if self.Enemy_Turn[1] == "Battle Over?":
                            Rage = False
                            if self.BattlePlayerPoke.HP <= 0 and self.Opponents_Pokemon.HP > 0: 
                                self.BattlePlayerPoke.HP = 0
                                Battle_Over = True
                                self.Opponents_Pokemon.TrappedTurns = 0
                                for poke in self.Player.Pokemon:
                                    if poke.HP > 0: Player_Next_Pokemon = True
                                if not Player_Next_Pokemon:Player_lost = True
                                self.Enemy_Turn[1] = "Done"
                            elif self.Opponents_Pokemon.HP <= 0 and not Battle_Over and self.BattlePlayerPoke.HP > 0: 
                                Battle_Over = True
                                Exp_Gain = True
                                self.BattlePlayerPoke.TrappedTurns = 0
                                self.Enemy_Turn[1] = "Done"
                            elif self.BattlePlayerPoke.HP <= 0 and self.Opponents_Pokemon.HP <= 0:
                                Battle_Over = True
                                Exp_Gain = True
                                self.BattlePlayerPoke.TrappedTurns = 0
                            else:
                                if self.Enemy_Turn[0] == 1:
                                    self.Player_Turn[1] = "Move Call"
                                    self.Enemy_Turn[1] = "Done"
                                    self.Fight = False
                                    Sleep_Check = True
                                elif self.Enemy_Turn[0] == 2:
                                    TurnEffects = True
                                    Battle_Options = False
                                    self.BattlePlayerPoke.Attack = ''
                                    self.Opponents_Pokemon.Attack = ''
                                    self.Fight = False
                                    Move_Start = False
                                    self.BattlePlayerPoke.MoveTurn = ""
                                    self.Opponents_Pokemon.MoveTurn = ""
                                    if Battle_overp1:
                                        Sleep_Check = True
                                        Move_Start = False
                                        self.BattlePlayerPoke.MoveTurn = ""
                                        self.Opponents_Pokemon.MoveTurn = ""
                                        self.BattlePlayerPoke.SleepTimer -= 1
                                        self.Opponents_Pokemon.SleepTimer -= 1
                                        self.BattlePlayerPoke.DisabledTimer -= 1
                                        self.Opponents_Pokemon.DisabledTimer -= 1
                                        self.BattlePlayerPoke.TrappedTurns -= 1
                                        self.Opponents_Pokemon.TrappedTurns -= 1
                                        if self.BattlePlayerPoke.TrappedTurns == 0:UTrapped_Check =True
                                        if self.Opponents_Pokemon.TrappedTurns == 0:OTrapped_Check =True
                                        Battle_overp1 = False
                                        Status_Check = True
                                    if self.BattlePlayerPoke.DisabledTimer <= 0 and self.BattlePlayerPoke.DisabledMove != '':
                                        self.BattlePlayerPoke.DisabledMove = ''
                                        UAble_Check = True
                                    if self.Opponents_Pokemon.DisabledTimer <= 0 and self.Opponents_Pokemon.DisabledMove != '':
                                        self.Opponents_Pokemon.DisabledMove = ''
                                        OAble_Check = True
                                    if self.BattlePlayerPoke.Status == "SLP":
                                        if self.BattlePlayerPoke.SleepTimer <= 0:
                                            self.BattlePlayerPoke.Status = 'OK'
                                            UAwake_Check = True 
                                    if self.Opponents_Pokemon.Status == "SLP":
                                        if self.Opponents_Pokemon.SleepTimer <= 0:
                                            self.Opponents_Pokemon.Status = 'OK'
                                            OAwake_Check = True 
                                    if Status_Check:
                                        if UAwake_Check:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} woke up")
                                        elif OAwake_Check:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} woke up")
                                        elif UAble_Check:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName}'s move is enabled")
                                        elif OAble_Check:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName}'s move is enabledp")
                                        elif UTrapped_Check:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} is untrapped")
                                        elif OTrapped_Check:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} is untrapped")          
                                        elif UThawed:self.BattleDialouge(f"{self.BattlePlayerPoke.NickName} thawed out of the ice")
                                        elif OThawed:self.BattleDialouge(f"{self.Opponents_Pokemon.NickName} thawed out of the ice")
                                        if True not in (UAwake_Check,OAwake_Check,UAble_Check,OAble_Check,UTrapped_Check,OTrapped_Check,UThawed,OThawed):
                                            self.Enemy_Turn[1] = "Done"
                                            Status_Check = False
                                    self.Opponents_Pokemon.AftermathText1,self.Opponents_Pokemon.AftermathText2,self.Opponents_Pokemon.AftermathText3 = "","",""
                            Drained_HP = False
                        if Battle_Over:
                            if (self.Opponents_Pokemon.HP <= 0 and self.BattlePlayerPoke.HP > 0) or (self.Opponents_Pokemon.HP <= 0 and self.BattlePlayerPoke.HP <= 0):
                                self.BattlePlayerPoke.EnemyBattlerect,self.Opponents_Pokemon.PlayerBattlerect = self.Opponents_Pokemon.EnemyBattlerect,self.BattlePlayerPoke.PlayerBattlerect
                                self.Enemy_Turn[1] = ""
                                self.Player_Turn[1] = ""
                                if Exp_Gain:
                                    self.Particaptionlist = [i[0] for i in enumerate(self.Player.Pokemon) if i[1].HP > 0 and i[1].Particaption]
                                    if not Two_D_ListCheck(self.Player.Bag,"EXP All"):
                                        for i in self.Particaptionlist:
                                            self.Player.Pokemon[i].Exp_Gain(self.Opponents_Pokemon,len(self.Particaptionlist),self.PlayerName,False)
                                    if Two_D_ListCheck(self.Player.Bag,"EXP All"):
                                        for i in range(len(self.Player.Pokemon)):
                                            if self.Player.Pokemon[i].HP > 0:
                                                self.Player.Pokemon[i].Exp_Gain(self.Opponents_Pokemon,len(self.Particaptionlist),self.PlayerName,True)
                                        for poke in self.Player.Pokemon:
                                            if poke not in self.Particaptionlist and poke.HP > 0: self.Particaptionlist.append(poke)
                                    LV_uplist = [i[0] for i in enumerate(self.Player.Pokemon) if i[0] in self.Particaptionlist and i[1].Level_up]
                                    Exp_Gain = False
                                    if len(self.Particaptionlist) == 0:Exit = True
                                    if len(self.Particaptionlist) > 0:Exp_Gain_Aftermath_poke1 = True
                                if Exp_Gain_Aftermath_poke1:
                                    if LV_uplist:
                                        if self.Particaptionlist[0] == LV_uplist[0]: 
                                            Text2 = f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[0]].Level}"
                                        else: Text2 = ''
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[0]].GainEXP)} exp",Text2)   
                                if LearnedMovepoke1:
                                    if self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[0]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[0]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Poke1EvolutionDescison = True
                                            LearnedMovepoke1 = False
                                    else:
                                        Poke1EvolutionDescison = True
                                        LearnedMovepoke1 = False
                                if Poke1EvolutionDescison:
                                    if self.Player.Pokemon[self.Particaptionlist[0]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[0]].Level and self.Player.Pokemon[self.Particaptionlist[0]].Level_up:
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} is trying to evolve. Should they evolve")
                                        self.BattleDecison()
                                        if self.BattleYes: 
                                            Poke1Evolution = True
                                            Poke1EvolutionDescison = False
                                        if self.BattleNo: 
                                            Exp_Gain_Aftermath_poke2 = True
                                            Poke1EvolutionDescison = False
                                        self.BattleYes,self.BattleNo = False,False
                                    else:
                                        Poke1EvolutionDescison = False
                                        Exp_Gain_Aftermath_poke2 = True
                                if Poke1Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[0]].Front_Img,(400,100))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[0]].NextStage[1]}")
                                if NewPoke1Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[0]].Front_Img,(400,100))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[0]].Name,Caught=True)
                                if LearnedMoveNewpoke1:
                                    if self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[0]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[0]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[0]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[0]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[0]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Exp_Gain_Aftermath_poke2 = True
                                            LearnedMoveNewpoke1 = False  
                                    else:
                                        Exp_Gain_Aftermath_poke2 = True
                                        LearnedMoveNewpoke1 = False                           
                                if Exp_Gain_Aftermath_poke2:
                                    if len(self.Particaptionlist) >= 2:
                                        if len(LV_uplist) >= 2:
                                            if self.Particaptionlist[1] == LV_uplist[1]: 
                                                Text2 = f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[1]].Level}"
                                            else: Text2 = ''
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[1]].GainEXP)} exp",Text2)
                                    else:
                                        Exp_Gain_Aftermath_poke2 = False
                                        Exit = True
                                if LearnedMovepoke2:
                                    if self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[1]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[1]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Poke2EvolutionDescison = True
                                            LearnedMovepoke2 = False
                                    else:
                                        Poke2EvolutionDescison = True
                                        LearnedMovepoke2 = False
                                if Poke2EvolutionDescison:
                                    if len(self.Particaptionlist) > 1:
                                        if self.Player.Pokemon[self.Particaptionlist[1]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[1]].Level and self.Player.Pokemon[self.Particaptionlist[1]].Level_up:
                                            self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} is trying to evolve. Should they evolve")
                                            self.BattleDecison()
                                            if self.BattleYes: 
                                                Poke2Evolution = True
                                                Poke2EvolutionDescison = False
                                            if self.BattleNo: 
                                                Exp_Gain_Aftermath_poke3 = True
                                                Poke2EvolutionDescison = False
                                            self.BattleYes,self.BattleNo = False,False
                                        else:
                                            Poke2EvolutionDescison = False
                                            Exp_Gain_Aftermath_poke3 = True
                                    else:
                                        Poke2EvolutionDescison = False
                                        Exp_Gain_Aftermath_poke3 = True
                                if Poke2Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[1]].Front_Img,(400,100))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[1]].NextStage[1]}")
                                if NewPoke2Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[1]].Front_Img,(400,100))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[1]].Name,Caught=True)
                                if LearnedMoveNewpoke2:
                                    if self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[1]].NewMoveStatus == "Choice":
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[1]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[1]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[1]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[1]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Poke2EvolutionDescison = True
                                            LearnedMovepoke2 = False        
                                    else:
                                        Exp_Gain_Aftermath_poke3 = True
                                        LearnedMoveNewpoke2 = False
                                if Exp_Gain_Aftermath_poke3:
                                    if len(self.Particaptionlist) >= 3:
                                        if len(LV_uplist) >= 3:
                                            if self.Particaptionlist[2] == LV_uplist[2]: 
                                                Text2 = f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[2]].Level}"
                                            else: Text2 = ''
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[2]].GainEXP)} exp",Text2)
                                    else:
                                        Exp_Gain_Aftermath_poke3 = False
                                        Exit = True
                                if LearnedMovepoke3:
                                    if self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[2]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[2]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Poke3EvolutionDescison = True
                                            LearnedMovepoke3 = False
                                    else:
                                        Poke3EvolutionDescison = True
                                        LearnedMovepoke3 = False
                                if Poke3EvolutionDescison:
                                    if len(self.Particaptionlist) > 2:
                                        if self.Player.Pokemon[self.Particaptionlist[2]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[2]].Level and self.Player.Pokemon[self.Particaptionlist[2]].Level_up:
                                            self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} is trying to evolve. Should they evolve")
                                            self.BattleDecison()
                                            if self.BattleYes: 
                                                Poke3Evolution = True
                                                Poke3EvolutionDescison = False
                                            if self.BattleNo: 
                                                Exp_Gain_Aftermath_poke4 = True
                                                Poke3EvolutionDescison = False
                                            self.BattleYes,self.BattleNo = False,False
                                        else:
                                            Poke3EvolutionDescison = False
                                            Exp_Gain_Aftermath_poke4 = True
                                    else:
                                        Poke3EvolutionDescison = False
                                        Exp_Gain_Aftermath_poke4 = True
                                if Poke3Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[2]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[2]].NextStage[1]}")
                                if NewPoke3Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[2]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[2]].Name,Caught=True)
                                if LearnedMoveNewpoke3:
                                    if self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[2]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[2]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[2]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[2]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[2]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Exp_Gain_Aftermath_poke4 = True
                                            LearnedMoveNewpoke3 = False
                                    else:
                                        Exp_Gain_Aftermath_poke4 = True
                                        LearnedMoveNewpoke3 = False
                                if Exp_Gain_Aftermath_poke4:
                                    if len(self.Particaptionlist) >= 4:
                                        if len(LV_uplist) >= 4:
                                            if self.Particaptionlist[3] == LV_uplist[3]: 
                                                Text2 = f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[3]].Level}"
                                            else: Text2 = ''
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[3]].GainEXP)} exp",Text2)
                                    else:
                                        Exp_Gain_Aftermath_poke4 = False
                                        Exit = True
                                if LearnedMovepoke4:
                                    if self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[3]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[3]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Poke4EvolutionDescison = True
                                            LearnedMovepoke4 = False
                                    else:
                                        Poke4EvolutionDescison = True
                                        LearnedMovepoke4 = False
                                if Poke4EvolutionDescison:
                                    if len(self.Particaptionlist) > 3:
                                        if self.Player.Pokemon[self.Particaptionlist[3]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[3]].Level and self.Player.Pokemon[self.Particaptionlist[3]].Level_up:
                                            self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} is trying to evolve. Should they evolve")
                                            self.BattleDecison()
                                            if self.BattleYes: 
                                                Poke4Evolution = True
                                                Poke4EvolutionDescison = False
                                            if self.BattleNo: 
                                                Exp_Gain_Aftermath_poke5 = True
                                                Poke4EvolutionDescison = False
                                            self.BattleYes,self.BattleNo = False,False
                                        else:
                                            Poke4EvolutionDescison = False
                                            Exp_Gain_Aftermath_poke5 = True
                                    else:
                                        Poke4EvolutionDescison = False
                                        Exp_Gain_Aftermath_poke5 = True
                                if Poke4Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[3]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[3]].NextStage[1]}")
                                if NewPoke4Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[3]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[3]].Name,Caught=True)
                                if LearnedMoveNewpoke4:
                                    if self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[3]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[3]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[3]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[3]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[3]].NewMove}")
                                        if self.BattleNo:
                                            self.AnotherMove = False
                                            self.BattleNo = False
                                            Exp_Gain_Aftermath_poke5 = True
                                            LearnedMoveNewpoke4 = False    
                                    else:
                                        Exp_Gain_Aftermath_poke5 = True
                                        LearnedMoveNewpoke4 = False                              
                                if Exp_Gain_Aftermath_poke5:
                                    if len(self.Particaptionlist) >= 5:
                                        if len(LV_uplist) >= 5:
                                            if self.Particaptionlist[4] == LV_uplist[4]: 
                                                Text2 = f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[4]].Level}"
                                            else: Text2 = ''
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[4]].GainEXP)} exp",Text2)
                                    else:
                                        Exp_Gain_Aftermath_poke5 = False
                                        Exit = True
                                if LearnedMovepoke5:
                                    if self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[4]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[4]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Poke5EvolutionDescison = True
                                            LearnedMovepoke5 = False
                                    else:
                                        Poke5EvolutionDescison = True
                                        LearnedMovepoke5 = False
                                if Poke5EvolutionDescison:
                                    if len(self.Particaptionlist) > 4:
                                        if self.Player.Pokemon[self.Particaptionlist[4]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[4]].Level and self.Player.Pokemon[self.Particaptionlist[4]].Level_up:
                                            self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} is trying to evolve. Should they evolve")
                                            self.BattleDecison()
                                            if self.BattleYes: 
                                                Poke5Evolution = True
                                                Poke5EvolutionDescison = False
                                            if self.BattleNo: 
                                                Exp_Gain_Aftermath_poke6 = True
                                                Poke5EvolutionDescison = False
                                            self.BattleYes,self.BattleNo = False,False
                                        else:
                                            Poke5EvolutionDescison = False
                                            Exp_Gain_Aftermath_poke6 = True
                                    else:
                                        Poke5EvolutionDescison = False
                                        Exp_Gain_Aftermath_poke6 = True
                                if Poke5Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[4]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[4]].NextStage[1]}")
                                if NewPoke5Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[4]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[4]].Name,Caught=True)
                                if LearnedMoveNewpoke5:
                                    if self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[4]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[4]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[4]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[4]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[4]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Exp_Gain_Aftermath_poke6 = True
                                            LearnedMovepoke5 = False
                                    else:
                                        Exp_Gain_Aftermath_poke6 = True
                                        LearnedMoveNewpoke5 = False                                                          
                                if Exp_Gain_Aftermath_poke6:
                                    if len(self.Particaptionlist) >= 6:
                                        if len(LV_uplist) >= 6:
                                            if self.Particaptionlist[5] == LV_uplist[5]: 
                                                Text2 = f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} went to level {self.Player.Pokemon[self.Particaptionlist[5]].Level}"
                                            else: Text2 = ''
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} gained {round(self.Player.Pokemon[self.Particaptionlist[5]].GainEXP)} exp",Text2)
                                    else:
                                        Exp_Gain_Aftermath_poke6 = False
                                        Exit = True
                                if LearnedMovepoke6:
                                    if self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[5]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[5]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Poke6EvolutionDescison = True
                                            LearnedMovepoke6 = False
                                    else:
                                        LearnedMovepoke6 = False
                                        Poke6EvolutionDescison = True
                                if Poke6EvolutionDescison:
                                    if len(self.Particaptionlist) > 5:
                                        if self.Player.Pokemon[self.Particaptionlist[5]].NextStage[0] == self.Player.Pokemon[self.Particaptionlist[5]].Level and self.Player.Pokemon[self.Particaptionlist[5]].Level_up:
                                            self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} is trying to evolve. Should they evolve")
                                            self.BattleDecison()
                                            if self.BattleYes: 
                                                Poke6Evolution = True
                                                Poke6EvolutionDescison = False
                                            if self.BattleNo: 
                                                Exit = True
                                                Poke4EvolutionDescison = False
                                            self.BattleYes,self.BattleNo = False,False
                                        else:
                                            Poke6EvolutionDescison = False
                                            Exit = True
                                    else:
                                        Poke6EvolutionDescison = False
                                        Exit = True
                                if Poke6Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[5]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} is evolving into a {self.Player.Pokemon[self.Particaptionlist[5]].NextStage[1]}")
                                if NewPoke6Evolution:
                                    SCREEN.fill("White")
                                    SCREEN.blit(self.Player.Pokemon[self.Particaptionlist[5]].Front_Img,(400,400))
                                    self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].Name} is here")
                                    self.AddPokeDex(self.Player.Pokemon[self.Particaptionlist[5]].Name,Caught=True)
                                if LearnedMoveNewpoke6:
                                    if self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Learned":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}")
                                    elif self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus != "None" and self.Player.Pokemon[self.Particaptionlist[5]].NewMoveStatus == "Choice":
                                        self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} wants to learn {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}","But it already has 4 moves do you want to delete one to make room")
                                        self.BattleDecison()
                                        if self.BattleYes:
                                            self.AnotherMove = True
                                            self.BattleYes = False
                                        if self.AnotherMove:
                                            self.PokemonOver4Moves = self.Player.Pokemon[self.Particaptionlist[5]]
                                            self.PokemonOver4MovesLearn(self.Player.Pokemon[self.Particaptionlist[5]].NewMove)
                                        if self.MoveDesicion:
                                            if not self.AnotherMove and self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} learned {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}")
                                            if not self.AnotherMove and not self.AnotherMoveGiven:
                                                self.BattleDialouge(f"{self.Player.Pokemon[self.Particaptionlist[5]].NickName} gave up on learning {self.Player.Pokemon[self.Particaptionlist[5]].NewMove}")
                                        if self.BattleNo:
                                            self.BattleNo = False
                                            self.AnotherMove = False
                                            Exit = True
                                            LearnedMovepoke6 = False
                                    else:
                                        Exit = True
                                        LearnedMoveNewpoke6 = False                                                
                            elif self.BattlePlayerPoke.HP <= 0 and self.Opponents_Pokemon.HP > 0:
                                if Player_Next_Pokemon:
                                    self.Pokemon_Menu()
                                    if self.Player_NP.HP > 0: 
                                        Bring_Out = True
                                        Player_Next_Pokemon = False
                                if Bring_Out:
                                    self.BattleDialouge(f"Lets go {self.Player_NP.NickName}")
                                if Rematch:
                                    self.BattlePlayerPoke = self.Player_NP
                                    self.BattlePlayerPoke.EnemyBattlerect,self.Opponents_Pokemon.PlayerBattlerect = self.Opponents_Pokemon.EnemyBattlerect,self.BattlePlayerPoke.PlayerBattlerect
                                    self.BattlePlayerPoke.Particaption = True
                                    UPoke_Name = self.Events.Game_Font2.render(self.BattlePlayerPoke.NickName,True,"Black")
                                    UPoke_Name_rect = UPoke_Name.get_rect(topleft = (475,306))
                                    UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
                                    UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
                                    UPokeHP = self.Events.Game_font.render("HP:",True,"Black")
                                    UPokeHP_rect = UPokeHP.get_rect(topleft = (UPoke_Name_rect.x,346))
                                    UPokeHP_Text = self.Events.Game_font.render(f"{self.BattlePlayerPoke.HP}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
                                    UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (530,370))
                                    UPokeHP_Text = self.Events.Game_font.render(f"{round(self.BattlePlayerPoke.HP)}/{self.BattlePlayerPoke.MAXHP}",True,"Black")
                                    UPokeHP_Text_rect = UPokeHP.get_rect(topleft = (530,381))
                                    self.BattlePlayerPoke.Draw_Healthar(UPokeHP_rect.centerx + 20,UPokeHP_rect.centery - 5)
                                    UPokeLV = self.Events.Game_Font2.render(f"LV:{self.BattlePlayerPoke.Level}",True,"Black")
                                    UPokeLV_rect = UPokeLV.get_rect(topleft = (UPoke_Name_rect.topright[0] + 30,UPoke_Name_rect.y))
                                    self.UMove1_Rect,self.UMove1_Text,self.UMove1_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[0])
                                    self.UMove2_Rect,self.UMove2_Text,self.UMove2_Text_Rect = self.Make_Option_Button(pygame.Rect((258,self.BattleBox.y + 5),(150,100)),self.BattlePlayerPoke.Moves[1])
                                    self.UMove3_Rect,self.UMove3_Text,self.UMove3_Text_Rect = self.Make_Option_Button(pygame.Rect((self.BattleBox.x + 5,695),(150,100)),self.BattlePlayerPoke.Moves[2])
                                    self.UMove4_Rect,self.UMove4_Text,self.UMove4_Text_Rect = self.Make_Option_Button(pygame.Rect((258,695),(150,100)),self.BattlePlayerPoke.Moves[3])
                                    TurnEffects = True
                                    Battle_Options = False
                                    Player_Next_Pokemon = False
                                    self.BattlePlayerPoke.Attack = ''
                                    self.Opponents_Pokemon.Attack = ''
                                    self.Fight = False
                                    self.BattlePlayerPoke.MoveTurn = ""
                                    self.Player_Turn[1] = "Done"
                                    Bring_Out = False
                                    Battle_Over = False
                                    self.Enemy_Turn[1] = "Done"
                                    Sleep_Check = True
                                    Move_Start = False
                                    Rematch = False
                                    self.Player_NP = Pokemon("Squirtle",1,["-",'-','-','-'],"Wild","Squirt")
                                    self.Player_NP.HP = 0
                                if Player_lost:                                  
                                    self.BattleDialouge(f"{self.PlayerName} is out of useable pokemon and blacked out")                  
                            if Exit:
                                self.BattleStart = False
                                self.Player.Money += Extra_Money
                                self.Black_Screen = pygame.Rect(-1000,0,SCREEN.get_width(),SCREEN.get_height())
                                break
                pygame.display.update()
                clock.tick(120)
            self.Player_Pause = False
            self.Reset_PokemonAfterBattle()

    def SafariBattle(self):
        self.Opponents_Pokemon.BattleRole = "Enemy"
        OPoke_Name = self.Events.Game_Font2.render(self.Opponents_Pokemon.Name,True,"Black")
        OPoke_Name_rect = OPoke_Name.get_rect(topleft = (30,10))
        OPokeLV = self.Events.Game_Font2.render(f"LV:{self.Opponents_Pokemon.Level}",True,"Black")
        OPokeLV_rect = OPokeLV.get_rect(topleft = (OPoke_Name_rect.topright[0] + 30,OPoke_Name_rect.y))
        Text2 = ''
        self.Enemy_Turn = [0,"None"]
        Battle = False
        Battle_Options = True
        Trainer_Intro = True
        Run_Aftermath = False
        Battle_Over = False
        NickName = ''
        NickName_surf = self.Events.Game_font.render(NickName,True,"Black")
        NickName_rect = NickName_surf.get_rect(center = self.Events.NameInputBox.center)
        NickName_Maker = False
        Battle_Aftermath = False
        Exit = False
        Rematch = False
        PokeCatchrate = self.Opponents_Pokemon.CatchRate
        Caught = [False,0]
        Catching_Aftermath = False
        Shake_1 = False
        Shake_2 = False
        Rock_Aftermath = False
        Shake_3 = False
        Catch_Confirm = False
        Flee = random.randint(0,255)
        Angry_Counter = 0
        Rock_Animation = False
        self.BattleYes,self.BattleNo = False,False
        Bait_Aftermath = False
        Bait_Animation = False
        self.Run = False
        Eating_Counter = 0
        self.Rock_Rect,self.Rock_Text,self.Rock_Text_Rect = self.Make_Option_Button(pygame.Rect(4,720,200,75),"THROW ROCK")
        self.Bait_Rect,self.Bait_Text,self.Bait_Text_Rect = self.Make_Option_Button(pygame.Rect(595,455,200,60),"BAIT")
        self.SZRun_Rect,self.SZRun_Text,self.SZRun_Text_Rect = self.Make_Option_Button(pygame.Rect(595,720,200,75),"RUN")
        running = True
        if self.BattleStart:
            self.Player.Moveable = False
            self.AddPokeDex(self.Opponents_Pokemon.Name)
            self.Draw_Player = False
            while running:
                for e in pygame.event.get():
                    if e.type == pygame.QUIT:
                        pygame.quit()
                        sys.exit()
                    if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                        if Trainer_Intro:
                            Trainer_Intro = False
                            Battle = True
                        elif Shake_1:
                            Shake_1 = False
                            Shake_2 = True
                        elif Shake_2:
                            Shake_2 = False
                            Shake_3 = True
                        elif Shake_3:
                            Shake_3 = False
                            Catch_Confirm = True
                        elif Catch_Confirm:
                            if Caught[0]:
                                NickName_Maker = True
                                Caught = [False,3] 
                                Catch_Confirm = False                               
                            else:
                                self.Catching[0] = False
                                Catch_Confirm = False
                                Catching_Aftermath = False
                        elif Rock_Aftermath or Bait_Aftermath:
                            Rock_Aftermath = False
                            Bait_Aftermath = False
                            self.Enemy_Turn[1] = "Flee Attempt"
                        elif self.Enemy_Turn[1] == "Run Away":
                            self.Catching = [False,"Poke"]
                            running = False
                        elif self.Run:running = False
                    if NickName_Maker:
                        self.Events.NameInputBox.w = max(50,NickName_surf.get_width()) + 10
                        if e.type == pygame.KEYDOWN:
                            if e.key == pygame.K_BACKSPACE:
                                NickName = NickName[:-1]
                            elif e.key == pygame.K_RETURN and len(NickName) >= 1:
                                self.Opponents_Pokemon.NickName = NickName
                                self.Opponents_Pokemon.PlayerBattlerect = self.Opponents_Pokemon.Back_Img.get_rect(topleft = (70, 240))
                                self.BattleYes,self.BattleNo = False,True
                            else:
                                if len(NickName) < 7:NickName += e.unicode
                SCREEN.fill("White")
                if Trainer_Intro:
                    SCREEN.blit(self.Opponents_Pokemon.Front_Img,self.Opponents_Pokemon.EnemyBattlerect)
                    self.BattleDialouge(f" A wild {self.Opponents_Pokemon.Name} appears!!",Text3="Shift to go on")
                    SCREEN.blit(self.Player_Back,self.Player_Back_rect)
                if Battle:
                    SCREEN.blit(self.Player_Back,self.Player_Back_rect)
                    SCREEN.blit(self.Opponents_Pokemon.Front_Img,self.Opponents_Pokemon.EnemyBattlerect)
                    SCREEN.blit(OPoke_Name,OPoke_Name_rect)
                    SCREEN.blit(OPokeLV,OPokeLV_rect)
                    self.Balls_Rect,self.Balls_Text,self.Balls_Text_Rect = self.Make_Option_Button(pygame.Rect(5,455,200,70),f"Ballx{self.Safari_Balls}")
                    if Battle_Options:
                        if self.Safari_Balls == 0:running = False
                        pygame.draw.rect(SCREEN,"White",self.BattleBox)
                        pygame.draw.rect(SCREEN,"Black",self.BattleBox,5)
                        self.Show_Options1([(self.Balls_Rect,self.Balls_Text,self.Balls_Text_Rect),(self.Rock_Rect,self.Rock_Text,self.Rock_Text_Rect),(self.Bait_Rect,self.Bait_Text,self.Bait_Text_Rect),(self.SZRun_Rect,self.SZRun_Text,self.SZRun_Text_Rect)],"White")
                        if self.Balls_Rect.collidepoint(pygame.mouse.get_pos()):
                            if pygame.mouse.get_pressed()[0]:self.Clicked = True
                            else:
                                if self.Clicked:
                                    if self.Safari_Balls > 0:
                                        Battle_Options = False
                                        self.Safari_Balls -= 1
                                        self.Catching[1] = "Safari Ball"
                                        Caught = self.CatchPokemon()
                                        Catching_Aftermath = True
                                        Shake_1 = True
                                    self.Clicked= False
                        if self.Rock_Rect.collidepoint(pygame.mouse.get_pos()):
                            if pygame.mouse.get_pressed()[0]:self.Clicked = True
                            else:
                                if self.Clicked: 
                                    Rock_Animation = True
                                    self.Clicked= False
                                    Angry_Counter += random.randint(1,5)
                                    if Angry_Counter > 255:Angry_Counter = 255
                                    Eating_Counter = 0
                                    self.Opponents_Pokemon.CatchRate *= 2
                                    if self.Opponents_Pokemon.CatchRate > 255:self.Opponents_Pokemon.CatchRate = 255
                                    Battle_Options = False               
                        if self.Bait_Rect.collidepoint(pygame.mouse.get_pos()):
                            if pygame.mouse.get_pressed()[0]:self.Clicked = True
                            else:
                                if self.Clicked:
                                    Bait_Animation = True
                                    self.Clicked= False
                                    Eating_Counter += random.randint(1,5)
                                    if Eating_Counter > 255:Eating_Counter = 255
                                    Angry_Counter = 0
                                    self.Opponents_Pokemon.CatchRate = self.Opponents_Pokemon.CatchRate//2
                                    Battle_Options = False           
                        if self.SZRun_Rect.collidepoint(pygame.mouse.get_pos()):
                            if pygame.mouse.get_pressed()[0]:self.Clicked = True
                            else:
                                if self.Clicked:
                                    self.Run = True
                                    self.Clicked= False
                                    Battle_Options = False
                    if self.Run:self.BattleDialouge("You ran away")
                    if Catching_Aftermath:
                        if Shake_1:
                            if Caught[1] >= 1: self.BattleDialouge("The Poke Ball shakes once")
                            else: 
                                Shake_1 = False
                                Shake_2 = True
                        if Shake_2:
                            if Caught[1] >= 2: self.BattleDialouge("The Poke Ball shakes twice")
                            else: 
                                Shake_2 = False
                                Shake_3= True
                        if Shake_3:
                            if Caught[1] >= 3: self.BattleDialouge("The Poke Ball shakes for a third time")
                            else: 
                                Catch_Confirm = True
                                Shake_3 = False
                        if Catch_Confirm:
                            if Caught[0]:
                                self.BattleDialouge("The Pokemon is caught")
                                self.Opponents_Pokemon.Trainer = self.PlayerName
                                self.Opponents_Pokemon.BattleRole ="Player"
                                self.AddPokeDex(self.Opponents_Pokemon.Name,True)
                            else:
                                self.BattleDialouge("The Pokemon Broke out")
                        if NickName_Maker: 
                            self.BattleDialouge("Do you want to nickname this pokemon")
                            self.BattleDecison()
                            if self.BattleYes:
                                SCREEN.fill("White")
                                NickName_surf = self.Events.Game_font.render(NickName,True,"Black")
                                NickName_rect = NickName_surf.get_rect(center = self.Events.NameInputBox.center)
                                pygame.draw.rect(SCREEN,"Black",self.Events.NameInputBox,2)
                                SCREEN.blit(NickName_surf,NickName_rect)
                            if self.BattleNo:
                                self.Player.Add_Pokemon(self.Opponents_Pokemon)
                                self.Catching = [False,"Poke"]
                                self.No = False
                                running = False
                                break               
                    if Rock_Animation:
                        self.BattleDialouge(f"{self.PlayerName} threw a rock")
                        pygame.draw.circle(pygame.display.get_surface(),"Gray",self.Opponents_Pokemon.EnemyBattlerect.center,10)
                        self.Opponents_Pokemon.Delay -= 1
                        if self.Opponents_Pokemon.Delay <= 0: 
                            self.Opponents_Pokemon.Delay = 100
                            Rock_Animation = False
                            Rock_Aftermath = True
                    if Rock_Aftermath:self.BattleDialouge(f"{self.Opponents_Pokemon.Name} got angry!")
                    if Bait_Animation:
                        self.BattleDialouge(f"{self.PlayerName} threw some food")
                        pygame.draw.circle(pygame.display.get_surface(),"Green",self.Opponents_Pokemon.EnemyBattlerect.center,10)
                        self.Opponents_Pokemon.Delay -= 1
                        if self.Opponents_Pokemon.Delay <= 0: 
                            self.Opponents_Pokemon.Delay = 100
                            Bait_Animation = False
                            Bait_Aftermath = True
                    if Bait_Aftermath:self.BattleDialouge(f"{self.Opponents_Pokemon.Name} is eating")
                    if self.Enemy_Turn[1] == "Flee Attempt":
                        Flee = random.randint(0,255)
                        if self.Opponents_Pokemon.SPEED >= 128: self.Enemy_Turn[1] = "Run Away"
                        elif Eating_Counter > 0:
                            if Flee < self.Opponents_Pokemon.SPEED//2:self.Enemy_Turn[1] = "Run Away"
                        elif Angry_Counter > 0:
                            if Flee < (self.Opponents_Pokemon.SPEED *4):self.Enemy_Turn[1] = "Run Away"
                        elif Angry_Counter == 0 and Eating_Counter == 0:
                            if Flee < (self.Opponents_Pokemon.SPEED *2):self.Enemy_Turn[1] = "Run Away"
                        if self.Enemy_Turn[1] != "Run Away":
                            if Angry_Counter > 0:
                                Angry_Counter -= 1
                                if Angry_Counter < 0: Angry_Counter = 0
                                if Angry_Counter == 0: self.Opponents_Pokemon.CatchRate = PokeCatchrate
                            if Eating_Counter > 0:
                                Eating_Counter -= 1
                                if Eating_Counter < 0: Eating_Counter = 0
                            self.Enemy_Turn[1] = "None"
                            Battle_Options = True
                    if self.Enemy_Turn[1] == "Run Away":self.BattleDialouge(f"{self.Opponents_Pokemon.Name} ran away")
                pygame.display.update()
                clock.tick(120)

    def Start_Battle_Animation(self):
        self.Black_Screen.x += 10
        pygame.draw.rect(SCREEN,"Black",self.Black_Screen)
        self.DialougePause = True
        if self.Black_Screen.x >= 0:
            self.BattleStart = True

    def CheckFishingReq(self,Points:list[pygame.Rect]):
        for point in Points:
            if self.Player.rect.colliderect(point):
                if self.Player.Direction.x < 0 and self.Player.rect.left + self.Player.WalkSpeed == point.right:
                    self.Player.Fishing = True
                    self.Player.Fishing_pos =self.Player.Fishing_Left
                elif self.Player.Direction.x > 0 and self.Player.rect.right - self.Player.WalkSpeed == point.left:
                    self.Player.Fishing = True
                    self.Player.Fishing_pos =self.Player.Fishing_Right
                elif self.Player.Direction.y > 0 and self.Player.rect.bottom - self.Player.WalkSpeed == point.top:
                    self.Player.Fishing = True
                    self.Player.Fishing_pos =self.Player.Fishing_Down
                elif self.Player.Direction.y < 0 and self.Player.rect.top +self.Player.WalkSpeed  == point.bottom:
                    self.Player.Fishing = True
                    self.Player.Fishing_pos =self.Player.Fishing_Up

    def ObedianceCalc(self):
        Disobey = ["Obey",""]
        Threshold = self.BattlePlayerPoke.Level + (self.Player.LoyaltyLevel - 1)
        R1 = random.randint(0,Threshold)
        R2 = random.randint(0,Threshold)
        R3 = random.randint(0,Threshold)
        if R1 >= self.Player.LoyaltyLevel:
            Disobey[0] = "Disobey"
            if R2 < self.Player.LoyaltyLevel: 
                Move = random.choice(self.BattlePlayerPoke.Moves)
                if self.BattlePlayerPoke.Moves.count("-") + 1 == len(self.BattlePlayerPoke.Moves):Disobey[1] = f"{self.BattlePlayerPoke.NickName} smells the roses"
                else:
                    while Move == self.BattlePlayerPoke.Attack or Move == "-":Move = random.choice(self.BattlePlayerPoke.Moves)
                    Disobey[1] = f"{self.BattlePlayerPoke.NickName} instead used {Move}"
                    self.BattlePlayerPoke.Attack = Move
            else:
                if R3 < self.BattlePlayerPoke.Level - self.Player.LoyaltyLevel:Disobey[1] = f"{self.BattlePlayerPoke.NickName} took a nap"
                elif R2 < 2 *(self.BattlePlayerPoke.Level - self.Player.LoyaltyLevel):Disobey[1] = f"{self.BattlePlayerPoke.NickName} hits themselves"
                else:Disobey[1] = f"{self.BattlePlayerPoke.NickName} flipped you off"
        return Disobey        

    def Reset_PokemonAfterBattle(self):
        self.ExitBattle = True
        self.WildBattle = False
        self.Player_Pause = False
        self.Fight,self.BattlePokemon,self.BattleItems,self.Run = False,False,False,False
        self.BattlePlayerPoke.Attack = ''
        self.Player.Menu = False
        try:
            for i in range(6): 
                self.AddPokeDex(self.Player.Pokemon[i].Name,True)
                self.Player.Pokemon[i].Remove_Battle_Counters()
                self.Player.Pokemon[i].End_Transformation()
                self.Player.Pokemon[i].ToxicTurn = 0
                self.Player.Pokemon[i].In_Battle = False
                self.Player.Pokemon[i].Particaption = False
                self.Player.Pokemon[i].FocusEnergy = False
                self.Player.Pokemon[i].LightScreenUp = False
                self.Player.Pokemon[i].LightScreenDamage = 0
                self.Player.Pokemon[i].ReflectUp = False
                self.Player.Pokemon[i].ReflectDamage = 0
                self.Player.Pokemon[i].SubstituteOn = False
                self.Player.Pokemon[i].RageOn = False
                self.Player.Pokemon[i].Level_up = False
                self.Player.Pokemon[i].Attack = ''
                self.Player.Pokemon[i].StatProtect = False
                self.Player.Pokemon[i].MoveTurn = ''
                self.Player.Pokemon[i].AllField = [['',0],['',0]]
                self.Player.Pokemon[i].MyField = [['',0],['',0],['',0]]
                self.Player.Pokemon[i].TrappedTurns = -10
                if self.Player.Pokemon[i].Mimic[0]:
                    self.Player.Pokemon[i].Moves[self.Player.Pokemon[i].Mimic[1]] = "Mimic"
                    if self.Player.Pokemon[i].Mimic[1] == 1:
                        self.Player.Pokemon[i].Move1Type = "Normal"
                    elif self.Player.Pokemon[i].Mimic[1] == 2:
                        self.Player.Pokemon[i].Move2Type = "Normal"
                    elif self.Player.Pokemon[i].Mimic[1] == 3:
                        self.Player.Pokemon[i].Move3Type = "Normal"
                    else:
                        self.Player.Pokemon[i].Move4Type = "Normal"
        except:pass 

    def Escape(self,attempts:int) -> bool:
        OddsEscape = 0
        attempts += 1
        if round(self.Opponents_Pokemon.GetBattleSpeed()/4)%256 == 0: return True,attempts
        OddsEscape = round((self.BattlePlayerPoke.GetBattleSpeed() * 32)/round(self.Opponents_Pokemon.GetBattleSpeed()/4)%256) + 30 * attempts
        if OddsEscape > 255: return True,attempts 
        else:
            if random.randint(0,255) < OddsEscape: return True,attempts
            else: return False,attempts

    def PlayerLost(self):
        self.Player.Money //= 2
        self.Events.Stage = "OverWorld"
        self.Events.OverworldLocation = self.Healplace[0]
        self.Player.rect.center = self.Healplace[1]
        self.Player_Pause = False
        self.Player.Full_Team_Heal()

    def CC_HomePCOptions(self):
        mouse_pos = pygame.mouse.get_pos()
        if self.ItemPcOption1_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.ItemPcOption1 = True
                    self.Clicked = False 
        if self.ItemPcOption2_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.ItemPcOption2 = True
                    self.Clicked = False
        if self.ItemPcOption3_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.ItemPcOption3 = True
                    self.Clicked = False

    def CC_PCOptions(self):
        mouse_pos = pygame.mouse.get_pos()
        if self.PCOption1_rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.PCOption1 = True
                    self.Clicked = False 
        if self.PCOption2_rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.PCOption2 = True
                    self.Clicked = False 
        if self.PCOption3_rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.Back = True
                    self.Clicked = False 

    def CC_BillPCOptions(self):
        mouse_pos = pygame.mouse.get_pos()
        if self.BillPCOption1_rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if len(self.Player.PCBoxes[0]) > 0: self.BillPCOption1 = True
                    self.Clicked = False 
        if self.BillPCOption2_rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if len(self.Player.Pokemon) > 1: self.BillPCOption2 = True
                    self.Clicked = False 
        if self.BillPCOption3_rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if len(self.Player.PCBoxes[0]) > 1: self.BillPCOption3 = True
                    self.Clicked = False 
        if self.BillPCOption4_rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.Back = True
                    self.Clicked = False 

    def Pokemon_RectMaker(self,Pokemon_List:list[Pokemon],base_y:int = 160):
        Rect = pygame.Rect(0,0,100,100)
        Empty_list = []
        y = base_y
        Poke_Index = 0
        for Index,poke in enumerate(Pokemon_List):
            Poke_Index = Index
            if Index < 5:
                y = base_y
            elif 5 <= Index < 10:
                y = base_y*2
                Index -= 5
            elif 10 <= Index < 15:
                y = base_y*3
                Index -= 10
            elif 15 <= Index < 20:
                y = base_y*4
                Index -= 15
            Rect.topleft = ((800//5)*Index,y)
            Text_Surf = self.Events.Game_font.render(poke.NickName,True,"Black")
            Text_Rect = Text_Surf.get_rect(center= Rect.center)
            if "" in poke.Type: Types_surf = self.Events.Game_font.render(f"{poke.Type[0]}",True,"Black")
            if "" not in poke.Type: Types_surf = self.Events.Game_font.render(f"{poke.Type[0]}/{poke.Type[1]}",True,"Black")
            Types_rect = Types_surf.get_rect(midbottom = Rect.midbottom)
            Empty_list.append((pygame.Rect(Rect.topleft,(100,100)),Text_Surf,Text_Rect,Types_surf,Types_rect,Poke_Index))
        return Empty_list

    def Fishing(self):
        if self.Player.Fishing and self.Player.Fishing_Rod != "":
            if self.Player.Fishing_Rod == "Super Rod":
                Name = random.choice(["Krabby","Goldeen","Magikarp","Tentacool"])
                if Name == "Tentacool":Level = 5
                else:Level = 15
            elif self.Player.Fishing_Rod == "Good Rod":
                Name = random.choice(["Poliwag","Goldeen"])
                Level = 10
            else:
                Name = "Magikarp"
                Level = 5
            self.WildPoke = Pokemon(Name,Level,["Tackle"],"Wild",Name)
            self.WildPoke.Moves = self.WildPoke.Last4Moves(Level)

    def CC_PCButtons(self):
        if self.PCNext_rect.collidepoint(pygame.mouse.get_pos()):
            if pygame.mouse.get_pressed()[0]: self.Clicked = True
            else:
                if self.Clicked:
                    self.Player.PCBoxesIndex += 1
                    if self.Player.PCBoxesIndex > 19:
                        self.Player.PCBoxesIndex = 0
                    self.Clicked = False
        
        if self.PCPrev_rect.collidepoint(pygame.mouse.get_pos()):
            if pygame.mouse.get_pressed()[0]: self.Clicked = True
            else:
                if self.Clicked:
                    self.Player.PCBoxesIndex -= 1
                    if self.Player.PCBoxesIndex < 0:
                        self.Player.PCBoxesIndex = 19
                    self.Clicked = False

    def BillPCOptions(self):
        if self.BillPCOption1 or self.BillPCOption2 or self.BillPCOption3:
            SCREEN.fill("White")
            PC_Title = self.Events.Game_Font2.render(f"Box {self.Player.PCBoxesIndex + 1}", True,"Black")
            PC_Title_rect = PC_Title.get_rect(topleft = (150,10))
            if self.BillPCOption1 or self.BillPCOption3:
               Box = self.Player.PCBoxes[self.Player.PCBoxesIndex]
               PCBox = self.Pokemon_RectMaker(Box)
               self.Show_Options1([(self.PCNext_rect,self.PCNext_Text,self.PCNext_Text_Rect),(self.PCPrev_rect,self.PCPrev_Text,self.PCPrev_Text_Rect)])
               self.CC_PCButtons()
               SCREEN.blit(PC_Title,PC_Title_rect)
               for Rect,Text_surf,Text_rect,Type_surf,Type_rect,Index in PCBox:
                    pygame.draw.rect(SCREEN,"White",Rect)
                    SCREEN.blit(Text_surf,Text_rect)
                    SCREEN.blit(Type_surf,Type_rect)
                    if Rect.collidepoint(pygame.mouse.get_pos()):
                        if pygame.mouse.get_pressed()[0]:
                            self.Clicked = True
                        else:
                            if self.Clicked:
                                if self.BillPCOption1:
                                    if len(self.Player.Pokemon) < 6:
                                        self.Player.Add_Pokemon(self.Player.PCBoxes[self.Player.PCBoxesIndex][Index])
                                        self.Player.PCBoxes[self.Player.PCBoxesIndex].pop(Index)
                                elif self.BillPCOption3: self.Player.PCBoxes[self.Player.PCBoxesIndex].pop(Index)
                                self.Clicked = False
            if self.BillPCOption2:
                Pokemon_Title = self.Events.Game_Font2.render(f"{self.PlayerName}'s Pokemon", True,"Black")
                Pokemon_Title_rect= Pokemon_Title.get_rect(topleft = (150,10))
                pokes = self.Pokemon_RectMaker(self.Player.Pokemon)
                SCREEN.blit(Pokemon_Title,Pokemon_Title_rect)
                for Rect,Text_surf,Text_rect,Type_surf,Type_rect,Index in pokes:
                    pygame.draw.rect(SCREEN,"White",Rect)
                    SCREEN.blit(Text_surf,Text_rect)
                    SCREEN.blit(Type_surf,Type_rect)
                    if Rect.collidepoint(pygame.mouse.get_pos()):
                        if pygame.mouse.get_pressed()[0]:
                            self.Clicked = True
                        else:
                            if self.Clicked:
                                if len(self.Player.Pokemon) > 1: 
                                    self.Player.Add_PCPokemon(self.Player.Pokemon[Index])
                                    self.Player.Pokemon.pop(Index)
                                self.Clicked = False
        if self.Back:
            self.BillPCOption1,self.BillPCOption2,self.BillPCOption3 = False,False,False

    def MainPCOptions(self):
        self.PCTitle = self.Events.Game_Font2.render(f"{self.PlayerName}'s PC",True,"Black")
        self.PCTitle_rect = self.PCTitle.get_rect(topleft = (0,0))
        if self.PCOption1 or self.PCOption2:
            if self.PCOption1:
                self.Show_Options1([(self.BillPCOption1_rect,self.BillPCOption1_Text,self.BillPCOption1_Text_rect),(self.BillPCOption2_rect,self.BillPCOption2_Text,self.BillPCOption2_Text_rect),(self.BillPCOption3_rect,self.BillPCOption3_Text,self.BillPCOption3_Text_rect),(self.BillPCOption4_rect,self.BillPCOption4_Text,self.BillPCOption4_Text_rect)])
                if not(self.BillPCOption1 or self.BillPCOption2 or self.BillPCOption3): self.CC_BillPCOptions()
                self.BillPCOptions()
            if self.PCOption2: 
                self.Show_Options1([(self.ItemPcOption1_Rect,self.ItemPcOption1_Text,self.ItemPcOption1_Text_Rect),(self.ItemPcOption2_Rect,self.ItemPcOption2_Text,self.ItemPcOption2_Text_Rect),(self.ItemPcOption3_Rect,self.ItemPcOption3_Text,self.ItemPcOption3_Text_Rect),(self.Back_Rect,self.Back_Text,self.Back_Text_Rect)])
                if not(self.ItemPcOption1 or self.ItemPcOption2 or self.ItemPcOption3): self.CC_HomePCOptions()
                self.Items_in_HomePC()

    def CC_Back(self):
        mouse_pos = pygame.mouse.get_pos()
        if self.Back_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.Back = True
                    self.Clicked = False

    def PC(self):
        self.PCOption1_rect,self.PCOption1_Text,self.PCOption1_Text_Rect = self.Make_Option_Button(pygame.Rect(0,0,self.PCOptions.width,100),f"{self.PCMakerName}'s PC")
        self.PCOption2_rect,self.PCOption2_Text,self.PCOption2_Text_Rect = self.Make_Option_Button(pygame.Rect(0,164,self.PCOptions.width,100),f"{self.PlayerName}'s PC")
        if self.Pc:
            if self.Events.SSTicketGot:self.PCMakerName = "Bill"
            self.Player.Moveable = False
            self.Player_Pause = True
            pygame.draw.rect(SCREEN,"White",self.PCOptions)
            if self.Back:
                if self.ItemPcOption1 or self.ItemPcOption2 or self.ItemPcOption3:
                    self.ItemPcOption1,self.ItemPcOption2,self.ItemPcOption3 = False,False,False
                elif self.PCOption1 or self.PCOption2 or self.BillPCOption1 or self.BillPCOption2 or self.BillPCOption3:
                    self.PCOption1,self.PCOption2 = False,False
                    self.BillPCOption1,self.BillPCOption2,self.BillPCOption3 = False,False,False
                elif self.HomePC or self.Pc:
                    self.HomePC = False
                    self.Pc = False
                    self.Player_Pause = False
                    self.Player.Moveable = True
                    self.Yes = False
                    self.ExitPC = True
                self.Back = False
            if self.HomePC:
                self.Show_Options1([(self.ItemPcOption1_Rect,self.ItemPcOption1_Text,self.ItemPcOption1_Text_Rect),(self.ItemPcOption2_Rect,self.ItemPcOption2_Text,self.ItemPcOption2_Text_Rect),(self.ItemPcOption3_Rect,self.ItemPcOption3_Text,self.ItemPcOption3_Text_Rect)])
                if not(self.ItemPcOption1 or self.ItemPcOption2 or self.ItemPcOption3): 
                    self.CC_HomePCOptions()
                self.Items_in_HomePC()
            else:
                self.Show_Options1([(self.PCOption1_rect,self.PCOption1_Text,self.PCOption1_Text_Rect),(self.PCOption2_rect,self.PCOption2_Text,self.PCOption2_Text_Rect),(self.PCOption3_rect,self.PCOption3_Text,self.PCOption3_Text_Rect)])
                if not(self.PCOption1 or self.PCOption2): 
                    self.CC_Back()
                    self.CC_PCOptions()
                self.MainPCOptions()

    def PokemonMovepp(self):
        Addpoints = 0
        SCREEN.fill("cornsilk1")
        mouse_pos = pygame.mouse.get_pos()
        Name = self.Events.Game_Font2.render(self.PPItemPokemon.NickName,True,"Black")
        Name_rect = Name.get_rect(topleft = (SCREEN.get_width()//2,20))
        SCREEN.blit(Name,Name_rect)
        Pokemon_image_rect = self.PPItemPokemon.Front_Img.get_rect(topleft = (0,10))
        SCREEN.blit(self.PPItemPokemon.Front_Img,Pokemon_image_rect)
        self.Move1_Rect,self.Move1_Text,self.Move1_Text_Rect = self.Make_Option_Button(pygame.Rect(0,300,800,50),self.PPItemPokemon.Moves[0])
        self.Move2_Rect,self.Move2_Text,self.Move2_Text_Rect = self.Make_Option_Button(pygame.Rect(0,400,800,50),self.PPItemPokemon.Moves[1])
        self.Move3_Rect,self.Move3_Text,self.Move3_Text_Rect = self.Make_Option_Button(pygame.Rect(0,500,800,50),self.PPItemPokemon.Moves[2])
        self.Move4_Rect,self.Move4_Text,self.Move4_Text_Rect = self.Make_Option_Button(pygame.Rect(0,600,800,50),self.PPItemPokemon.Moves[3])
        self.Show_Options1([(self.Move1_Rect,self.Move1_Text,self.Move1_Text_Rect),(self.Move2_Rect,self.Move2_Text,self.Move2_Text_Rect),(self.Move3_Rect,self.Move3_Text,self.Move3_Text_Rect),(self.Move4_Rect,self.Move4_Text,self.Move4_Text_Rect)])
        self.Move1PP_Rect,self.Move1PP_Text,self.Move1PP_Text_Rect = self.Make_Option_Button(pygame.Rect(600,300,200,50),f"{self.PPItemPokemon.Move1pp}/{self.PPItemPokemon.MaxMove1pp}")
        self.Move2PP_Rect,self.Move2PP_Text,self.Move2PP_Text_Rect = self.Make_Option_Button(pygame.Rect(600,400,200,50),f"{self.PPItemPokemon.Move2pp}/{self.PPItemPokemon.MaxMove2pp}")
        self.Move3PP_Rect,self.Move3PP_Text,self.Move3PP_Text_Rect = self.Make_Option_Button(pygame.Rect(600,500,200,50),f"{self.PPItemPokemon.Move3pp}/{self.PPItemPokemon.MaxMove3pp}")
        self.Move4PP_Rect,self.Move4PP_Text,self.Move4PP_Text_Rect = self.Make_Option_Button(pygame.Rect(600,600,200,50),f"{self.PPItemPokemon.Move4pp}/{self.PPItemPokemon.MaxMove4pp}")
        self.Show_Options1([(self.Move1PP_Rect,self.Move1PP_Text,self.Move1PP_Text_Rect),(self.Move2PP_Rect,self.Move2PP_Text,self.Move2PP_Text_Rect),(self.Move3PP_Rect,self.Move3PP_Text,self.Move3PP_Text_Rect),(self.Move4PP_Rect,self.Move4PP_Text,self.Move4PP_Text_Rect)])
        if self.PPItems[0] == 'Ether':
            self.AddPPMoveText = self.Events.Game_font.render("Pick one move to add 10 PP",True,"Black")
            Addpoints = 10
        if self.PPItems[0] == "Max Ether":
            self.AddPPMoveText = self.Events.Game_font.render("Pick one move to fully restore",True,"Black")
            Addpoints = 100
        if self.PPItems[0] == "PP Up":self.AddPPMoveText = self.Events.Game_font.render("Increase the PP of 1 move",True,"Black")
        self.AddPPMoveText_rect = self.AddPPMoveText.get_rect(center = (SCREEN.get_width()//2,100))
        SCREEN.blit(self.AddPPMoveText,self.AddPPMoveText_rect)
        if self.Move1_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if self.PPItems[0] == "PP Up":
                        if self.PPItemPokemon.MaxMove1pp < Pokemon_Max_Move_PP[self.PPItemPokemon.Moves[0]]:
                            self.PPItemPokemon.IncreaseMovePP("1")
                            self.PPItems[1] = False
                            self.PPItems[2] = False
                            self.Player.Remove_Bag(self.PPItems[0],1)
                    else:
                        if self.PPItemPokemon.Move1pp < self.PPItemPokemon.MaxMove1pp:
                            self.PPItemPokemon.AddPPMove("1",Addpoints)
                            self.PPItems[1] = False
                            self.PPItems[2] = False
                            self.Player.Remove_Bag(self.PPItems[0],1)
                    self.Clicked = False
        if self.Move2_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if self.PPItemPokemon.Moves[1] != "-":
                        if self.PPItems[0] == "PP Up":
                            if self.PPItemPokemon.MaxMove2pp < Pokemon_Max_Move_PP[self.PPItemPokemon.Moves[1]]:
                                self.PPItemPokemon.IncreaseMovePP("2")
                                self.PPItems[1] = False
                                self.PPItems[2] = False
                                self.Player.Remove_Bag(self.PPItems[0],1)
                        else:
                            if self.PPItemPokemon.Move2pp < self.PPItemPokemon.MaxMove2pp:
                                self.PPItemPokemon.AddPPMove("2",Addpoints)
                                self.PPItems[1] = False
                                self.PPItems[2] = False
                                self.Player.Remove_Bag(self.PPItems[0],1)
                    self.Clicked = False
        if self.Move3_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if self.PPItemPokemon.Moves[2] != "-":
                        if self.PPItems[0] == "PP Up":
                            if self.PPItemPokemon.MaxMove3pp < Pokemon_Max_Move_PP[self.PPItemPokemon.Moves[2]]:
                                self.PPItemPokemon.IncreaseMovePP("3")
                                self.PPItems[1] = False
                                self.PPItems[2] = False
                                self.Player.Remove_Bag(self.PPItems[0],1)
                        else:
                            if self.PPItemPokemon.Move3pp < self.PPItemPokemon.MaxMove3pp:
                                self.PPItemPokemon.AddPPMove("3",Addpoints)
                                self.PPItems[1] = False
                                self.PPItems[2] = False
                                self.Player.Remove_Bag(self.PPItems[0],1)
                    self.Clicked = False
        if self.Move4_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if self.PPItemPokemon.Moves[3] != "-":
                        if self.PPItems[0] == "PP Up":
                            if self.PPItemPokemon.MaxMove4pp < Pokemon_Max_Move_PP[self.PPItemPokemon.Moves[3]]:
                                self.PPItemPokemon.IncreaseMovePP("4")
                                self.PPItems[1] = False
                                self.PPItems[2] = False
                                self.Player.Remove_Bag(self.PPItems[0],1)
                        else:
                            if self.PPItemPokemon.Move4pp < self.PPItemPokemon.MaxMove4pp:
                                self.PPItemPokemon.AddPPMove("4",Addpoints)
                                self.PPItems[1] = False
                                self.PPItems[2] = False
                                self.Player.Remove_Bag(self.PPItems[0],1)
                    self.Clicked = False
        
    def PosionedPokemon(self): 
        if self.Events.PlayerDeathMessage:self.Events.Dialouge("You blacked out")
        if self.Player.IsWalking():
            self.FaintedOverworld()
            for i in range(len(self.Player.Pokemon)):
                if self.Player.Pokemon[i].Status == "PSN" and self.Player.Pokemon[i].HP > 0:
                    self.Player.Pokemon[i].HP -= 1
    
    def FaintedOverworld(self):
        if len(self.Player.Pokemon) > 0:
            if self.Player.GetRemainingPokemon() == 0:
                self.PlayerLost()
                self.Events.PlayerDeathMessage = True

    def ItemTakerSettings(self):
        x1Button = pygame.Rect(200,50,50,50)
        x1Button_Text = self.Events.Game_font.render("x1",True,"Black")
        x1Button_Text_rect = x1Button_Text.get_rect(center = x1Button.center)
        x5Button = pygame.Rect(300,50,50,50)
        x5Button_Text = self.Events.Game_font.render("x5",True,"Black")
        x5Button_Text_rect = x5Button_Text.get_rect(center = x5Button.center)
        x10Button = pygame.Rect(400,50,50,50)
        x10Button_Text = self.Events.Game_font.render("x10",True,"Black")
        x10Button_Text_rect = x10Button_Text.get_rect(center = x10Button.center)

        if self.ItemTaker == 10:
            self.x5ButtonColor = "cornsilk1"
            self.x1ButtonColor = "cornsilk1"
            self.x10ButtonColor = "Red"
        
        elif self.ItemTaker == 5:
            self.x10ButtonColor = "cornsilk1"
            self.x1ButtonColor = "cornsilk1"
            self.x5ButtonColor = "Red"
        
        elif self.ItemTaker == 1:
            self.x5ButtonColor = "cornsilk1"
            self.x10ButtonColor = "cornsilk1"
            self.x1ButtonColor = "Red"



        pygame.draw.rect(SCREEN,self.x1ButtonColor,x1Button)
        SCREEN.blit(x1Button_Text,x1Button_Text_rect)
        if x1Button.collidepoint(pygame.mouse.get_pos()):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.ItemTaker = 1
                    self.Clicked = False

        pygame.draw.rect(SCREEN,self.x5ButtonColor,x5Button)
        SCREEN.blit(x5Button_Text,x5Button_Text_rect)
        if x5Button.collidepoint(pygame.mouse.get_pos()):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.ItemTaker = 5
                    self.Clicked = False

        pygame.draw.rect(SCREEN,self.x10ButtonColor,x10Button)
        SCREEN.blit(x10Button_Text,x10Button_Text_rect)
        if x10Button.collidepoint(pygame.mouse.get_pos()):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.ItemTaker = 10
                    self.Clicked = False

    def Items_in_HomePC(self):
        self.PCItemsUpdate()
        self.BagTitle =  self.Events.Game_Font2.render(f"{self.PlayerName}'s Bag",True,"Black")
        self.BagTitle_rect = self.BagTitle.get_rect(topleft = (0,0))
        mouse_pos = pygame.mouse.get_pos()
        self.PCTitle = self.Events.Game_Font2.render(f"{self.PlayerName}'s PC: Slot:{self.Player.PCItemsIndex + 1}",True,"Black")
        self.PCTitle_rect = self.PCTitle.get_rect(topleft = (0,0))
        Next_Rect,Next_Text,Next_Text_Rect = self.Make_Option_Button(pygame.Rect(464,53,100,50),"Next")
        Prev_Rect,Prev_Text,Prev_Text_Rect = self.Make_Option_Button(pygame.Rect(464,103,100,50),"Prev")
        if self.ItemPcOption1 or self.ItemPcOption2 or self.ItemPcOption3:
            SCREEN.fill("cornsilk1")
            self.ItemTakerSettings()
            if self.ItemPcOption1 or self.ItemPcOption3:
                self.Show_Options1([(Next_Rect,Next_Text,Next_Text_Rect),(Prev_Rect,Prev_Text,Prev_Text_Rect)])
                if Prev_Rect.collidepoint(mouse_pos):
                    if pygame.mouse.get_pressed()[0]:
                        self.Clicked = True
                    else:
                        if self.Clicked:
                            if len(self.Player.PC_Items) > 1:
                                self.Player.PCItemsIndex -= 1
                                if self.Player.PCItemsIndex < 0:self.Player.PCItemsIndex = len(self.Player.PC_Items) - 1
                            self.Clicked = False
                if Next_Rect.collidepoint(mouse_pos):
                    if pygame.mouse.get_pressed()[0]:
                        self.Clicked = True
                    else:
                        if self.Clicked:
                            self.Player.PCItemsIndex += 1
                            if self.Player.PCItemsIndex == len(self.Player.PC_Items):self.Player.PCItemsIndex = 0
                            self.Clicked = False
                SCREEN.blit(self.PCTitle,self.PCTitle_rect)
                for Rect,Text_Surf,Text_Rect,Amount_surf,Amount_rect,Text in self.PC_Items:
                    pygame.draw.rect(SCREEN,"cornsilk1",Rect)
                    SCREEN.blit(Text_Surf,Text_Rect)
                    SCREEN.blit(Amount_surf,Amount_rect)
                    if Rect.collidepoint(mouse_pos):
                        if pygame.mouse.get_pressed()[0]:
                            self.Clicked = True
                        else:
                            if self.Clicked:
                                if self.ItemPcOption1:
                                    self.Player.Remove_PC_Item(Text,self.ItemTaker,True)
                                else:
                                    self.Player.Remove_PC_Item(Text,self.ItemTaker,False)
                                self.Clicked = False
            elif self.ItemPcOption2:
                SCREEN.blit(self.BagTitle,self.BagTitle_rect)
                for Rect,Text_Surf,Text_Rect,Amount_surf,Amount_rect,Text in self.Bag:
                    pygame.draw.rect(SCREEN,"cornsilk1",Rect)
                    SCREEN.blit(Text_Surf,Text_Rect)
                    SCREEN.blit(Amount_surf,Amount_rect)
                    if Rect.collidepoint(mouse_pos):
                        if pygame.mouse.get_pressed()[0]:
                            self.Clicked = True
                        else:
                            if self.Clicked:
                                self.Player.Remove_Bag(Text,self.ItemTaker,True)
                                self.Clicked = False
        else:
            self.Back_Rect,self.Back_Text,self.Back_Text_Rect = self.Make_Option_Button(pygame.Rect(0,369,self.PCOptions.width,100),"Back")

    def Menu(self):
        if self.Player.Menu:
            self.Player.Moveable = False
            self.Player_Pause = True
            pygame.draw.rect(SCREEN,"White",self.MenuBar)
            if self.MenuOption5:
                self.Player.Menu = False
                self.MenuOption5 = False
                self.Player.Moveable = True
                self.Player_Pause = False
            self.Show_Options1([(self.MenuOption1_Rect,self.MenuOption1_Text,self.MenuOption1_Text_Rect),(self.MenuOption2_Rect,self.MenuOption2_Text,self.MenuOption2_Text_Rect),(self.MenuOption3_Rect,self.MenuOption3_Text,self.MenuOption3_Text_Rect),(self.MenuOption4_Rect,self.MenuOption4_Text,self.MenuOption4_Text_Rect),(self.MenuOption5_Rect,self.MenuOption5_Text,self.MenuOption5_Text_Rect)])
            if True not in (self.MenuOption1,self.MenuOption2 ,self.MenuOption3,self.MenuOption4):
                self.CC_MenuOptions()
            self.MenuOptions()

    def CC_MenuOptions(self):
        mouse_pos = pygame.mouse.get_pos()
        if self.MenuOption1_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if len(self.Player.Pokemon) >= 1: 
                        self.MenuOption1 = True
                    self.Clicked = False
        if self.MenuOption2_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.MenuOption2 = True
                    self.Clicked = False
        
        if self.MenuOption3_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.MenuOption3 = True
                    self.Clicked = False
        
        if self.MenuOption4_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.MenuOption4 = True
                    self.Clicked = False
        
        if self.MenuOption5_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.MenuOption5 = True
                    self.Clicked = False

    def Pokemon_Menu(self):
        mouse_pos = pygame.mouse.get_pos()
        self.Info_Rect,self.Stats_Text,self.Stats_Text_Rect = self.Make_Option_Button(pygame.Rect(650,680,150,30),"STATS")
        self.Switch_Rect,self.Switch_Text,self.Switch_Text_Rect = self.Make_Option_Button(pygame.Rect(650,720,150,30),"SWITCH")
        self.Cancel_Rect,self.Cancel_Text,self.Cancel_Text_Rect = self.Make_Option_Button(pygame.Rect(650,760,150,30),"CANCEL")
        self.Stats_Display_Rect = pygame.Rect(0,351,SCREEN.get_width()//2,449)
        self.Stat1 = self.Events.Game_Font2.render("ATTACK",True,"Black")
        self.Stat1_rect = self.Stat1.get_rect(topleft = (self.Stats_Display_Rect.topleft[0] + 5,361))
        self.Stat2 = self.Events.Game_Font2.render("DEFENSE",True,"Black")
        self.Stat2_rect = self.Stat2.get_rect(topleft = (self.Stats_Display_Rect.topleft[0] + 5,458))
        self.Stat3 = self.Events.Game_Font2.render("SPEED",True,"Black")
        self.Stat3_rect = self.Stat3.get_rect(topleft = (self.Stats_Display_Rect.topleft[0] + 5,555))
        self.Stat4 = self.Events.Game_Font2.render("SPECIAL",True,"Black")
        self.Stat4_rect = self.Stat4.get_rect(topleft = (self.Stats_Display_Rect.topleft[0] + 5,652))
        self.Moves_Rect,self.Moves_Text,self.Moves_Text_Rect = self.Make_Option_Button(pygame.Rect(402,265,60,50),"Moves")
        self.Stats_Rect,self.Stats_Text,self.Stats_Text_Rect = self.Make_Option_Button(pygame.Rect(402,265,60,50),"Stats")
        self.PokeMenu_Rect,self.PokeMenu_Text,self.PokeMenu_Text_Rect = self.Make_Option_Button(pygame.Rect(602,265,60,50),"Back")
        self.Pokemon_Menu_Text_surf= self.Events.Game_Font2.render(self.Pokemon_Menu_Text,True,"Black")
        self.Pokemon_Menu_Text_rect = self.Pokemon_Menu_Text_surf.get_rect(topleft = self.Pokemon_Menu_Instrution_rect.topleft)
        SCREEN.fill("cornsilk1")
        self.Pokemon2_Text = self.Events.Game_Font2.render("",True,"Black")
        self.Pokemon2_Text_Rect = self.Pokemon2_Text.get_rect(topleft = self.Pokemon2_Rect.topleft)
        self.Pokemon3_Text = self.Events.Game_Font2.render("",True,"Black")
        self.Pokemon3_Text_Rect = self.Pokemon3_Text.get_rect(topleft = self.Pokemon3_Rect.topleft)
        self.Pokemon4_Text = self.Events.Game_Font2.render("",True,"Black")
        self.Pokemon4_Text_Rect = self.Pokemon4_Text.get_rect(topleft = self.Pokemon4_Rect.topleft)
        self.Pokemon5_Text = self.Events.Game_Font2.render("",True,"Black")
        self.Pokemon5_Text_Rect = self.Pokemon5_Text.get_rect(topleft = self.Pokemon5_Rect.topleft)
        self.Pokemon6_Text = self.Events.Game_Font2.render("",True,"Black")
        self.Pokemon6_Text_Rect = self.Pokemon6_Text.get_rect(topleft = self.Pokemon6_Rect.topleft)
        try:
            self.Pokemon1_Text = self.Events.Game_Font2.render(self.Player.Pokemon[0].NickName,True,"Black")
            self.Pokemon1_Text_Rect = self.Pokemon1_Text.get_rect(topleft = self.Pokemon1_Rect.topleft)
            Poke1level_Surf = self.Events.Game_Font3.render(f"LV{self.Player.Pokemon[0].Level}",True,"Black")
            Poke1level_rect = Poke1level_Surf.get_rect(topright = (self.Pokemon1_Rect.topright[0] - 30,self.Pokemon1_Rect.topright[1]))
            Poke1Health_surf = self.Events.Game_Font3.render(f"{self.Player.Pokemon[0].HP}/{self.Player.Pokemon[0].MAXHP}",True,"Black")
            Poke1Health_rect = Poke1Health_surf.get_rect(topright = (self.Pokemon1_Rect.topright[0] - 30,self.Pokemon1_Rect.topright[1]+30))                                        
            self.Pokemon2_Text = self.Events.Game_Font2.render(self.Player.Pokemon[1].NickName,True,"Black")
            self.Pokemon2_Text_Rect = self.Pokemon2_Text.get_rect(topleft = self.Pokemon2_Rect.topleft)
            Poke2level_Surf = self.Events.Game_Font3.render(f"L{self.Player.Pokemon[1].Level}",True,"Black")
            Poke2level_rect = Poke2level_Surf.get_rect(center = (self.Pokemon2_Rect.topright[0] - 30,self.Pokemon2_Rect.topright[1]))
            Poke2Health_surf = self.Events.Game_Font3.render(f"{self.Player.Pokemon[1].HP}/{self.Player.Pokemon[1].MAXHP}",True,"Black")
            Poke2Health_rect = Poke2Health_surf.get_rect(center = (self.Pokemon2_Rect.topright[0] - 30,self.Pokemon2_Rect.topright[1]+30))
            self.Pokemon3_Text = self.Events.Game_Font2.render(self.Player.Pokemon[2].NickName,True,"Black")
            self.Pokemon3_Text_Rect = self.Pokemon3_Text.get_rect(topleft = self.Pokemon3_Rect.topleft)
            Poke3level_Surf = self.Events.Game_Font3.render(f"L{self.Player.Pokemon[2].Level}",True,"Black")
            Poke3level_rect = Poke3level_Surf.get_rect(center = (self.Pokemon3_Rect.topright[0] - 30,self.Pokemon3_Rect.topright[1]))
            Poke3Health_surf = self.Events.Game_Font3.render(f"{self.Player.Pokemon[2].HP}/{self.Player.Pokemon[2].MAXHP}",True,"Black")
            Poke3Health_rect = Poke3Health_surf.get_rect(center = (self.Pokemon3_Rect.topright[0] - 30,self.Pokemon3_Rect.topright[1]+30))
            self.Pokemon4_Text = self.Events.Game_Font2.render(self.Player.Pokemon[3].NickName,True,"Black")
            self.Pokemon4_Text_Rect = self.Pokemon4_Text.get_rect(topleft = self.Pokemon4_Rect.topleft)
            Poke4level_Surf = self.Events.Game_Font3.render(f"L{self.Player.Pokemon[3].Level}",True,"Black")
            Poke4level_rect = Poke4level_Surf.get_rect(center = (self.Pokemon4_Rect.topright[0] - 30,self.Pokemon4_Rect.topright[1]))
            Poke4Health_surf = self.Events.Game_Font3.render(f"{self.Player.Pokemon[3].HP}/{self.Player.Pokemon[3].MAXHP}",True,"Black")
            Poke4Health_rect = Poke4Health_surf.get_rect(center = (self.Pokemon4_Rect.topright[0] - 30,self.Pokemon4_Rect.topright[1]+30))
            self.Pokemon5_Text = self.Events.Game_Font2.render(self.Player.Pokemon[4].NickName,True,"Black")
            self.Pokemon5_Text_Rect = self.Pokemon5_Text.get_rect(topleft = self.Pokemon5_Rect.topleft)
            Poke5level_Surf = self.Events.Game_Font3.render(f"L{self.Player.Pokemon[4].Level}",True,"Black")
            Poke5level_rect = Poke5level_Surf.get_rect(center = (self.Pokemon5_Rect.topright[0] - 30,self.Pokemon5_Rect.topright[1]))
            Poke5Health_surf = self.Events.Game_Font3.render(f"{self.Player.Pokemon[4].HP}/{self.Player.Pokemon[4].MAXHP}",True,"Black")
            Poke5Health_rect = Poke5Health_surf.get_rect(center = (self.Pokemon5_Rect.topright[0] - 30,self.Pokemon5_Rect.topright[1]+30))
            self.Pokemon6_Text = self.Events.Game_Font2.render(self.Player.Pokemon[5].NickName,True,"Black")
            self.Pokemon6_Text_Rect = self.Pokemon6_Text.get_rect(topleft = self.Pokemon6_Rect.topleft)
            Poke6level_Surf = self.Events.Game_Font3.render(f"L{self.Player.Pokemon[5].Level}",True,"Black")
            Poke6level_rect = Poke6level_Surf.get_rect(center = (self.Pokemon6_Rect.topright[0] - 30,self.Pokemon6_Rect.topright[1]))
            Poke6Health_surf = self.Events.Game_Font3.render(f"{self.Player.Pokemon[5].HP}/{self.Player.Pokemon[5].MAXHP}",True,"Black")
            Poke6Health_rect = Poke6Health_surf.get_rect(center = (self.Pokemon6_Rect.topright[0] - 30,self.Pokemon6_Rect.topright[1]+30))
        except:pass
        self.Show_Options2([(self.Pokemon1_Rect,self.Pokemon1_Text,self.Pokemon1_Text_Rect),(self.Pokemon2_Rect,self.Pokemon2_Text,self.Pokemon2_Text_Rect),(self.Pokemon3_Rect,self.Pokemon3_Text,self.Pokemon3_Text_Rect),(self.Pokemon4_Rect,self.Pokemon4_Text,self.Pokemon4_Text_Rect),(self.Pokemon5_Rect,self.Pokemon5_Text,self.Pokemon5_Text_Rect),(self.Pokemon6_Rect,self.Pokemon6_Text,self.Pokemon6_Text_Rect)],"cornsilk1")
        try:
            SCREEN.blit(Poke1Health_surf,Poke1Health_rect)
            SCREEN.blit(Poke1level_Surf,Poke1level_rect)
            self.Player.Pokemon[0].Draw_Healthar(self.Pokemon1_Rect.centerx - 24,self.Pokemon1_Rect.centery)
            SCREEN.blit(Poke2Health_surf,Poke2Health_rect)
            SCREEN.blit(Poke2level_Surf,Poke2level_rect)
            self.Player.Pokemon[1].Draw_Healthar(self.Pokemon2_Rect.centerx - 24,self.Pokemon2_Rect.centery)
            SCREEN.blit(Poke3Health_surf,Poke3Health_rect)
            SCREEN.blit(Poke3level_Surf,Poke3level_rect)
            self.Player.Pokemon[2].Draw_Healthar(self.Pokemon3_Rect.centerx - 24,self.Pokemon3_Rect.centery)
            SCREEN.blit(Poke4Health_surf,Poke4Health_rect)
            SCREEN.blit(Poke4level_Surf,Poke4level_rect)
            self.Player.Pokemon[3].Draw_Healthar(self.Pokemon4_Rect.centerx - 24,self.Pokemon4_Rect.centery)
            SCREEN.blit(Poke5Health_surf,Poke5Health_rect)
            SCREEN.blit(Poke5level_Surf,Poke5level_rect)
            self.Player.Pokemon[4].Draw_Healthar(self.Pokemon5_Rect.centerx - 24,self.Pokemon5_Rect.centery)
            SCREEN.blit(Poke6Health_surf,Poke6Health_rect)
            SCREEN.blit(Poke6level_Surf,Poke6level_rect)
            self.Player.Pokemon[5].Draw_Healthar(self.Pokemon6_Rect.centerx - 24,self.Pokemon6_Rect.centery)
        except:pass
        pygame.draw.rect(SCREEN,"cornsilk1",self.Pokemon_Menu_Instrution_rect)
        SCREEN.blit(self.Pokemon_Menu_Text_surf,self.Pokemon_Menu_Text_rect)
        if self.Pokemon1_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if not True in (self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6):
                        if len(self.Player.Pokemon) > 0 and not self.Healing_Item[1] and not self.Switch and not self.Stat_Item[1] and not self.PPItems[1]:
                            if True not in (self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6): 
                                self.Pokemon1 = True
                                self.SwitchedPokemon[0] = 0
                                self.Pokemon = self.Player.Pokemon[0]
                        elif self.Healing_Item[1] and not self.Switch:
                            if self.Healing_Item[0] == "Potion" and Two_D_ListCheck(self.Player.Bag,"Potion"):
                                if self.Player.Pokemon[0].HP < self.Player.Pokemon[0].MAXHP: 
                                    self.Player.Pokemon[0].Heal(20)
                                    if self.BattlePlayerPoke == self.Player.Pokemon[0]:self.BattlePlayerPoke.HP = self.Player.Pokemon[0].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                            elif self.Healing_Item[0] == "Super Potion" and Two_D_ListCheck(self.Player.Bag,"Super Potion"):
                                if self.Player.Pokemon[0].HP < self.Player.Pokemon[0].MAXHP: 
                                    self.Player.Pokemon[0].Heal(50)
                                    if self.BattlePlayerPoke == self.Player.Pokemon[0]:self.BattlePlayerPoke.HP = self.Player.Pokemon[0].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                            elif self.Healing_Item[0] == "Fresh Water" and Two_D_ListCheck(self.Player.Bag,"Fresh Water"):
                                if self.Player.Pokemon[0].HP < self.Player.Pokemon[0].MAXHP: 
                                    self.Player.Pokemon[0].Heal(50)
                                    if self.BattlePlayerPoke == self.Player.Pokemon[0]:self.BattlePlayerPoke.HP = self.Player.Pokemon[0].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                            elif self.Healing_Item[0] == "Soda Pop" and Two_D_ListCheck(self.Player.Bag,"Soda Pop"):
                                if self.Player.Pokemon[0].HP < self.Player.Pokemon[0].MAXHP: 
                                    self.Player.Pokemon[0].Heal(60)
                                    if self.BattlePlayerPoke == self.Player.Pokemon[0]:self.BattlePlayerPoke.HP = self.Player.Pokemon[0].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                            elif self.Healing_Item[0] == "Lemonade" and Two_D_ListCheck(self.Player.Bag,"Lemonade"):
                                if self.Player.Pokemon[0].HP < self.Player.Pokemon[0].MAXHP: 
                                    self.Player.Pokemon[0].Heal(80)
                                    if self.BattlePlayerPoke == self.Player.Pokemon[0]:self.BattlePlayerPoke.HP = self.Player.Pokemon[0].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                            elif self.Healing_Item[0] == "Hyper Potion" and Two_D_ListCheck(self.Player.Bag,"Hyper Potion"):
                                if self.Player.Pokemon[0].HP < self.Player.Pokemon[0].MAXHP: 
                                    self.Player.Pokemon[0].Heal(200)
                                    if self.BattlePlayerPoke == self.Player.Pokemon[0]:self.BattlePlayerPoke.HP = self.Player.Pokemon[0].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                            elif self.Healing_Item[0] == "Max Potion" and Two_D_ListCheck(self.Player.Bag,"Max Potion"):
                                    self.Player.Pokemon[0].HP = self.Player.Pokemon[0].MAXHP
                                    if self.BattlePlayerPoke == self.Player.Pokemon[0]:self.BattlePlayerPoke.HP = self.Player.Pokemon[0].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                            elif self.Healing_Item[0] == "Antidote" and Two_D_ListCheck(self.Player.Bag,"Antidote"):
                                if self.Player.Pokemon[0].Status == "PSN": 
                                    self.Player.Pokemon[0].Status = "OK"
                                    if self.BattlePlayerPoke == self.Player.Pokemon[0]:self.BattlePlayerPoke.Status = self.Player.Pokemon[0].Status
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                            elif self.Healing_Item[0] == "Awakening" and Two_D_ListCheck(self.Player.Bag,"Awakening"):
                                if self.Player.Pokemon[0].Status == "SLP": 
                                    self.Player.Pokemon[0].Status = "OK"
                                    if self.BattlePlayerPoke == self.Player.Pokemon[0]:self.BattlePlayerPoke.Status = self.Player.Pokemon[0].Status
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                            elif self.Healing_Item[0] == "Parlyz Heal" and Two_D_ListCheck(self.Player.Bag,"Parlyz Heal"):
                                if self.Player.Pokemon[0].Status == "PAR": 
                                    self.Player.Pokemon[0].Status = "OK"
                                    if self.BattlePlayerPoke == self.Player.Pokemon[0]:self.BattlePlayerPoke.Status = self.Player.Pokemon[0].Status
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                            elif self.Healing_Item[0] == "Burn Heal" and Two_D_ListCheck(self.Player.Bag,"Burn Heal"):
                                if self.Player.Pokemon[0].Status == "BRN": 
                                    self.Player.Pokemon[0].Status = "OK"
                                    if self.BattlePlayerPoke == self.Player.Pokemon[0]:self.BattlePlayerPoke.Status = self.Player.Pokemon[0].Status
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                            elif self.Healing_Item[0] == "Ice Heal" and Two_D_ListCheck(self.Player.Bag,"Ice Heal"):
                                if self.Player.Pokemon[0].Status == "FRZ": 
                                    self.Player.Pokemon[0].Status = "OK"
                                    if self.BattlePlayerPoke == self.Player.Pokemon[0]:self.BattlePlayerPoke.Status = self.Player.Pokemon[0].Status
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                            elif self.Healing_Item[0] == "Revive" and Two_D_ListCheck(self.Player.Bag,"Revive"):
                                if self.Player.Pokemon[0].HP <= 0: 
                                    self.Player.Pokemon[0].HP = self.Player.Pokemon[0].MAXHP//2
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                            elif self.Healing_Item[0] == "Max Revive" and Two_D_ListCheck(self.Player.Bag,"Max Revive"):
                                if self.Player.Pokemon[0].HP <= 0: 
                                    self.Player.Pokemon[0].HP = self.Player.Pokemon[0].MAXHP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                            elif self.Healing_Item[0] == "Elixir" and Two_D_ListCheck(self.Player.Bag,"Elixir"):
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    for i in range(1,5,1):self.Player.Pokemon[0].AddPPMove(str(i),10)
                                    self.Healing_Item[1] = False
                            elif self.Healing_Item[0] == "Max Elixir" and Two_D_ListCheck(self.Player.Bag,"Max Elixir"):
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    for i in range(1,5,1):self.Player.Pokemon[0].AddPPMove(str(i),100)
                                    self.Healing_Item[1] = False
                            elif self.Healing_Item[0] == "Full Restore" and Two_D_ListCheck(self.Player.Bag,"Full Restore"):
                                self.Player.Pokemon[0].Heal(999999,True,True)
                                if self.BattlePlayerPoke == self.Player.Pokemon[0]:self.BattlePlayerPoke.HP = self.Player.Pokemon[0].HP
                                self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                if self.BattleStart:
                                    self.MissedTurn()
                                self.Healing_Item[1] = False
                                self.BattleItems = False
                            elif self.Healing_Item[0] == "Full Heal" and Two_D_ListCheck(self.Player.Bag,"Full Heal"):
                                if self.Player.Pokemon[0].Status != "OK":
                                    self.Player.Pokemon[0].Status = "OK"
                                    if self.BattlePlayerPoke == self.Player.Pokemon[0]:self.BattlePlayerPoke.Status = self.Player.Pokemon[0].Status
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                        elif self.Stat_Item[1] and not self.Switch:
                            if self.Stat_Item[0] == "HP UP" and Two_D_ListCheck(self.Player.Bag,"HP UP"):
                                if self.Player.Pokemon[0].EVHP < 25600:
                                    self.Player.Pokemon[0].EVHP += 2560
                                    if self.Player.Pokemon[0].EVHP < 25600:self.Player.Pokemon[0].EVHP = 25600
                                    self.Stat_Item[1] = False
                                    self.Player.Remove_Bag(self.Stat_Item[0],1)
                            elif self.Stat_Item[0] == "Protein" and Two_D_ListCheck(self.Player.Bag,"Protein"):
                                if self.Player.Pokemon[0].EVAtk < 25600:
                                    self.Player.Pokemon[0].EVAtk += 2560
                                    if self.Player.Pokemon[0].EVAtk < 25600:self.Player.Pokemon[0].EVAtk = 25600
                                    self.Stat_Item[1] = False
                                    self.Player.Remove_Bag(self.Stat_Item[0],1)
                            elif self.Stat_Item[0] == "Iron" and Two_D_ListCheck(self.Player.Bag,"Iron"):
                                if self.Player.Pokemon[0].EVDEF < 25600:
                                    self.Player.Pokemon[0].EVDEF += 2560
                                    if self.Player.Pokemon[0].EVDEF < 25600:self.Player.Pokemon[0].EVDEF = 25600
                                    self.Stat_Item[1] = False
                                    self.Player.Remove_Bag(self.Stat_Item[0],1)
                            elif self.Stat_Item[0] == "Carbos" and Two_D_ListCheck(self.Player.Bag,"Carbos"):
                                if self.Player.Pokemon[0].EVSPEED < 25600:
                                    self.Player.Pokemon[0].EVSPEED += 2560
                                    if self.Player.Pokemon[0].EVSPEED < 25600:self.Player.Pokemon[0].EVSPEED = 25600
                                    self.Stat_Item[1] = False
                                    self.Player.Remove_Bag(self.Stat_Item[0],1)
                            elif self.Stat_Item[0] == "Calcium" and Two_D_ListCheck(self.Player.Bag,"Calcium"):
                                if self.Player.Pokemon[0].EVSPECIAL < 25600:
                                    self.Player.Pokemon[0].EVSPECIAL += 2560
                                    if self.Player.Pokemon[0].EVSPECIAL < 25600:self.Player.Pokemon[0].EVSPECIAL = 25600
                                    self.Stat_Item[1] = False
                                    self.Player.Remove_Bag(self.Stat_Item[0],1)
                            elif self.Stat_Item[0] == "Rare Candy" and Two_D_ListCheck(self.Player.Bag,"Rare Candy") and self.Player.Pokemon[0].Level < 100:
                                self.Player.Pokemon[0].Level += 1                      
                                self.Player.Pokemon[0].LV_UP()
                                self.Player.Pokemon[0].exp = 0
                                self.Player.Pokemon[0].Level_up = True
                                self.Player.Remove_Bag(self.Stat_Item[0],1,False)
                        elif self.PPItems[1] and not self.Switch:
                            self.PPItemPokemon = self.Player.Pokemon[0]
                            self.PPItems[2] = True
                    if (self.BattlePlayerPoke.HP <= 0 and self.Opponents_Pokemon.HP > 0) or (self.Opponents_Pokemon.HP <= 0) and not self.Switch and self.BattleStart:
                        self.Player_NP = self.Player.Pokemon[0]
                        self.Pokemon1 = False
                        self.Pokemon2 = False
                        self.Pokemon3 = False
                        self.Pokemon4 = False
                        self.Pokemon5 = False
                        self.Pokemon6 = False
                    if self.Switch:
                        if not self.BattleStart and self.SwitchedPokemon[0] != 0:self.SwitchedPokemon[1] = 0
                        if self.BattleStart and self.BattlePlayerPoke == self.Player.Pokemon[0]: self.Switch = False
                    self.Clicked = False
        if self.Pokemon2_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if len(self.Player.Pokemon) > 1:
                        if True not in (self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6):
                            if not self.Healing_Item[1]  and not self.Switch and not self.Stat_Item[1]and not self.PPItems[1]: 
                                self.Pokemon2 = True
                                self.Pokemon = self.Player.Pokemon[1]
                                self.SwitchedPokemon[0] = 1
                            elif self.Healing_Item[1] and not self.Switch:
                                if self.Healing_Item[0] == "Potion" and Two_D_ListCheck(self.Player.Bag,"Potion"):
                                    if self.Player.Pokemon[1].HP < self.Player.Pokemon[1].MAXHP: 
                                        self.Player.Pokemon[1].Heal(20)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[1]:self.BattlePlayerPoke.HP = self.Player.Pokemon[1].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Super Potion" and Two_D_ListCheck(self.Player.Bag,"Super Potion"):
                                    if self.Player.Pokemon[1].HP < self.Player.Pokemon[1].MAXHP: 
                                        self.Player.Pokemon[1].Heal(50)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[1]:self.BattlePlayerPoke.HP = self.Player.Pokemon[1].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Fresh Water" and Two_D_ListCheck(self.Player.Bag,"Fresh Water"):
                                    if self.Player.Pokemon[1].HP < self.Player.Pokemon[1].MAXHP: 
                                        self.Player.Pokemon[1].Heal(50)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[1]:self.BattlePlayerPoke.HP = self.Player.Pokemon[1].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Soda Pop" and Two_D_ListCheck(self.Player.Bag,"Soda Pop"):
                                    if self.Player.Pokemon[1].HP < self.Player.Pokemon[1].MAXHP: 
                                        self.Player.Pokemon[1].Heal(60)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[1]:self.BattlePlayerPoke.HP = self.Player.Pokemon[1].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Lemonade" and Two_D_ListCheck(self.Player.Bag,"Lemonade"):
                                    if self.Player.Pokemon[1].HP < self.Player.Pokemon[1].MAXHP: 
                                        self.Player.Pokemon[1].Heal(80)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[1]:self.BattlePlayerPoke.HP = self.Player.Pokemon[1].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Hyper Potion" and Two_D_ListCheck(self.Player.Bag,"Hyper Potion"):
                                    if self.Player.Pokemon[1].HP < self.Player.Pokemon[1].MAXHP: 
                                        self.Player.Pokemon[1].Heal(200)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[1]:self.BattlePlayerPoke.HP = self.Player.Pokemon[1].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Max Potion" and Two_D_ListCheck(self.Player.Bag,"Max Potion"):
                                    self.Player.Pokemon[1].HP = self.Player.Pokemon[1].MAXHP
                                    if self.BattlePlayerPoke == self.Player.Pokemon[1]:self.BattlePlayerPoke.HP = self.Player.Pokemon[1].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                                elif self.Healing_Item[0] == "Antidote" and Two_D_ListCheck(self.Player.Bag,"Antidote"):
                                    if self.Player.Pokemon[1].Status == "PSN": 
                                        self.Player.Pokemon[1].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[1]:self.BattlePlayerPoke.Status = self.Player.Pokemon[1].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Awakening" and Two_D_ListCheck(self.Player.Bag,"Awakening"):
                                    if self.Player.Pokemon[1].Status == "SLP": 
                                        self.Player.Pokemon[1].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[1]:self.BattlePlayerPoke.Status = self.Player.Pokemon[1].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Parlyz Heal" and Two_D_ListCheck(self.Player.Bag,"Parlyz Heal"):
                                    if self.Player.Pokemon[1].Status == "PAR": 
                                        self.Player.Pokemon[1].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[1]:self.BattlePlayerPoke.Status = self.Player.Pokemon[1].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Burn Heal" and Two_D_ListCheck(self.Player.Bag,"Burn Heal"):
                                    if self.Player.Pokemon[1].Status == "BRN": 
                                        self.Player.Pokemon[1].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[1]:self.BattlePlayerPoke.Status = self.Player.Pokemon[1].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Ice Heal" and Two_D_ListCheck(self.Player.Bag,"Ice Heal"):
                                    if self.Player.Pokemon[1].Status == "FRZ": 
                                        self.Player.Pokemon[1].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[1]:self.BattlePlayerPoke.Status = self.Player.Pokemon[1].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False                           
                                elif self.Healing_Item[0] == "Revive" and Two_D_ListCheck(self.Player.Bag,"Revive"):
                                    if self.Player.Pokemon[1].HP <= 0: 
                                        self.Player.Pokemon[1].HP = self.Player.Pokemon[1].MAXHP//2
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Max Revive" and Two_D_ListCheck(self.Player.Bag,"Max Revive"):
                                    if self.Player.Pokemon[1].HP <= 0: 
                                        self.Player.Pokemon[1].HP = self.Player.Pokemon[1].MAXHP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Elixir" and Two_D_ListCheck(self.Player.Bag,"Elixir"):
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    for i in range(1,5,1):self.Player.Pokemon[1].AddPPMove(str(i),10)
                                    self.Healing_Item[1] = False
                                elif self.Healing_Item[0] == "Max Elixir" and Two_D_ListCheck(self.Player.Bag,"Max Elixir"):
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    for i in range(1,5,1):self.Player.Pokemon[1].AddPPMove(str(i),100)
                                    self.Healing_Item[1] = False
                                elif self.Healing_Item[0] == "Full Restore" and Two_D_ListCheck(self.Player.Bag,"Full Restore"):
                                    self.Player.Pokemon[1].Heal(999999,True,True)
                                    if self.BattlePlayerPoke == self.Player.Pokemon[1]:self.BattlePlayerPoke.HP = self.Player.Pokemon[1].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                                elif self.Healing_Item[0] == "Full Heal" and Two_D_ListCheck(self.Player.Bag,"Full Heal"):
                                    if self.Player.Pokemon[1].Status != "OK":
                                        self.Player.Pokemon[1].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[1]:self.BattlePlayerPoke.Status = self.Player.Pokemon[1].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                            elif self.Stat_Item[1] and not self.Switch:
                                if self.Stat_Item[0] == "HP UP" and Two_D_ListCheck(self.Player.Bag,"HP UP"):
                                    if self.Player.Pokemon[1].EVHP < 25600:
                                        self.Player.Pokemon[1].EVHP += 2560
                                        if self.Player.Pokemon[1].EVHP < 25600:self.Player.Pokemon[1].EVHP = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Protein" and Two_D_ListCheck(self.Player.Bag,"Protein"):
                                    if self.Player.Pokemon[1].EVAtk < 25600:
                                        self.Player.Pokemon[1].EVAtk += 2560
                                        if self.Player.Pokemon[1].EVAtk < 25600:self.Player.Pokemon[1].EVAtk = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Iron" and Two_D_ListCheck(self.Player.Bag,"Iron"):
                                    if self.Player.Pokemon[1].EVDEF < 25600:
                                        self.Player.Pokemon[1].EVDEF += 2560
                                        if self.Player.Pokemon[1].EVDEF < 25600:self.Player.Pokemon[1].EVDEF = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Carbos" and Two_D_ListCheck(self.Player.Bag,"Carbos"):
                                    if self.Player.Pokemon[1].EVSPEED < 25600:
                                        self.Player.Pokemon[1].EVSPEED += 2560
                                        if self.Player.Pokemon[1].EVSPEED < 25600:self.Player.Pokemon[1].EVSPEED = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Calcium" and Two_D_ListCheck(self.Player.Bag,"Calcium"):
                                    if self.Player.Pokemon[1].EVSPECIAL < 25600:
                                        self.Player.Pokemon[1].EVSPECIAL += 2560
                                        if self.Player.Pokemon[1].EVSPECIAL < 25600:self.Player.Pokemon[1].EVSPECIAL = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Rare Candy" and Two_D_ListCheck(self.Player.Bag,"Rare Candy") and self.Player.Pokemon[1].Level < 100:
                                    self.Player.Pokemon[1].Level += 1
                                    self.Player.Pokemon[1].LV_UP()
                                    self.Player.Pokemon[1].Level_up = True
                                    self.Player.Pokemon[1].exp = 0
                                    self.Player.Remove_Bag(self.Stat_Item[0],1,False)
                            elif self.PPItems[1] and not self.Switch:
                                self.PPItemPokemon = self.Player.Pokemon[1]
                                self.PPItems[2] = True
                        if (self.BattlePlayerPoke.HP <= 0 and self.Opponents_Pokemon.HP > 0) or (self.Opponents_Pokemon.HP <= 0) and not self.Switch and self.BattleStart:
                            self.Player_NP = self.Player.Pokemon[1]
                            self.Pokemon1 = False
                            self.Pokemon2 = False
                            self.Pokemon3 = False
                            self.Pokemon4 = False
                            self.Pokemon5 = False
                            self.Pokemon6 = False
                        if self.Switch:
                            if not self.BattleStart and self.SwitchedPokemon[0] != 1:self.SwitchedPokemon[1] = 1
                            if self.BattleStart and self.BattlePlayerPoke == self.Player.Pokemon[1]: self.Switch = False
                    self.Clicked = False
        if self.Pokemon3_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if len(self.Player.Pokemon) > 2: 
                        if True not in (self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6):
                            if not self.Healing_Item[1] and not self.Switch and not self.Stat_Item[1]and not self.PPItems[1]: 
                                self.Pokemon3 = True
                                self.Pokemon = self.Player.Pokemon[2]
                                self.SwitchedPokemon[0] = 2
                            elif self.Healing_Item[1] and not self.Switch:
                                if self.Healing_Item[0] == "Potion" and Two_D_ListCheck(self.Player.Bag,"Potion"):
                                    if self.Player.Pokemon[2].HP < self.Player.Pokemon[2].MAXHP: 
                                        self.Player.Pokemon[2].Heal(20)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[2]:self.BattlePlayerPoke.HP = self.Player.Pokemon[2].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Super Potion" and Two_D_ListCheck(self.Player.Bag,"Super Potion"):
                                    if self.Player.Pokemon[2].HP < self.Player.Pokemon[2].MAXHP: 
                                        self.Player.Pokemon[2].Heal(50)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[2]:self.BattlePlayerPoke.HP = self.Player.Pokemon[2].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Fresh Water" and Two_D_ListCheck(self.Player.Bag,"Fresh Water"):
                                    if self.Player.Pokemon[2].HP < self.Player.Pokemon[2].MAXHP: 
                                        self.Player.Pokemon[2].Heal(50)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[2]:self.BattlePlayerPoke.HP = self.Player.Pokemon[2].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Soda Pop" and Two_D_ListCheck(self.Player.Bag,"Soda Pop"):
                                    if self.Player.Pokemon[2].HP < self.Player.Pokemon[2].MAXHP: 
                                        self.Player.Pokemon[2].Heal(60)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[2]:self.BattlePlayerPoke.HP = self.Player.Pokemon[2].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Lemonade" and Two_D_ListCheck(self.Player.Bag,"Lemonade"):
                                    if self.Player.Pokemon[2].HP < self.Player.Pokemon[2].MAXHP: 
                                        self.Player.Pokemon[2].Heal(80)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[2]:self.BattlePlayerPoke.HP = self.Player.Pokemon[2].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Hyper Potion" and Two_D_ListCheck(self.Player.Bag,"Hyper Potion"):
                                    if self.Player.Pokemon[2].HP < self.Player.Pokemon[2].MAXHP: 
                                        self.Player.Pokemon[2].Heal(200)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[2]:self.BattlePlayerPoke.HP = self.Player.Pokemon[2].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Max Potion" and Two_D_ListCheck(self.Player.Bag,"Max Potion"):
                                    self.Player.Pokemon[2].HP = self.Player.Pokemon[2].MAXHP
                                    if self.BattlePlayerPoke == self.Player.Pokemon[2]:self.BattlePlayerPoke.HP = self.Player.Pokemon[2].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                                elif self.Healing_Item[0] == "Antidote" and Two_D_ListCheck(self.Player.Bag,"Antidote"):
                                    if self.Player.Pokemon[2].Status == "PSN": 
                                        self.Player.Pokemon[2].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[2]:self.BattlePlayerPoke.Status = self.Player.Pokemon[2].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Awakening" and Two_D_ListCheck(self.Player.Bag,"Awakening"):
                                    if self.Player.Pokemon[2].Status == "SLP": 
                                        self.Player.Pokemon[2].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[2]:self.BattlePlayerPoke.Status = self.Player.Pokemon[2].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Parlyz Heal" and Two_D_ListCheck(self.Player.Bag,"Parlyz Heal"):
                                    if self.Player.Pokemon[2].Status == "PAR": 
                                        self.Player.Pokemon[2].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[2]:self.BattlePlayerPoke.Status = self.Player.Pokemon[2].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Burn Heal" and Two_D_ListCheck(self.Player.Bag,"Burn Heal"):
                                    if self.Player.Pokemon[2].Status == "BRN": 
                                        self.Player.Pokemon[2].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[2]:self.BattlePlayerPoke.Status = self.Player.Pokemon[2].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Ice Heal" and Two_D_ListCheck(self.Player.Bag,"Ice Heal"):
                                    if self.Player.Pokemon[2].Status == "FRZ": 
                                        self.Player.Pokemon[2].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[2]:self.BattlePlayerPoke.Status = self.Player.Pokemon[2].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Revive" and Two_D_ListCheck(self.Player.Bag,"Revive"):
                                    if self.Player.Pokemon[2].HP <= 0: 
                                        self.Player.Pokemon[2].HP = self.Player.Pokemon[2].MAXHP//2
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Max Revive" and Two_D_ListCheck(self.Player.Bag,"Max Revive"):
                                    if self.Player.Pokemon[2].HP <= 0: 
                                        self.Player.Pokemon[2].HP = self.Player.Pokemon[2].MAXHP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Elixir" and Two_D_ListCheck(self.Player.Bag,"Elixir"):
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    for i in range(1,5,1):self.Player.Pokemon[2].AddPPMove(str(i),10)
                                    self.Healing_Item[1] = False
                                elif self.Healing_Item[0] == "Max Elixir" and Two_D_ListCheck(self.Player.Bag,"Max Elixir"):
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    for i in range(1,5,1):self.Player.Pokemon[2].AddPPMove(str(i),100)
                                    self.Healing_Item[1] = False
                                elif self.Healing_Item[0] == "Full Restore" and Two_D_ListCheck(self.Player.Bag,"Full Restore"):
                                    self.Player.Pokemon[2].Heal(999999,True,True)
                                    if self.BattlePlayerPoke == self.Player.Pokemon[2]:self.BattlePlayerPoke.HP = self.Player.Pokemon[2].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                                elif self.Healing_Item[0] == "Full Heal" and Two_D_ListCheck(self.Player.Bag,"Full Heal"):
                                    if self.Player.Pokemon[2].Status != "OK":
                                        self.Player.Pokemon[2].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[2]:self.BattlePlayerPoke.Status = self.Player.Pokemon[2].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                            elif self.Stat_Item[1] and not self.Switch:
                                if self.Stat_Item[0] == "HP UP" and Two_D_ListCheck(self.Player.Bag,"HP UP"):
                                    if self.Player.Pokemon[2].EVHP < 25600:
                                        self.Player.Pokemon[2].EVHP += 2560
                                        if self.Player.Pokemon[2].EVHP < 25600:self.Player.Pokemon[2].EVHP = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Protein" and Two_D_ListCheck(self.Player.Bag,"Protein"):
                                    if self.Player.Pokemon[2].EVAtk < 25600:
                                        self.Player.Pokemon[2].EVAtk += 2560
                                        if self.Player.Pokemon[2].EVAtk < 25600:self.Player.Pokemon[2].EVAtk = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Iron" and Two_D_ListCheck(self.Player.Bag,"Iron"):
                                    if self.Player.Pokemon[2].EVDEF < 25600:
                                        self.Player.Pokemon[2].EVDEF += 2560
                                        if self.Player.Pokemon[2].EVDEF < 25600:self.Player.Pokemon[2].EVDEF = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Carbos" and Two_D_ListCheck(self.Player.Bag,"Carbos"):
                                    if self.Player.Pokemon[2].EVSPEED < 25600:
                                        self.Player.Pokemon[2].EVSPEED += 2560
                                        if self.Player.Pokemon[2].EVSPEED < 25600:self.Player.Pokemon[2].EVSPEED = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Calcium" and Two_D_ListCheck(self.Player.Bag,"Calcium"):
                                    if self.Player.Pokemon[2].EVSPECIAL < 25600:
                                        self.Player.Pokemon[2].EVSPECIAL += 2560
                                        if self.Player.Pokemon[2].EVSPECIAL < 25600:self.Player.Pokemon[2].EVSPECIAL = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Rare Candy" and Two_D_ListCheck(self.Player.Bag,"Rare Candy") and self.Player.Pokemon[2].Level < 100:
                                    self.Player.Pokemon[2].Level += 1
                                    self.Player.Pokemon[2].LV_UP()
                                    self.Player.Pokemon[2].Level_up = True
                                    self.Player.Pokemon[2].exp = 0
                                    self.Player.Remove_Bag(self.Stat_Item[0],1,False)
                            elif self.PPItems[1] and not self.Switch:
                                self.PPItemPokemon = self.Player.Pokemon[2]
                                self.PPItems[2] = True
                        if (self.BattlePlayerPoke.HP <= 0 and self.Opponents_Pokemon.HP > 0) or (self.Opponents_Pokemon.HP <= 0) and not self.Switch and self.BattleStart:
                            self.Player_NP = self.Player.Pokemon[2]
                            self.Pokemon1 = False
                            self.Pokemon2 = False
                            self.Pokemon3 = False
                            self.Pokemon4 = False
                            self.Pokemon5 = False
                            self.Pokemon6 = False
                        if self.Switch:
                            if not self.BattleStart and self.SwitchedPokemon[0] != 2:self.SwitchedPokemon[1] = 2
                            if self.BattleStart and self.BattlePlayerPoke == self.Player.Pokemon[2]: self.Switch = False
                    self.Clicked = False        
        if self.Pokemon4_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if len(self.Player.Pokemon) > 3:
                        if True not in (self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6) :
                            if not self.Healing_Item[1] and not self.Switch and not self.Stat_Item[1]and not self.PPItems[1]: 
                                if True not in (self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6):
                                    self.Pokemon4 = True
                                    self.Pokemon = self.Player.Pokemon[3]
                                    self.SwitchedPokemon[0] = 3
                            elif self.Healing_Item[1] and not self.Switch:
                                if self.Healing_Item[0] == "Potion" and Two_D_ListCheck(self.Player.Bag,"Potion"):
                                    if self.Player.Pokemon[3].HP < self.Player.Pokemon[3].MAXHP: 
                                        self.Player.Pokemon[3].Heal(20)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[3]:self.BattlePlayerPoke.HP = self.Player.Pokemon[3].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Super Potion" and Two_D_ListCheck(self.Player.Bag,"Super Potion"):
                                    if self.Player.Pokemon[3].HP < self.Player.Pokemon[3].MAXHP: 
                                        self.Player.Pokemon[3].Heal(50)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[3]:self.BattlePlayerPoke.HP = self.Player.Pokemon[3].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Fresh Water" and Two_D_ListCheck(self.Player.Bag,"Fresh Water"):
                                    if self.Player.Pokemon[3].HP < self.Player.Pokemon[3].MAXHP: 
                                        self.Player.Pokemon[3].Heal(50)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[3]:self.BattlePlayerPoke.HP = self.Player.Pokemon[3].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Soda Pop" and Two_D_ListCheck(self.Player.Bag,"Soda Pop"):
                                    if self.Player.Pokemon[3].HP < self.Player.Pokemon[3].MAXHP: 
                                        self.Player.Pokemon[3].Heal(60)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[3]:self.BattlePlayerPoke.HP = self.Player.Pokemon[3].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Lemonade" and Two_D_ListCheck(self.Player.Bag,"Lemonade"):
                                    if self.Player.Pokemon[3].HP < self.Player.Pokemon[3].MAXHP: 
                                        self.Player.Pokemon[3].Heal(80)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[3]:self.BattlePlayerPoke.HP = self.Player.Pokemon[3].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Hyper Potion" and Two_D_ListCheck(self.Player.Bag,"Hyper Potion"):
                                    if self.Player.Pokemon[3].HP < self.Player.Pokemon[3].MAXHP: 
                                        self.Player.Pokemon[3].Heal(200)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[3]:self.BattlePlayerPoke.HP = self.Player.Pokemon[3].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Max Potion" and Two_D_ListCheck(self.Player.Bag,"Max Potion"):
                                    self.Player.Pokemon[3].HP = self.Player.Pokemon[3].MAXHP
                                    if self.BattlePlayerPoke == self.Player.Pokemon[3]:self.BattlePlayerPoke.HP = self.Player.Pokemon[3].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                                elif self.Healing_Item[0] == "Antidote" and Two_D_ListCheck(self.Player.Bag,"Antidote"):
                                    if self.Player.Pokemon[3].Status == "PSN": 
                                        self.Player.Pokemon[3].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[3]:self.BattlePlayerPoke.Status = self.Player.Pokemon[3].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Awakening" and Two_D_ListCheck(self.Player.Bag,"Awakening"):
                                    if self.Player.Pokemon[3].Status == "SLP": 
                                        self.Player.Pokemon[3].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[3]:self.BattlePlayerPoke.Status = self.Player.Pokemon[3].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Parlyz Heal" and Two_D_ListCheck(self.Player.Bag,"Parlyz Heal"):
                                    if self.Player.Pokemon[3].Status == "PAR": 
                                        self.Player.Pokemon[3].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[3]:self.BattlePlayerPoke.Status = self.Player.Pokemon[3].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Burn Heal" and Two_D_ListCheck(self.Player.Bag,"Burn Heal"):
                                    if self.Player.Pokemon[3].Status == "BRN": 
                                        self.Player.Pokemon[3].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[3]:self.BattlePlayerPoke.Status = self.Player.Pokemon[3].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Ice Heal" and Two_D_ListCheck(self.Player.Bag,"Ice Heal"):
                                    if self.Player.Pokemon[3].Status == "FRZ": 
                                        self.Player.Pokemon[3].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[3]:self.BattlePlayerPoke.Status = self.Player.Pokemon[3].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Revive" and Two_D_ListCheck(self.Player.Bag,"Revive"):
                                    if self.Player.Pokemon[3].HP <= 0: 
                                        self.Player.Pokemon[3].HP = self.Player.Pokemon[3].MAXHP//2
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Max Revive" and Two_D_ListCheck(self.Player.Bag,"Max Revive"):
                                    if self.Player.Pokemon[3].HP <= 0: 
                                        self.Player.Pokemon[3].HP = self.Player.Pokemon[3].MAXHP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Elixir" and Two_D_ListCheck(self.Player.Bag,"Elixir"):
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    for i in range(1,5,1):self.Player.Pokemon[3].AddPPMove(str(i),10)
                                    self.Healing_Item[1] = False
                                elif self.Healing_Item[0] == "Max Elixir" and Two_D_ListCheck(self.Player.Bag,"Max Elixir"):
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    for i in range(1,5,1):self.Player.Pokemon[3].AddPPMove(str(i),100)
                                    self.Healing_Item[1] = False
                                elif self.Healing_Item[0] == "Full Restore" and Two_D_ListCheck(self.Player.Bag,"Full Restore"):
                                    self.Player.Pokemon[3].Heal(999999,True,True)
                                    if self.BattlePlayerPoke == self.Player.Pokemon[3]:self.BattlePlayerPoke.HP = self.Player.Pokemon[3].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                                elif self.Healing_Item[0] == "Full Heal" and Two_D_ListCheck(self.Player.Bag,"Full Heal"):
                                    if self.Player.Pokemon[3].Status != "OK":
                                        self.Player.Pokemon[3].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[3]:self.BattlePlayerPoke.Status = self.Player.Pokemon[3].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                            elif self.Stat_Item[1] and not self.Switch:
                                if self.Stat_Item[0] == "HP UP" and Two_D_ListCheck(self.Player.Bag,"HP UP"):
                                    if self.Player.Pokemon[3].EVHP < 25600:
                                        self.Player.Pokemon[3].EVHP += 2560
                                        if self.Player.Pokemon[3].EVHP < 25600:self.Player.Pokemon[3].EVHP = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Protein" and Two_D_ListCheck(self.Player.Bag,"Protein"):
                                    if self.Player.Pokemon[3].EVAtk < 25600:
                                        self.Player.Pokemon[3].EVAtk += 2560
                                        if self.Player.Pokemon[3].EVAtk < 25600:self.Player.Pokemon[3].EVAtk = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Iron" and Two_D_ListCheck(self.Player.Bag,"Iron"):
                                    if self.Player.Pokemon[3].EVDEF < 25600:
                                        self.Player.Pokemon[3].EVDEF += 2560
                                        if self.Player.Pokemon[3].EVDEF < 25600:self.Player.Pokemon[3].EVDEF = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Carbos" and Two_D_ListCheck(self.Player.Bag,"Carbos"):
                                    if self.Player.Pokemon[3].EVSPEED < 25600:
                                        self.Player.Pokemon[3].EVSPEED += 2560
                                        if self.Player.Pokemon[3].EVSPEED < 25600:self.Player.Pokemon[3].EVSPEED = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Calcium" and Two_D_ListCheck(self.Player.Bag,"Calcium"):
                                    if self.Player.Pokemon[3].EVSPECIAL < 25600:
                                        self.Player.Pokemon[3].EVSPECIAL += 2560
                                        if self.Player.Pokemon[3].EVSPECIAL < 25600:self.Player.Pokemon[3].EVSPECIAL = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Rare Candy" and Two_D_ListCheck(self.Player.Bag,"Rare Candy") and self.Player.Pokemon[3].Level < 100:
                                    self.Player.Pokemon[3].Level += 1
                                    self.Player.Pokemon[3].LV_UP()
                                    self.Player.Pokemon[3].exp = 0
                                    self.Player.Pokemon[3].Level_up = True
                                    self.Player.Remove_Bag(self.Stat_Item[0],1,False)
                            elif self.PPItems[1] and not self.Switch:
                                self.PPItemPokemon = self.Player.Pokemon[3]
                                self.PPItems[2] = True
                        if (self.BattlePlayerPoke.HP <= 0 and self.Opponents_Pokemon.HP > 0) or (self.Opponents_Pokemon.HP <= 0) and not self.Switch and self.BattleStart:
                            self.Player_NP = self.Player.Pokemon[3]
                            self.Pokemon1 = False
                            self.Pokemon2 = False
                            self.Pokemon3 = False
                            self.Pokemon4 = False
                            self.Pokemon5 = False
                            self.Pokemon6 = False
                        if self.Switch:
                            if not self.BattleStart and self.SwitchedPokemon[0] != 3:self.SwitchedPokemon[1] = 3
                            if self.BattleStart and self.BattlePlayerPoke == self.Player.Pokemon[3]: self.Switch = False
                    self.Clicked = False
        if self.Pokemon5_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if len(self.Player.Pokemon) > 4:
                        if True not in (self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6) :
                            if not self.Healing_Item[1] and not self.Switch and not self.Stat_Item[1]and not self.PPItems[1]: 
                                if True not in (self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6):
                                    self.Pokemon5 = True
                                    self.Pokemon = self.Player.Pokemon[4]
                                    self.SwitchedPokemon[0] = 4
                            elif self.Healing_Item[1] and not self.Switch:
                                if self.Healing_Item[0] == "Potion" and Two_D_ListCheck(self.Player.Bag,"Potion"):
                                    if self.Player.Pokemon[4].HP < self.Player.Pokemon[4].MAXHP: 
                                        self.Player.Pokemon[4].Heal(20)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[4]:self.BattlePlayerPoke.HP = self.Player.Pokemon[4].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Super Potion" and Two_D_ListCheck(self.Player.Bag,"Super Potion"):
                                    if self.Player.Pokemon[4].HP < self.Player.Pokemon[4].MAXHP: 
                                        self.Player.Pokemon[4].Heal(50)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[4]:self.BattlePlayerPoke.HP = self.Player.Pokemon[4].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Fresh Water" and Two_D_ListCheck(self.Player.Bag,"Fresh Water"):
                                    if self.Player.Pokemon[4].HP < self.Player.Pokemon[4].MAXHP: 
                                        self.Player.Pokemon[4].Heal(50)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[4]:self.BattlePlayerPoke.HP = self.Player.Pokemon[4].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Soda Pop" and Two_D_ListCheck(self.Player.Bag,"Soda Pop"):
                                    if self.Player.Pokemon[4].HP < self.Player.Pokemon[4].MAXHP: 
                                        self.Player.Pokemon[4].Heal(60)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[4]:self.BattlePlayerPoke.HP = self.Player.Pokemon[4].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Lemonade" and Two_D_ListCheck(self.Player.Bag,"Lemonade"):
                                    if self.Player.Pokemon[4].HP < self.Player.Pokemon[4].MAXHP: 
                                        self.Player.Pokemon[4].Heal(80)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[4]:self.BattlePlayerPoke.HP = self.Player.Pokemon[4].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Hyper Potion" and Two_D_ListCheck(self.Player.Bag,"Hyper Potion"):
                                    if self.Player.Pokemon[4].HP < self.Player.Pokemon[4].MAXHP: 
                                        self.Player.Pokemon[4].Heal(200)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[4]:self.BattlePlayerPoke.HP = self.Player.Pokemon[4].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Max Potion" and Two_D_ListCheck(self.Player.Bag,"Max Potion"):
                                    self.Player.Pokemon[4].HP = self.Player.Pokemon[4].MAXHP
                                    if self.BattlePlayerPoke == self.Player.Pokemon[4]:self.BattlePlayerPoke.HP = self.Player.Pokemon[4].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                                elif self.Healing_Item[0] == "Antidote" and Two_D_ListCheck(self.Player.Bag,"Antidote"):
                                    if self.Player.Pokemon[4].Status == "PSN": 
                                        self.Player.Pokemon[4].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[4]:self.BattlePlayerPoke.Status = self.Player.Pokemon[4].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Awakening" and Two_D_ListCheck(self.Player.Bag,"Awakening"):
                                    if self.Player.Pokemon[4].Status == "SLP": 
                                        self.Player.Pokemon[4].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[4]:self.BattlePlayerPoke.Status = self.Player.Pokemon[4].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Parlyz Heal" and Two_D_ListCheck(self.Player.Bag,"Parlyz Heal"):
                                    if self.Player.Pokemon[4].Status == "PAR": 
                                        self.Player.Pokemon[4].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[4]:self.BattlePlayerPoke.Status = self.Player.Pokemon[4].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Burn Heal" and Two_D_ListCheck(self.Player.Bag,"Burn Heal"):
                                    if self.Player.Pokemon[4].Status == "BRN": 
                                        self.Player.Pokemon[4].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[4]:self.BattlePlayerPoke.Status = self.Player.Pokemon[4].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Ice Heal" and Two_D_ListCheck(self.Player.Bag,"Ice Heal"):
                                    if self.Player.Pokemon[4].Status == "FRZ": 
                                        self.Player.Pokemon[4].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[4]:self.BattlePlayerPoke.Status = self.Player.Pokemon[4].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Revive" and Two_D_ListCheck(self.Player.Bag,"Revive"):
                                    if self.Player.Pokemon[4].HP <= 0: 
                                        self.Player.Pokemon[4].HP = self.Player.Pokemon[4].MAXHP//2
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Max Revive" and Two_D_ListCheck(self.Player.Bag,"Max Revive"):
                                    if self.Player.Pokemon[4].HP <= 0: 
                                        self.Player.Pokemon[4].HP = self.Player.Pokemon[4].MAXHP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Elixir" and Two_D_ListCheck(self.Player.Bag,"Elixir"):
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    for i in range(1,5,1):self.Player.Pokemon[5].AddPPMove(str(i),10)
                                    self.Healing_Item[1] = False
                                elif self.Healing_Item[0] == "Max Elixir" and Two_D_ListCheck(self.Player.Bag,"Max Elixir"):
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    for i in range(1,5,1):self.Player.Pokemon[4].AddPPMove(str(i),100)
                                    self.Healing_Item[1] = False
                                elif self.Healing_Item[0] == "Full Restore" and Two_D_ListCheck(self.Player.Bag,"Full Restore"):
                                    self.Player.Pokemon[4].Heal(999999,True,True)
                                    if self.BattlePlayerPoke == self.Player.Pokemon[4]:self.BattlePlayerPoke.HP = self.Player.Pokemon[4].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                                elif self.Healing_Item[0] == "Full Heal" and Two_D_ListCheck(self.Player.Bag,"Full Heal"):
                                    if self.Player.Pokemon[4].Status != "OK":
                                        self.Player.Pokemon[4].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[4]:self.BattlePlayerPoke.Status = self.Player.Pokemon[4].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                            elif self.Stat_Item[1] and not self.Switch:
                                if self.Stat_Item[0] == "HP UP" and Two_D_ListCheck(self.Player.Bag,"HP UP"):
                                    if self.Player.Pokemon[4].EVHP < 25600:
                                        self.Player.Pokemon[4].EVHP += 2560
                                        if self.Player.Pokemon[4].EVHP < 25600:self.Player.Pokemon[4].EVHP = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Protein" and Two_D_ListCheck(self.Player.Bag,"Protein"):
                                    if self.Player.Pokemon[4].EVAtk < 25600:
                                        self.Player.Pokemon[4].EVAtk += 2560
                                        if self.Player.Pokemon[4].EVAtk < 25600:self.Player.Pokemon[4].EVAtk = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Iron" and Two_D_ListCheck(self.Player.Bag,"Iron"):
                                    if self.Player.Pokemon[4].EVDEF < 25600:
                                        self.Player.Pokemon[4].EVDEF += 2560
                                        if self.Player.Pokemon[4].EVDEF < 25600:self.Player.Pokemon[4].EVDEF = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Carbos" and Two_D_ListCheck(self.Player.Bag,"Carbos"):
                                    if self.Player.Pokemon[4].EVSPEED < 25600:
                                        self.Player.Pokemon[4].EVSPEED += 2560
                                        if self.Player.Pokemon[4].EVSPEED < 25600:self.Player.Pokemon[4].EVSPEED = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Calcium" and Two_D_ListCheck(self.Player.Bag,"Calcium"):
                                    if self.Player.Pokemon[4].EVSPECIAL < 25600:
                                        self.Player.Pokemon[4].EVSPECIAL += 2560
                                        if self.Player.Pokemon[4].EVSPECIAL < 25600:self.Player.Pokemon[4].EVSPECIAL = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Rare Candy" and Two_D_ListCheck(self.Player.Bag,"Rare Candy") and self.Player.Pokemon[4].Level < 100:
                                    self.Player.Pokemon[4].Level += 1
                                    self.Player.Pokemon[4].LV_UP()
                                    self.Player.Pokemon[4].exp = 0
                                    self.Player.Pokemon[4].Level_up = True
                                    self.Player.Remove_Bag(self.Stat_Item[0],1,False)
                            elif self.PPItems[1] and not self.Switch:
                                self.PPItemPokemon = self.Player.Pokemon[4]
                                self.PPItems[2] = True
                        if (self.BattlePlayerPoke.HP <= 0 and self.Opponents_Pokemon.HP > 0) or (self.Opponents_Pokemon.HP <= 0) and not self.Switch and self.BattleStart:
                            self.Player_NP = self.Player.Pokemon[4]
                            self.Pokemon1 = False
                            self.Pokemon2 = False
                            self.Pokemon3 = False
                            self.Pokemon4 = False
                            self.Pokemon5 = False
                            self.Pokemon6 = False
                        if self.Switch:
                            if not self.BattleStart and self.SwitchedPokemon[0] != 4:self.SwitchedPokemon[1] = 4
                            if self.BattleStart and self.BattlePlayerPoke == self.Player.Pokemon[4]: self.Switch = False
                    self.Clicked = False             
        if self.Pokemon6_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if len(self.Player.Pokemon) > 5:
                        if True not in (self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6) :
                            if not self.Healing_Item[1] and not self.Switch and not self.Stat_Item[1]and not self.PPItems[1]: 
                                if True not in (self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6):
                                    self.Pokemon6 = True
                                    self.Pokemon = self.Player.Pokemon[5]
                                    self.SwitchedPokemon[0] = 5
                            elif self.Healing_Item[1] and not self.Switch:
                                if self.Healing_Item[0] == "Potion" and Two_D_ListCheck(self.Player.Bag,"Potion"):
                                    if self.Player.Pokemon[5].HP < self.Player.Pokemon[5].MAXHP: 
                                        self.Player.Pokemon[5].Heal(20)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[5]:self.BattlePlayerPoke.HP = self.Player.Pokemon[5].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Super Potion" and Two_D_ListCheck(self.Player.Bag,"Super Potion"):
                                    if self.Player.Pokemon[5].HP < self.Player.Pokemon[5].MAXHP: 
                                        self.Player.Pokemon[5].Heal(50)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[5]:self.BattlePlayerPoke.HP = self.Player.Pokemon[5].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Fresh Water" and Two_D_ListCheck(self.Player.Bag,"Fresh Water"):
                                    if self.Player.Pokemon[5].HP < self.Player.Pokemon[5].MAXHP: 
                                        self.Player.Pokemon[5].Heal(50)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[5]:self.BattlePlayerPoke.HP = self.Player.Pokemon[5].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Soda Pop" and Two_D_ListCheck(self.Player.Bag,"Soda Pop"):
                                    if self.Player.Pokemon[5].HP < self.Player.Pokemon[5].MAXHP: 
                                        self.Player.Pokemon[5].Heal(60)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[5]:self.BattlePlayerPoke.HP = self.Player.Pokemon[5].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Lemonade" and Two_D_ListCheck(self.Player.Bag,"Lemonade"):
                                    if self.Player.Pokemon[5].HP < self.Player.Pokemon[5].MAXHP: 
                                        self.Player.Pokemon[5].Heal(80)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[5]:self.BattlePlayerPoke.HP = self.Player.Pokemon[5].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Hyper Potion" and Two_D_ListCheck(self.Player.Bag,"Hyper Potion"):
                                    if self.Player.Pokemon[5].HP < self.Player.Pokemon[5].MAXHP: 
                                        self.Player.Pokemon[5].Heal(200)
                                        if self.BattlePlayerPoke == self.Player.Pokemon[5]:self.BattlePlayerPoke.HP = self.Player.Pokemon[5].HP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Max Potion" and Two_D_ListCheck(self.Player.Bag,"Max Potion"):
                                    self.Player.Pokemon[5].HP = self.Player.Pokemon[5].MAXHP
                                    if self.BattlePlayerPoke == self.Player.Pokemon[5]:self.BattlePlayerPoke.HP = self.Player.Pokemon[5].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                                elif self.Healing_Item[0] == "Antidote" and Two_D_ListCheck(self.Player.Bag,"Antidote"):
                                    if self.Player.Pokemon[5].Status == "PSN": 
                                        self.Player.Pokemon[5].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[5]:self.BattlePlayerPoke.Status = self.Player.Pokemon[5].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Awakening" and Two_D_ListCheck(self.Player.Bag,"Awakening"):
                                    if self.Player.Pokemon[5].Status == "SLP": 
                                        self.Player.Pokemon[5].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[5]:self.BattlePlayerPoke.Status = self.Player.Pokemon[5].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Parlyz Heal" and Two_D_ListCheck(self.Player.Bag,"Parlyz Heal"):
                                    if self.Player.Pokemon[5].Status == "PAR": 
                                        self.Player.Pokemon[5].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[5]:self.BattlePlayerPoke.Status = self.Player.Pokemon[5].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Burn Heal" and Two_D_ListCheck(self.Player.Bag,"Burn Heal"):
                                    if self.Player.Pokemon[5].Status == "BRN": 
                                        self.Player.Pokemon[5].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[5]:self.BattlePlayerPoke.Status = self.Player.Pokemon[5].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Ice Heal" and Two_D_ListCheck(self.Player.Bag,"Ice Heal"):
                                    if self.Player.Pokemon[5].Status == "FRZ": 
                                        self.Player.Pokemon[5].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[5]:self.BattlePlayerPoke.Status = self.Player.Pokemon[5].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Revive" and Two_D_ListCheck(self.Player.Bag,"Revive"):
                                    if self.Player.Pokemon[5].HP <= 0: 
                                        self.Player.Pokemon[5].HP = self.Player.Pokemon[5].MAXHP//2
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Max Revive" and Two_D_ListCheck(self.Player.Bag,"Max Revive"):
                                    if self.Player.Pokemon[5].HP <= 0: 
                                        self.Player.Pokemon[5].HP = self.Player.Pokemon[5].MAXHP
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                                elif self.Healing_Item[0] == "Elixir" and Two_D_ListCheck(self.Player.Bag,"Elixir"):
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    for i in range(1,5,1):self.Player.Pokemon[5].AddPPMove(str(i),10)
                                    self.Healing_Item[1] = False
                                elif self.Healing_Item[0] == "Max Elixir" and Two_D_ListCheck(self.Player.Bag,"Max Elixir"):
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    for i in range(1,5,1):self.Player.Pokemon[5].AddPPMove(str(i),100)
                                    self.Healing_Item[1] = False
                                elif self.Healing_Item[0] == "Full Restore" and Two_D_ListCheck(self.Player.Bag,"Full Restore"):
                                    self.Player.Pokemon[5].Heal(999999,True,True)
                                    if self.BattlePlayerPoke == self.Player.Pokemon[5]:self.BattlePlayerPoke.HP = self.Player.Pokemon[5].HP
                                    self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                    if self.BattleStart:
                                        self.MissedTurn()
                                    self.Healing_Item[1] = False
                                    self.BattleItems = False
                                elif self.Healing_Item[0] == "Full Heal" and Two_D_ListCheck(self.Player.Bag,"Full Heal"):
                                    if self.Player.Pokemon[5].Status != "OK":
                                        self.Player.Pokemon[5].Status = "OK"
                                        if self.BattlePlayerPoke == self.Player.Pokemon[5]:self.BattlePlayerPoke.Status = self.Player.Pokemon[5].Status
                                        self.Player.Remove_Bag(self.Healing_Item[0],1,False)
                                        if self.BattleStart:
                                            self.MissedTurn()
                                        self.Healing_Item[1] = False
                                        self.BattleItems = False
                            elif self.Stat_Item[1] and not self.Switch:
                                if self.Stat_Item[0] == "HP UP" and Two_D_ListCheck(self.Player.Bag,"HP UP"):
                                    if self.Player.Pokemon[5].EVHP < 25600:
                                        self.Player.Pokemon[5].EVHP += 2560
                                        if self.Player.Pokemon[5].EVHP < 25600:self.Player.Pokemon[5].EVHP = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Protein" and Two_D_ListCheck(self.Player.Bag,"Protein"):
                                    if self.Player.Pokemon[5].EVAtk < 25600:
                                        self.Player.Pokemon[5].EVAtk += 2560
                                        if self.Player.Pokemon[5].EVAtk < 25600:self.Player.Pokemon[5].EVAtk = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Iron" and Two_D_ListCheck(self.Player.Bag,"Iron"):
                                    if self.Player.Pokemon[5].EVDEF < 25600:
                                        self.Player.Pokemon[5].EVDEF += 2560
                                        if self.Player.Pokemon[5].EVDEF < 25600:self.Player.Pokemon[5].EVDEF = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Carbos" and Two_D_ListCheck(self.Player.Bag,"Carbos"):
                                    if self.Player.Pokemon[5].EVSPEED < 25600:
                                        self.Player.Pokemon[5].EVSPEED += 2560
                                        if self.Player.Pokemon[5].EVSPEED < 25600:self.Player.Pokemon[5].EVSPEED = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Calcium" and Two_D_ListCheck(self.Player.Bag,"Calcium"):
                                    if self.Player.Pokemon[5].EVSPECIAL < 25600:
                                        self.Player.Pokemon[5].EVSPECIAL += 2560
                                        if self.Player.Pokemon[5].EVSPECIAL < 25600:self.Player.Pokemon[5].EVSPECIAL = 25600
                                        self.Stat_Item[1] = False
                                        self.Player.Remove_Bag(self.Stat_Item[0],1)
                                elif self.Stat_Item[0] == "Rare Candy" and Two_D_ListCheck(self.Player.Bag,"Rare Candy") and self.Player.Pokemon[5].Level < 100:
                                    self.Player.Pokemon[5].Level += 1
                                    self.Player.Pokemon[5].LV_UP()
                                    self.Player.Pokemon[5].exp = 0
                                    self.Player.Pokemon[5].Level_up = True
                                    self.Player.Remove_Bag(self.Stat_Item[0],1,False)
                            elif self.PPItems[1] and not self.Switch:
                                self.PPItemPokemon = self.Player.Pokemon[5]
                                self.PPItems[2] = True
                        if (self.BattlePlayerPoke.HP <= 0 and self.Opponents_Pokemon.HP > 0) or (self.Opponents_Pokemon.HP <= 0) and not self.Switch and self.BattleStart:
                            self.Player_NP = self.Player.Pokemon[5]
                            self.Pokemon1 = False
                            self.Pokemon2 = False
                            self.Pokemon3 = False
                            self.Pokemon4 = False
                            self.Pokemon5 = False
                            self.Pokemon6 = False
                        if self.Switch:
                            if not self.BattleStart and self.SwitchedPokemon[0] != 5:self.SwitchedPokemon[1] = 5
                            if self.BattleStart and self.BattlePlayerPoke == self.Player.Pokemon[5]: self.Switch = False
                    self.Clicked = False
        if True in (self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6):
            pygame.draw.rect(SCREEN,"cornsilk1",self.MiniMenu)
            self.Show_Options1([(self.Info_Rect,self.Stats_Text,self.Stats_Text_Rect),(self.Switch_Rect,self.Switch_Text,self.Switch_Text_Rect),(self.Cancel_Rect,self.Cancel_Text,self.Cancel_Text_Rect)],"White")
            if self.Info_Rect.collidepoint(mouse_pos):
                if pygame.mouse.get_pressed()[0]:
                    self.Clicked = True
                else:
                    if self.Clicked:
                        self.Info = True
                        self.Clicked = False
            if self.Switch_Rect.collidepoint(mouse_pos):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        if len(self.Player.Pokemon) > 1:
                            self.Switch = True                          
                        self.Clicked = False
            if self.Cancel_Rect.collidepoint(mouse_pos):
                if pygame.mouse.get_pressed()[0]:self.Clicked = True
                else:
                    if self.Clicked:
                        self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6 = False,False,False,False,False,False
                        self.Clicked = False    
            if self.Info:
                SCREEN.fill("White")
                if self.Stats:
                    self.Name = self.Events.Game_Font2.render(self.Pokemon.NickName,True,"Black")
                    self.Name_rect = self.Name.get_rect(topleft = (SCREEN.get_width()//2,20))
                    SCREEN.blit(self.Name,self.Name_rect)
                    self.Level = self.Events.Game_Font2.render(f"LV:{self.Pokemon.Level}",True,"Black")
                    self.Level_rect = self.Level.get_rect(topleft = (618,70))
                    self.HP_Text = self.Events.Game_Font2.render('HP:',True,"Black")
                    self.HP_Rect = self.HP_Text.get_rect(topleft = (618,120))
                    SCREEN.blit(self.Level,self.Level_rect)
                    SCREEN.blit(self.HP_Text,self.HP_Rect)
                    self.Pokemon.Draw_Healthar(self.HP_Rect.centerx + 30,self.HP_Rect.centery)
                    self.HP_Number = self.Events.Game_Font2.render(f"{self.Pokemon.HP}/{self.Pokemon.MAXHP}",True,"Black")
                    self.HP_Number_rect = self.HP_Number.get_rect(topleft = ((618,165)))
                    SCREEN.blit(self.HP_Number,self.HP_Number_rect)
                    self.Status = self.Events.Game_Font2.render(f"STATUS/{self.Pokemon.Status}",True,"Black")
                    self.Status_rect = self.Status.get_rect(topleft = (SCREEN.get_width()//2,210))
                    SCREEN.blit(self.Status,self.Status_rect)
                    pygame.draw.line(SCREEN,"Black",(SCREEN.get_width()//2,258),(SCREEN.get_width() - 18,258),5) #Bottom Line
                    pygame.draw.line(SCREEN,"Black",(SCREEN.get_width() - 20,10),(SCREEN.get_width() - 20,258),5) #Top Line
                    self.Pokemon_image_rect = self.Pokemon.Front_Img.get_rect(center = (154,130))
                    SCREEN.blit(self.Pokemon.Front_Img,self.Pokemon_image_rect)
                    self.Show_Options1([(self.Moves_Rect,self.Moves_Text,self.Moves_Text_Rect),(self.PokeMenu_Rect,self.PokeMenu_Text,self.PokeMenu_Text_Rect)])
                    if self.Moves_Rect.collidepoint(mouse_pos):
                        if pygame.mouse.get_pressed()[0]:
                            self.Clicked = True
                        else:
                            if self.Clicked:
                                self.Stats,self.Moves = False,True
                                self.Clicked = False
                    if self.PokeMenu_Rect.collidepoint(mouse_pos):
                        if pygame.mouse.get_pressed()[0]:
                            self.Clicked = True
                        else:
                            if self.Clicked:
                                self.Info = False
                                self.Clicked = False
                    pygame.draw.rect(SCREEN,"Black",self.Stats_Display_Rect,3,12)
                    SCREEN.blit(self.Stat1,self.Stat1_rect)
                    SCREEN.blit(self.Stat2,self.Stat2_rect)
                    SCREEN.blit(self.Stat3,self.Stat3_rect)
                    SCREEN.blit(self.Stat4,self.Stat4_rect)
                    self.PokemonAttack = self.Events.Game_Font2.render(str(self.Pokemon.Atk),True,"Black")
                    self.PokemonAttack_rect = self.PokemonAttack.get_rect(topright = (SCREEN.get_width()//2 - 30,self.Stat1_rect.bottomright[1]))
                    SCREEN.blit(self.PokemonAttack,self.PokemonAttack_rect)
                    self.PokemonDefense = self.Events.Game_Font2.render(str(self.Pokemon.DEF),True,"Black")
                    self.PokemonDefense_rect = self.PokemonDefense.get_rect(topright = (SCREEN.get_width()//2 - 30,self.Stat2_rect.bottomright[1]))
                    SCREEN.blit(self.PokemonDefense,self.PokemonDefense_rect)
                    self.PokemonSpeed = self.Events.Game_Font2.render(str(self.Pokemon.SPEED),True,"Black")
                    self.PokemonSpeed_rect = self.PokemonSpeed.get_rect(topright = (SCREEN.get_width()//2 - 30,self.Stat3_rect.bottomright[1]))
                    SCREEN.blit(self.PokemonSpeed,self.PokemonSpeed_rect)
                    self.PokemonSpecial = self.Events.Game_Font2.render(str(self.Pokemon.SPECIAL),True,"Black")
                    self.PokemonSpecial_rect = self.PokemonSpecial.get_rect(topright = (SCREEN.get_width()//2 - 30,self.Stat4_rect.bottomright[1]))
                    SCREEN.blit(self.PokemonSpecial,self.PokemonSpecial_rect)
                    self.Type1 = self.Events.Game_Font2.render("TYPE 1/",True,"Black")
                    self.Type1_rect = self.Type1.get_rect(topleft = (451,self.Stats_Display_Rect.y))
                    self.PokemonType1 = self.Events.Game_Font2.render(str(self.Pokemon.Type[0].upper()),True,"Black")
                    self.PokemonType1_rect = self.PokemonType1.get_rect(topleft = (self.Type1_rect.x,self.Type1_rect.y + 40))
                    SCREEN.blit(self.Type1,self.Type1_rect)
                    SCREEN.blit(self.PokemonType1,self.PokemonType1_rect)
                    if self.Pokemon.Type[1] != "":
                        self.Type2 = self.Events.Game_Font2.render("TYPE 2/",True,"Black")
                        self.Type2_rect = self.Type2.get_rect(topleft = (451,495))
                        self.PokemonType2 = self.Events.Game_Font2.render(str(self.Pokemon.Type[1].upper()),True,"Black")
                        self.PokemonType2_rect = self.PokemonType2.get_rect(topleft = (self.Type2_rect.x,self.Type2_rect.y + 40))
                        SCREEN.blit(self.Type2,self.Type2_rect)
                        SCREEN.blit(self.PokemonType2,self.PokemonType2_rect)
                    self.OT = self.Events.Game_Font2.render("OT /",True,"Black")
                    self.OT_rect = self.OT.get_rect(topleft = (451,688))
                    self.PokemonOT = self.Events.Game_Font2.render(self.Pokemon.Trainer,True,"Black")
                    self.PokemonOT_rect = self.PokemonOT.get_rect(topleft = (self.OT_rect.x + 30,self.OT_rect.y + 40))
                    SCREEN.blit(self.OT,self.OT_rect)
                    SCREEN.blit(self.PokemonOT,self.PokemonOT_rect)
                    pygame.draw.line(SCREEN,"Black",(self.OT_rect.x,780),(SCREEN.get_width() - 18,780),5)
                    pygame.draw.line(SCREEN,"Black",(SCREEN.get_width() - 20,self.Type1_rect.y),(SCREEN.get_width() - 20,780),5)
                if self.Moves:
                    self.PokeMoves_rect = pygame.Rect(0,300,800,500)
                    self.PokeMove1 = self.Events.Game_Font2.render(self.Pokemon.Moves[0],True,"Black")
                    self.PokeMove1_rect = self.PokeMove1.get_rect(topleft = (self.PokeMoves_rect.x + 10,self.PokeMoves_rect.y + 5))
                    self.PokeMove1_pp = self.Events.Game_Font2.render(f"PP {self.Pokemon.Move1pp}/{self.Pokemon.MaxMove1pp}",True,"Black")
                    self.PokeMove1_pp_rect = self.PokeMove1_pp.get_rect(topleft = (self.PokeMove1_rect.bottomright[0] + 50,self.PokeMove1_rect.bottomright[1]))
                    self.PokeMove2 = self.Events.Game_Font2.render(self.Pokemon.Moves[1],True,"Black")
                    self.PokeMove2_rect = self.PokeMove2.get_rect(topleft = (self.PokeMove1_rect.x,428))
                    self.Show_Options1([(self.Stats_Rect,self.Stats_Text,self.Stats_Text_Rect),(self.PokeMenu_Rect,self.PokeMenu_Text,self.PokeMenu_Text_Rect)])
                    if self.Stats_Rect.collidepoint(mouse_pos):
                        if pygame.mouse.get_pressed()[0]:
                            self.Clicked = True
                        else:
                            if self.Clicked:
                                self.Stats,self.Moves = True,False
                                self.Clicked = False
                    if self.PokeMenu_Rect.collidepoint(mouse_pos):
                        if pygame.mouse.get_pressed()[0]:
                            self.Clicked = True
                        else:
                            if self.Clicked:
                                self.Info = False
                                self.Stats,self.Moves = True,False
                                self.Clicked = False
                    if self.Pokemon.Moves[1] != "-":
                        self.PokeMove2_pp = self.Events.Game_Font2.render(f"PP {self.Pokemon.Move2pp}/{self.Pokemon.MaxMove2pp}",True,"Black")
                        self.PokeMove2_pp_rect = self.PokeMove2_pp.get_rect(topleft = (self.PokeMove2_rect.bottomright[0] + 50,self.PokeMove2_rect.bottomright[1]))
                    if self.Pokemon.Moves[1] == "-":
                        self.PokeMove2_pp = self.Events.Game_Font2.render(self.Pokemon.Move2pp,True,"Black")
                        self.PokeMove2_pp_rect = self.PokeMove2_pp.get_rect(topleft = (self.PokeMove2_rect.bottomright[0] + 50,self.PokeMove2_rect.bottomright[1]))
                    self.PokeMove3 = self.Events.Game_Font2.render(self.Pokemon.Moves[2],True,"Black")
                    self.PokeMove3_rect = self.PokeMove3.get_rect(topleft = (self.PokeMove1_rect.x,550))
                    if self.Pokemon.Moves[2] != "-":
                        self.PokeMove3_pp = self.Events.Game_Font2.render(f"PP {self.Pokemon.Move3pp}/{self.Pokemon.MaxMove3pp}",True,"Black")
                        self.PokeMove3_pp_rect = self.PokeMove3_pp.get_rect(topleft = (self.PokeMove3_rect.bottomright[0] + 50,self.PokeMove3_rect.bottomright[1]))
                    if self.Pokemon.Moves[2] == "-":
                        self.PokeMove3_pp = self.Events.Game_Font2.render(self.Pokemon.Move3pp,True,"Black")
                        self.PokeMove3_pp_rect = self.PokeMove3_pp.get_rect(topleft = (self.PokeMove3_rect.bottomright[0] + 50,self.PokeMove3_rect.bottomright[1]))
                    self.PokeMove4 = self.Events.Game_Font2.render(self.Pokemon.Moves[3],True,"Black")
                    self.PokeMove4_rect = self.PokeMove4.get_rect(topleft = (self.PokeMove1_rect.x,675))
                    if self.Pokemon.Moves[3] != "-":
                        self.PokeMove4_pp = self.Events.Game_Font2.render(f"PP {self.Pokemon.Move4pp}/{self.Pokemon.MaxMove4pp}",True,"Black")
                        self.PokeMove4_pp_rect = self.PokeMove4_pp.get_rect(topleft = (self.PokeMove4_rect.bottomright[0] + 50,self.PokeMove4_rect.bottomright[1]))
                    if self.Pokemon.Moves[3] == "-":
                        self.PokeMove4_pp = self.Events.Game_Font2.render(self.Pokemon.Move4pp,True,"Black")
                        self.PokeMove4_pp_rect = self.PokeMove4_pp.get_rect(topleft = (self.PokeMove4_rect.bottomright[0] + 50,self.PokeMove4_rect.bottomright[1]))
                    self.Name = self.Events.Game_Font2.render(self.Pokemon.NickName,True,"Black")
                    self.Name_rect = self.Name.get_rect(topleft = (SCREEN.get_width()//2,20))
                    SCREEN.blit(self.Name,self.Name_rect)
                    self.Pokemon_image_rect = self.Pokemon.Front_Img.get_rect(center = (154,130))
                    SCREEN.blit(self.Pokemon.Front_Img,self.Pokemon_image_rect)
                    pygame.draw.line(SCREEN,"Black",(SCREEN.get_width()//2,258),(SCREEN.get_width() - 18,258),5) #Bottom Line
                    pygame.draw.line(SCREEN,"Black",(SCREEN.get_width() - 20,10),(SCREEN.get_width() - 20,258),5) #Top Line
                    EXP_Points = self.Events.Game_Font2.render("EXP POINTS",True,"Black")
                    EXP_Points_rect = EXP_Points.get_rect(topleft = (SCREEN.get_width()//2,70))
                    SCREEN.blit(EXP_Points,EXP_Points_rect)
                    self.EXP_Points = self.Events.Game_Font2.render(str(self.Pokemon.exp),True,"Black")
                    self.EXP_Points_rect = self.EXP_Points.get_rect(topleft = (EXP_Points_rect.bottomright[0] - 60,EXP_Points_rect.bottomright[1] + 10))
                    SCREEN.blit(self.EXP_Points,self.EXP_Points_rect)
                    Level_UP = self.Events.Game_Font2.render("LEVEL UP",True,"Black")
                    Level_UP_rect = Level_UP.get_rect(topleft = (SCREEN.get_width()//2,174))
                    SCREEN.blit(Level_UP,Level_UP_rect)
                    self.Level_UP = self.Events.Game_Font2.render(f"{self.Pokemon.EXPGOAL - self.Pokemon.exp} to LV: {self.Pokemon.Level + 1}",True,"Black")
                    self.Level_UP_rect = self.Level_UP.get_rect(topleft = (Level_UP_rect.centerx,Level_UP_rect.centery +30))
                    SCREEN.blit(self.Level_UP,self.Level_UP_rect)
                    pygame.draw.rect(SCREEN,"Black",self.PokeMoves_rect,5)
                    SCREEN.blit(self.PokeMove1,self.PokeMove1_rect)
                    SCREEN.blit(self.PokeMove1_pp,self.PokeMove1_pp_rect)
                    SCREEN.blit(self.PokeMove2,self.PokeMove2_rect)
                    SCREEN.blit(self.PokeMove2_pp,self.PokeMove2_pp_rect)
                    SCREEN.blit(self.PokeMove3,self.PokeMove3_rect)
                    SCREEN.blit(self.PokeMove3_pp,self.PokeMove3_pp_rect)
                    SCREEN.blit(self.PokeMove4,self.PokeMove4_rect)
                    SCREEN.blit(self.PokeMove4_pp,self.PokeMove4_pp_rect)
            if self.Switch:
                if not self.BattleStart:
                    self.Pokemon_Menu_Text = f"Choose a different pokemon than {self.Player.Pokemon[self.SwitchedPokemon[0]].NickName}"
                    if self.SwitchedPokemon[1] != "0" and self.SwitchedPokemon[0] != self.SwitchedPokemon[1]:
                        self.Player.Pokemon[self.SwitchedPokemon[0]],self.Player.Pokemon[self.SwitchedPokemon[1]] = self.Player.Pokemon[self.SwitchedPokemon[1]],self.Player.Pokemon[self.SwitchedPokemon[0]]
                        self.SwitchedPokemon = [0,'0']
                        self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6 = False,False,False,False,False,False
                        self.Pokemon_Menu_Text = "Choose a Pokemon - BackSpace to Leave"
                        self.Switch = False
        if not self.BattleStart:
            try:
                if self.Player.Pokemon[0].Level_up:
                    if self.Player.Pokemon[0].NewMoveStatus == "Choice": 
                        self.AnotherMove = True
                        self.PokemonOver4Moves = self.Player.Pokemon[0]
                        if self.AnotherMove: self.PokemonOver4MovesLearn(self.Player.Pokemon[0].NewMove)
                        if not self.AnotherMove:self.Player.Pokemon[0].NewMoveStatus = ""
                    elif self.Player.Pokemon[0].NextStage[0] <= self.Player.Pokemon[0].Level:
                        self.Events.Dialouge(f"{self.Player.Pokemon[0].NickName} is trying to evolve. Should they evolve",Next=False)
                        self.BattleDecison()
                        if self.BattleYes: 
                            self.EvolvingPokemon = self.Player.Pokemon[0]
                            self.PokeEvolutionStart = True
                            self.EvolvingPokemonStep1 = True
                        if self.No: 
                            self.Player.Pokemon[0].Level_up = False
                        self.Yes,self.No = False,False
                        if self.PokeEvolutionStart:
                            self.PokemonEvolution()
                        if self.EvolvingPokemonDone:
                            self.EvolvingPokemonDone = False
                            self.Player.Pokemon[0].NewMoveStatus = ""
                            self.Player.Pokemon[0].Level_up = False
                    else:
                        self.Player.Pokemon[0].Level_up = False
                elif self.Player.Pokemon[1].Level_up:
                    if self.Player.Pokemon[1].NewMoveStatus == "Choice": 
                        self.AnotherMove = True
                        self.PokemonOver4Moves = self.Player.Pokemon[1]
                        if self.AnotherMove: self.PokemonOver4MovesLearn(self.Player.Pokemon[1].NewMove)
                        if not self.AnotherMove:self.Player.Pokemon[1].NewMoveStatus = ""
                    elif self.Player.Pokemon[1].NextStage[0] <= self.Player.Pokemon[1].Level:
                        self.Events.Dialouge(f"{self.Player.Pokemon[1].NickName} is trying to evolve. Should they evolve",Next=False)
                        self.BattleDecison()
                        if self.Yes: 
                            self.EvolvingPokemon = self.Player.Pokemon[1]
                            self.PokeEvolutionStart = True
                        if self.No: 
                            self.Player.Pokemon[1].Level_up = False
                        self.Yes,self.No = False,False
                        if self.PokeEvolutionStart:
                            self.PokemonEvolution()
                        if self.EvolvingPokemonDone:
                            self.EvolvingPokemonDone = False
                            self.Player.Pokemon[1].NewMoveStatus = ""
                            self.Player.Pokemon[1].Level_up = False
                elif self.Player.Pokemon[2].Level_up:
                    if self.Player.Pokemon[2].NewMoveStatus == "Choice": 
                        self.AnotherMove = True
                        self.PokemonOver4Moves = self.Player.Pokemon[2]
                        if self.AnotherMove: self.PokemonOver4MovesLearn(self.Player.Pokemon[2].NewMove)
                        if not self.AnotherMove:self.Player.Pokemon[2].NewMoveStatus = ""
                    elif self.Player.Pokemon[2].NextStage[0] <= self.Player.Pokemon[2].Level:
                        self.Events.Dialouge(f"{self.Player.Pokemon[2].NickName} is trying to evolve. Should they evolve",Next=False)
                        self.BattleDecison()
                        if self.Yes: 
                            self.EvolvingPokemon = self.Player.Pokemon[2]
                            self.PokeEvolutionStart = True
                        if self.No: 
                            self.Player.Pokemon[2].Level_up = False
                        self.Yes,self.No = False,False
                        if self.PokeEvolutionStart:
                            self.PokemonEvolution()
                        if self.EvolvingPokemonDone:
                            self.EvolvingPokemonDone = False
                            self.Player.Pokemon[2].NewMoveStatus = ""
                            self.Player.Pokemon[2].Level_up = False
                elif self.Player.Pokemon[3].Level_up:
                    if self.Player.Pokemon[3].NewMoveStatus == "Choice": 
                        self.AnotherMove = True
                        self.PokemonOver4Moves = self.Player.Pokemon[3]
                        if self.AnotherMove: self.PokemonOver4MovesLearn(self.Player.Pokemon[3].NewMove)
                        if not self.AnotherMove:self.Player.Pokemon[3].NewMoveStatus = ""
                    elif self.Player.Pokemon[3].NextStage[0] <= self.Player.Pokemon[3].Level:
                        self.Events.Dialouge(f"{self.Player.Pokemon[3].NickName} is trying to evolve. Should they evolve",Next=False)
                        self.BattleDecison()
                        if self.Yes: 
                            self.EvolvingPokemon = self.Player.Pokemon[3]
                            self.PokeEvolutionStart = True
                        if self.No: 
                            self.Player.Pokemon[3].Level_up = False
                        self.Yes,self.No = False,False
                        if self.PokeEvolutionStart:
                            self.PokemonEvolution()
                        if self.EvolvingPokemonDone:
                            self.EvolvingPokemonDone = False
                            self.Player.Pokemon[3].Level_up = False
                            self.Player.Pokemon[3].NewMoveStatus = ""
            except:
                if not Two_D_ListCheck(self.Player.Bag,"Rare Candy") and self.Stat_Item[1]:
                    self.Stat_Item[1] = False 
        
    def PokemonOver4MovesLearn(self,NewMove:str):
        SCREEN.fill("cornsilk1")
        mouse_pos = pygame.mouse.get_pos()
        Name = self.Events.Game_Font2.render(self.PokemonOver4Moves.NickName,True,"Black")
        Name_rect = Name.get_rect(topleft = (SCREEN.get_width()//2,20))
        SCREEN.blit(Name,Name_rect)
        Pokemon_image_rect = self.PokemonOver4Moves.Front_Img.get_rect(topleft = (0,10))
        SCREEN.blit(self.PokemonOver4Moves.Front_Img,Pokemon_image_rect)
        self.Move1_Rect,self.Move1_Text,self.Move1_Text_Rect = self.Make_Option_Button(pygame.Rect(0,300,100,50),self.PokemonOver4Moves.Moves[0])
        self.Move2_Rect,self.Move2_Text,self.Move2_Text_Rect = self.Make_Option_Button(pygame.Rect(0,400,100,50),self.PokemonOver4Moves.Moves[1])
        self.Move3_Rect,self.Move3_Text,self.Move3_Text_Rect = self.Make_Option_Button(pygame.Rect(0,500,100,50),self.PokemonOver4Moves.Moves[2])
        self.Move4_Rect,self.Move4_Text,self.Move4_Text_Rect = self.Make_Option_Button(pygame.Rect(0,600,100,50),self.PokemonOver4Moves.Moves[3])
        self.NewMove_Rect,self.NewMove_Text,self.NewMove_Text_Rect = self.Make_Option_Button(pygame.Rect(0,700,100,50),NewMove)
        self.Show_Options1([(self.Move1_Rect,self.Move1_Text,self.Move1_Text_Rect),(self.Move2_Rect,self.Move2_Text,self.Move2_Text_Rect),(self.Move3_Rect,self.Move3_Text,self.Move3_Text_Rect),(self.Move4_Rect,self.Move4_Text,self.Move4_Text_Rect),(self.NewMove_Rect,self.NewMove_Text,self.NewMove_Text_Rect)])
        self.AddMoveText = self.Events.Game_font.render("Pick one move to get rid of",True,"Black")
        self.AddMoveText_rect = self.AddMoveText.get_rect(center = (SCREEN.get_width()//2,100))
        SCREEN.blit(self.AddMoveText,self.AddMoveText_rect)
        if self.Move1_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.PokemonOver4Moves.SetUpNewMove(ReplacedMove=1,Move=NewMove)
                    self.AnotherMove = False
                    self.AnotherMoveGiven = True
                    self.MoveDesicion = True
                    self.Clicked = False
        if self.Move2_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.PokemonOver4Moves.SetUpNewMove(ReplacedMove=2,Move=NewMove)
                    self.AnotherMove = False
                    self.MoveDesicion = True
                    self.AnotherMoveGiven = True
                    self.Clicked = False
        if self.Move3_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.PokemonOver4Moves.SetUpNewMove(ReplacedMove=3,Move=NewMove)
                    self.AnotherMove = False
                    self.MoveDesicion = True
                    self.AnotherMoveGiven = True
                    self.Clicked = False
        if self.Move4_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.PokemonOver4Moves.SetUpNewMove(ReplacedMove=4,Move=NewMove)
                    self.AnotherMove = False
                    self.MoveDesicion = True
                    self.AnotherMoveGiven = True
                    self.Clicked = False
        if self.NewMove_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.MoveDesicion = True
                    self.AnotherMove = False
                    self.Clicked = False
        
    def PokemonEvolution(self):
        SCREEN.fill("cornsilk1")
        NewPoke = Pokemon(self.EvolvingPokemon.NextStage[1],10,["Tackle"],"Pat","Nick")
        if self.EvolvingPokemonStep1:
            self.EvolvingPokemon.Delay -= 1
            if self.EvolvingPokemon.Delay %2 == 0:
                SCREEN.blit(self.EvolvingPokemon.Front_Img,(400,100))
            elif self.EvolvingPokemon.Delay %2 == 1:
                SCREEN.blit(NewPoke.Front_Img,(400,100))
            if self.EvolvingPokemon.Delay < 0:
                self.EvolvingPokemon.Delay = 200
                self.EvolvingPokemonStep1,self.EvolvingPokemonStep2 = False,True
            self.Events.Dialouge(f"{self.EvolvingPokemon.NickName} is evolving into a {self.EvolvingPokemon.NextStage[1]}",Next=False)
        if self.EvolvingPokemonStep2:
            SCREEN.blit(NewPoke.Front_Img,(400,100))
            self.Events.Dialouge(f"{NewPoke.Name} is here",Next=False)
            self.EvolvingPokemon.Delay -= 5
            if self.EvolvingPokemon.Delay < 0:
                self.EvolvingPokemonDone = True
                self.EvolvingPokemonStep2=False
                self.EvolvingPokemon.Evoluation()
                self.AddPokeDex(NewPoke.Name,Caught=True)
                self.PokeEvolutionStart = False
                self.EvolvingPokemon.Delay = 100

    def PokemonTMMenu(self):
        mouse_pos = pygame.mouse.get_pos()
        SCREEN.fill("cornsilk1")
        Poke1Able = "UNABLE"
        Poke2Able = "UNABLE"
        Poke3Able = "UNABLE"
        Poke4Able = "UNABLE"
        Poke5Able = "UNABLE"
        Poke6Able = "UNABLE"
        try:
            self.Pokemon1_Text = self.Events.Game_Font2.render(self.Player.Pokemon[0].NickName,True,"Black")
            self.Pokemon1_Text_Rect = self.Pokemon1_Text.get_rect(topleft = self.Pokemon1_Rect.topleft)
            if (self.Player.Pokemon[0].Name in self.GiveTm[1].Pokemon or (self.Player.Pokemon[0].Name not in self.GiveTm[1].NotPokemon and len(self.GiveTm[1].NotPokemon) > 1)) and self.GiveTm[1].Move not in self.Player.Pokemon[0].Moves: 
                Poke1Able = "ABLE"
            if (self.Player.Pokemon[0].Name in self.GiveTm[1].Pokemon or self.Player.Pokemon[0].Name not in self.GiveTm[1].NotPokemon) and self.GiveTm[1].Move in self.Player.Pokemon[0].Moves: Poke1Able = "LEARNED"
            Poke1Able_Surf = self.Events.Game_Font3.render(Poke1Able,True,"Black")
            Poke1Able_rect = Poke1Able_Surf.get_rect(topright = (self.Pokemon1_Rect.topright[0] - 30,self.Pokemon1_Rect.topright[1]))                                    
            self.Pokemon2_Text = self.Events.Game_Font2.render(self.Player.Pokemon[1].NickName,True,"Black")
            self.Pokemon2_Text_Rect = self.Pokemon2_Text.get_rect(topleft = self.Pokemon2_Rect.topleft)
            if (self.Player.Pokemon[1].Name in self.GiveTm[1].Pokemon or (self.Player.Pokemon[1].Name not in self.GiveTm[1].NotPokemon and len(self.GiveTm[1].NotPokemon) > 1)) and self.GiveTm[1].Move not in self.Player.Pokemon[1].Moves: Poke2Able = "ABLE"
            if (self.Player.Pokemon[1].Name in self.GiveTm[1].Pokemon or self.Player.Pokemon[1].Name not in self.GiveTm[1].NotPokemon) and self.GiveTm[1].Move in self.Player.Pokemon[1].Moves: Poke2Able = "LEARNED"
            Poke2Able_Surf = self.Events.Game_Font3.render(Poke2Able,True,"Black")
            Poke2Able_rect = Poke2Able_Surf.get_rect(topright = (self.Pokemon2_Rect.topright[0] - 30,self.Pokemon2_Rect.topright[1]))
            self.Pokemon3_Text = self.Events.Game_Font2.render(self.Player.Pokemon[2].NickName,True,"Black")
            self.Pokemon3_Text_Rect = self.Pokemon3_Text.get_rect(topleft = self.Pokemon3_Rect.topleft)
            if (self.Player.Pokemon[2].Name in self.GiveTm[1].Pokemon or (self.Player.Pokemon[2].Name not in self.GiveTm[1].NotPokemon and len(self.GiveTm[1].NotPokemon) > 1)) and self.GiveTm[1].Move not in self.Player.Pokemon[2].Moves: Poke3Able = "ABLE"
            if (self.Player.Pokemon[2].Name in self.GiveTm[1].Pokemon or self.Player.Pokemon[2].Name not in self.GiveTm[1].NotPokemon) and self.GiveTm[1].Move in self.Player.Pokemon[2].Moves: Poke3Able = "LEARNED"
            Poke3Able_Surf = self.Events.Game_Font3.render(Poke3Able,True,"Black")
            Poke3Able_rect = Poke3Able_Surf.get_rect(topright = (self.Pokemon3_Rect.topright[0] - 30,self.Pokemon3_Rect.topright[1]))
            self.Pokemon4_Text = self.Events.Game_Font2.render(self.Player.Pokemon[3].NickName,True,"Black")
            self.Pokemon4_Text_Rect = self.Pokemon4_Text.get_rect(topleft = self.Pokemon4_Rect.topleft)
            if (self.Player.Pokemon[3].Name in self.GiveTm[1].Pokemon or (self.Player.Pokemon[3].Name not in self.GiveTm[1].NotPokemon and len(self.GiveTm[1].NotPokemon) > 1)) and self.GiveTm[1].Move not in self.Player.Pokemon[3].Moves: Poke4Able = "ABLE"
            if (self.Player.Pokemon[3].Name in self.GiveTm[1].Pokemon or self.Player.Pokemon[3].Name not in self.GiveTm[1].NotPokemon) and self.GiveTm[1].Move in self.Player.Pokemon[3].Moves: Poke4Able = "LEARNED"
            Poke4Able_Surf = self.Events.Game_Font3.render(Poke4Able,True,"Black")
            Poke4Able_rect = Poke4Able_Surf.get_rect(topright = (self.Pokemon4_Rect.topright[0] - 30,self.Pokemon4_Rect.topright[1]))
            self.Pokemon5_Text = self.Events.Game_Font2.render(self.Player.Pokemon[4].NickName,True,"Black")
            self.Pokemon5_Text_Rect = self.Pokemon5_Text.get_rect(topleft = self.Pokemon5_Rect.topleft)
            if (self.Player.Pokemon[4].Name in self.GiveTm[1].Pokemon or (self.Player.Pokemon[4].Name not in self.GiveTm[1].NotPokemon and len(self.GiveTm[1].NotPokemon) > 1)) and self.GiveTm[1].Move not in self.Player.Pokemon[4].Moves: Poke5Able = "ABLE"
            if (self.Player.Pokemon[4].Name in self.GiveTm[1].Pokemon or self.Player.Pokemon[4].Name not in self.GiveTm[1].NotPokemon) and self.GiveTm[1].Move in self.Player.Pokemon[4].Moves: Poke5Able = "LEARNED"
            Poke5Able_Surf = self.Events.Game_Font3.render(Poke5Able,True,"Black")
            Poke5Able_rect = Poke5Able_Surf.get_rect(topright = (self.Pokemon5_Rect.topright[0] - 30,self.Pokemon5_Rect.topright[1]))
            self.Pokemon6_Text = self.Events.Game_Font2.render(self.Player.Pokemon[5].NickName,True,"Black")
            self.Pokemon6_Text_Rect = self.Pokemon6_Text.get_rect(topleft = self.Pokemon6_Rect.topleft)
            if (self.Player.Pokemon[5].Name in self.GiveTm[1].Pokemon or (self.Player.Pokemon[5].Name not in self.GiveTm[1].NotPokemon and len(self.GiveTm[1].NotPokemon) > 1)) and self.GiveTm[1].Move not in self.Player.Pokemon[5].Moves: Poke6Able = "ABLE"
            if (self.Player.Pokemon[5].Name in self.GiveTm[1].Pokemon or self.Player.Pokemon[5].Name not in self.GiveTm[1].NotPokemon) and self.GiveTm[1].Move in self.Player.Pokemon[5].Moves: Poke6Able = "LEARNED"
            Poke6Able_Surf = self.Events.Game_Font3.render(Poke6Able,True,"Black")
            Poke6Able_rect = Poke6Able_Surf.get_rect(topright = (self.Pokemon6_Rect.topright[0] - 30,self.Pokemon6_Rect.topright[1]))
        except:pass
        self.Show_Options2([(self.Pokemon1_Rect,self.Pokemon1_Text,self.Pokemon1_Text_Rect),(self.Pokemon2_Rect,self.Pokemon2_Text,self.Pokemon2_Text_Rect),(self.Pokemon3_Rect,self.Pokemon3_Text,self.Pokemon3_Text_Rect),(self.Pokemon4_Rect,self.Pokemon4_Text,self.Pokemon4_Text_Rect),(self.Pokemon5_Rect,self.Pokemon5_Text,self.Pokemon5_Text_Rect),(self.Pokemon6_Rect,self.Pokemon6_Text,self.Pokemon6_Text_Rect)],"cornsilk1")
        try:
            SCREEN.blit(Poke1Able_Surf,Poke1Able_rect)
            SCREEN.blit(Poke2Able_Surf,Poke2Able_rect)
            SCREEN.blit(Poke3Able_Surf,Poke3Able_rect)
            SCREEN.blit(Poke4Able_Surf,Poke4Able_rect)
            SCREEN.blit(Poke5Able_Surf,Poke5Able_rect)
            SCREEN.blit(Poke6Able_Surf,Poke6Able_rect)
        except:pass
        if not self.AnotherMove:
            if self.Pokemon1_Rect.collidepoint(mouse_pos):
                if pygame.mouse.get_pressed()[0]:
                    self.Clicked = True
                else:
                    if self.Clicked:
                        if Poke1Able == "ABLE":
                            self.PokemonOver4Moves = self.Player.Pokemon[0]
                            if "-" in self.Player.Pokemon[0].Moves:
                                self.Player.Pokemon[0].New_move(self.GiveTm[1].Move)
                                self.GiveTm[0] = False
                                if self.GiveTm[1].Name[0:2] != "HM":self.Player.Remove_Bag(self.GiveTm[1].Name,1,False)
                            else:
                                self.AnotherMove = True
                        self.Clicked = False
            if self.Pokemon2_Rect.collidepoint(mouse_pos):
                if pygame.mouse.get_pressed()[0]:
                    self.Clicked = True
                else:
                    if self.Clicked:
                        if Poke2Able == "ABLE":
                            self.PokemonOver4Moves = self.Player.Pokemon[1]
                            if "-" in self.Player.Pokemon[1].Moves:
                                self.Player.Pokemon[1].New_move(self.GiveTm[1].Move)
                                self.GiveTm[0] = False
                                if self.GiveTm[1].Name[0:2] != "HM":self.Player.Remove_Bag(self.GiveTm[1].Name,1,False)
                            else:
                                self.AnotherMove = True
                        self.Clicked = False
            if self.Pokemon3_Rect.collidepoint(mouse_pos):
                if pygame.mouse.get_pressed()[0]:
                    self.Clicked = True
                else:
                    if self.Clicked:
                        if Poke3Able == "ABLE":
                            self.PokemonOver4Moves = self.Player.Pokemon[2]
                            if "-" in self.Player.Pokemon[2].Moves:
                                self.Player.Pokemon[2].New_move(self.GiveTm[1].Move)
                                self.GiveTm[0] = False
                                if self.GiveTm[1].Name[0:2] != "HM":self.Player.Remove_Bag(self.GiveTm[1].Name,1,False)
                            else:
                                self.AnotherMove = True
                        self.Clicked = False
            if self.Pokemon4_Rect.collidepoint(mouse_pos):
                if pygame.mouse.get_pressed()[0]:
                    self.Clicked = True
                else:
                    if self.Clicked:
                        if Poke4Able == "ABLE":
                            self.PokemonOver4Moves = self.Player.Pokemon[3]
                            if "-" in self.Player.Pokemon[3].Moves:
                                self.Player.Pokemon[3].New_move(self.GiveTm[1].Move)
                                self.GiveTm[0] = False
                                if self.GiveTm[1].Name[0:2] != "HM":self.Player.Remove_Bag(self.GiveTm[1].Name,1,False)
                            else:
                                self.AnotherMove = True
                        self.Clicked = False
            if self.Pokemon5_Rect.collidepoint(mouse_pos):
                if pygame.mouse.get_pressed()[0]:
                    self.Clicked = True
                else:
                    if self.Clicked:
                        if Poke5Able == "ABLE":
                            self.PokemonOver4Moves = self.Player.Pokemon[4]
                            if "-" in self.Player.Pokemon[4].Moves:
                                self.Player.Pokemon[4].New_move(self.GiveTm[1].Move)
                                self.GiveTm[0] = False
                                if self.GiveTm[1].Name[0:2] != "HM":self.Player.Remove_Bag(self.GiveTm[1].Name,1,False)
                            else:
                                self.AnotherMove = True
                        self.Clicked = False
            if self.Pokemon6_Rect.collidepoint(mouse_pos):
                if pygame.mouse.get_pressed()[0]:
                    self.Clicked = True
                else:
                    if self.Clicked:
                        if Poke6Able == "ABLE":
                            self.PokemonOver4Moves = self.Player.Pokemon[5]
                            if "-" in self.Player.Pokemon[5].Moves:
                                self.Player.Pokemon[5].New_move(self.GiveTm[1].Move)
                                self.GiveTm[0] = False
                                if self.GiveTm[1].Name[0:2] != "HM":self.Player.Remove_Bag(self.GiveTm[1].Name,1,False)
                            else:
                                self.AnotherMove = True
                        self.Clicked = False
        self.Pokemon_Menu_Text_surf= self.Events.Game_Font2.render(f"Move:{self.GiveTm[1].Move}",True,"Black")
        self.Pokemon_Menu_Text_rect = self.Pokemon_Menu_Text_surf.get_rect(topleft = self.Pokemon_Menu_Instrution_rect.topleft)
        SCREEN.blit(self.Pokemon_Menu_Text_surf,self.Pokemon_Menu_Text_rect)
        self.MoveDesicion = False
        if self.AnotherMove:
            self.PokemonOver4MovesLearn(self.GiveTm[1].Move)
        if self.AnotherMoveGiven:
            self.AnotherMoveGiven = False
            self.GiveTm[0] = False
            if self.GiveTm[1].Name[0:2] != "HM":self.Player.Remove_Bag(self.GiveTm[1].Name,1,False)

    def NameRater(self):
        mouse_pos = pygame.mouse.get_pos()
        SCREEN.fill("cornsilk1")
        try:
            self.Pokemon1_Text = self.Events.Game_Font2.render(self.Player.Pokemon[0].NickName,True,"Black")
            self.Pokemon1_Text_Rect = self.Pokemon1_Text.get_rect(topleft = self.Pokemon1_Rect.topleft)                                     
            self.Pokemon2_Text = self.Events.Game_Font2.render(self.Player.Pokemon[1].NickName,True,"Black")
            self.Pokemon2_Text_Rect = self.Pokemon2_Text.get_rect(topleft = self.Pokemon2_Rect.topleft)
            self.Pokemon3_Text = self.Events.Game_Font2.render(self.Player.Pokemon[2].NickName,True,"Black")
            self.Pokemon3_Text_Rect = self.Pokemon3_Text.get_rect(topleft = self.Pokemon3_Rect.topleft)
            self.Pokemon4_Text = self.Events.Game_Font2.render(self.Player.Pokemon[3].NickName,True,"Black")
            self.Pokemon4_Text_Rect = self.Pokemon4_Text.get_rect(topleft = self.Pokemon4_Rect.topleft)
            self.Pokemon5_Text = self.Events.Game_Font2.render(self.Player.Pokemon[4].NickName,True,"Black")
            self.Pokemon5_Text_Rect = self.Pokemon5_Text.get_rect(topleft = self.Pokemon5_Rect.topleft)
            self.Pokemon6_Text = self.Events.Game_Font2.render(self.Player.Pokemon[5].NickName,True,"Black")
            self.Pokemon6_Text_Rect = self.Pokemon6_Text.get_rect(topleft = self.Pokemon6_Rect.topleft)
        except:pass
        self.Show_Options2([(self.Pokemon1_Rect,self.Pokemon1_Text,self.Pokemon1_Text_Rect),(self.Pokemon2_Rect,self.Pokemon2_Text,self.Pokemon2_Text_Rect),(self.Pokemon3_Rect,self.Pokemon3_Text,self.Pokemon3_Text_Rect),(self.Pokemon4_Rect,self.Pokemon4_Text,self.Pokemon4_Text_Rect),(self.Pokemon5_Rect,self.Pokemon5_Text,self.Pokemon5_Text_Rect),(self.Pokemon6_Rect,self.Pokemon6_Text,self.Pokemon6_Text_Rect)],"cornsilk1")
        if self.Pokemon1_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if self.Player.Pokemon[0].Trainer == self.PlayerName:
                        self.ChangePokeName = self.Player.Pokemon[0]
                    self.Clicked = False
        if self.Pokemon2_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if self.Player.Pokemon[1].Trainer == self.PlayerName:
                        self.ChangePokeName = self.Player.Pokemon[1]
                    self.Clicked = False
        if self.Pokemon3_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if self.Player.Pokemon[2].Trainer == self.PlayerName:
                        self.ChangePokeName = self.Player.Pokemon[2]
                    self.Clicked = False
        if self.Pokemon4_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if self.Player.Pokemon[3].Trainer == self.PlayerName:
                        self.ChangePokeName = self.Player.Pokemon[3]
                    self.Clicked = False
        if self.Pokemon5_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if self.Player.Pokemon[4].Trainer == self.PlayerName:
                        self.ChangePokeName = self.Player.Pokemon[4]
                    self.Clicked = False
        if self.Pokemon6_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if self.Player.Pokemon[5].Trainer == self.PlayerName:
                        self.ChangePokeName = self.Player.Pokemon[5]
                    self.Clicked = False
        self.Pokemon_Menu_Text_surf= self.Events.Game_Font2.render("Pick the name you wanna change",True,"Black")
        self.Pokemon_Menu_Text_rect = self.Pokemon_Menu_Text_surf.get_rect(topleft = self.Pokemon_Menu_Instrution_rect.topleft)
        SCREEN.blit(self.Pokemon_Menu_Text_surf,self.Pokemon_Menu_Text_rect)

    def PokemonStoneMenu(self):
        mouse_pos = pygame.mouse.get_pos()
        SCREEN.fill("cornsilk1")
        try:
            self.Pokemon1_Text = self.Events.Game_Font2.render(self.Player.Pokemon[0].NickName,True,"Black")
            self.Pokemon1_Text_Rect = self.Pokemon1_Text.get_rect(topleft = self.Pokemon1_Rect.topleft)
            if self.Player.Pokemon[0].Name in self.EvoStones[0].Pokemon : Poke1Able = "ABLE"
            if not self.Player.Pokemon[0].Name in self.EvoStones[0].Pokemon:Poke1Able = "UNABLE"
            Poke1Able_Surf = self.Events.Game_Font3.render(Poke1Able,True,"Black")
            Poke1Able_rect = Poke1Able_Surf.get_rect(topright = (self.Pokemon1_Rect.topright[0] - 30,self.Pokemon1_Rect.topright[1]))                                    
            self.Pokemon2_Text = self.Events.Game_Font2.render(self.Player.Pokemon[1].NickName,True,"Black")
            self.Pokemon2_Text_Rect = self.Pokemon2_Text.get_rect(topleft = self.Pokemon2_Rect.topleft)
            if self.Player.Pokemon[1].Name in self.EvoStones[0].Pokemon: Poke2Able = "ABLE"
            elif not self.Player.Pokemon[1].Name in self.EvoStones[0].Pokemon: Poke2Able = "UNABLE"
            Poke2Able_Surf = self.Events.Game_Font3.render(Poke2Able,True,"Black")
            Poke2Able_rect = Poke2Able_Surf.get_rect(topright = (self.Pokemon2_Rect.topright[0] - 30,self.Pokemon2_Rect.topright[1]))
            self.Pokemon3_Text = self.Events.Game_Font2.render(self.Player.Pokemon[2].NickName,True,"Black")
            self.Pokemon3_Text_Rect = self.Pokemon3_Text.get_rect(topleft = self.Pokemon3_Rect.topleft)
            if self.Player.Pokemon[2].Name in self.EvoStones[0].Pokemon: Poke3Able = "ABLE"
            elif not self.Player.Pokemon[2].Name in self.EvoStones[0].Pokemon:Poke3Able = "UNABLE"
            Poke3Able_Surf = self.Events.Game_Font3.render(Poke3Able,True,"Black")
            Poke3Able_rect = Poke3Able_Surf.get_rect(topright = (self.Pokemon3_Rect.topright[0] - 30,self.Pokemon3_Rect.topright[1]))
            self.Pokemon4_Text = self.Events.Game_Font2.render(self.Player.Pokemon[3].NickName,True,"Black")
            self.Pokemon4_Text_Rect = self.Pokemon4_Text.get_rect(topleft = self.Pokemon4_Rect.topleft)
            if self.Player.Pokemon[3].Name in self.EvoStones[0].Pokemon: Poke4Able = "ABLE"
            elif not self.Player.Pokemon[3].Name in self.EvoStones[0].Pokemon:Poke4Able = "UNABLE"
            Poke4Able_Surf = self.Events.Game_Font3.render(Poke4Able,True,"Black")
            Poke4Able_rect = Poke4Able_Surf.get_rect(topright = (self.Pokemon4_Rect.topright[0] - 30,self.Pokemon4_Rect.topright[1]))
            self.Pokemon5_Text = self.Events.Game_Font2.render(self.Player.Pokemon[4].NickName,True,"Black")
            self.Pokemon5_Text_Rect = self.Pokemon5_Text.get_rect(topleft = self.Pokemon5_Rect.topleft)
            if self.Player.Pokemon[4].Name in self.EvoStones[0].Pokemon: Poke5Able = "ABLE"
            elif not self.Player.Pokemon[4].Name in self.EvoStones[0].Pokemon:Poke5Able = "UNABLE"
            Poke5Able_Surf = self.Events.Game_Font3.render(Poke5Able,True,"Black")
            Poke5Able_rect = Poke5Able_Surf.get_rect(topright = (self.Pokemon5_Rect.topright[0] - 30,self.Pokemon5_Rect.topright[1]))
            self.Pokemon6_Text = self.Events.Game_Font2.render(self.Player.Pokemon[5].NickName,True,"Black")
            self.Pokemon6_Text_Rect = self.Pokemon6_Text.get_rect(topleft = self.Pokemon6_Rect.topleft)
            if self.Player.Pokemon[5].Name in self.EvoStones[0].Pokemon: Poke6Able = "ABLE"
            elif not self.Player.Pokemon[5].Name in self.EvoStones[0].Pokemon:Poke6Able = "UNABLE"
            Poke6Able_Surf = self.Events.Game_Font3.render(Poke6Able,True,"Black")
            Poke6Able_rect = Poke6Able_Surf.get_rect(topright = (self.Pokemon6_Rect.topright[0] - 30,self.Pokemon6_Rect.topright[1]))
        except:pass
        self.Show_Options2([(self.Pokemon1_Rect,self.Pokemon1_Text,self.Pokemon1_Text_Rect),(self.Pokemon2_Rect,self.Pokemon2_Text,self.Pokemon2_Text_Rect),(self.Pokemon3_Rect,self.Pokemon3_Text,self.Pokemon3_Text_Rect),(self.Pokemon4_Rect,self.Pokemon4_Text,self.Pokemon4_Text_Rect),(self.Pokemon5_Rect,self.Pokemon5_Text,self.Pokemon5_Text_Rect),(self.Pokemon6_Rect,self.Pokemon6_Text,self.Pokemon6_Text_Rect)],"cornsilk1")
        try:
            SCREEN.blit(Poke1Able_Surf,Poke1Able_rect)
            SCREEN.blit(Poke2Able_Surf,Poke2Able_rect)
            SCREEN.blit(Poke3Able_Surf,Poke3Able_rect)
            SCREEN.blit(Poke4Able_Surf,Poke4Able_rect)
            SCREEN.blit(Poke5Able_Surf,Poke5Able_rect)
            SCREEN.blit(Poke6Able_Surf,Poke6Able_rect)
        except:pass
        if self.Pokemon1_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if Poke1Able == "ABLE":
                        self.EvolvingPokemon = self.Player.Pokemon[0]
                        if self.EvolvingPokemon.Name == "Eevee":
                            if self.EvoStones[0].Name == "Fire Stone":self.EvolvingPokemon.NextStage = [101,"Flareon"]
                            elif self.EvoStones[0].Name == "Thunder Stone":self.EvolvingPokemon.NextStage = [101,"Jolteon"]
                            elif self.EvoStones[0].Name == "Water Stone":self.EvolvingPokemon.NextStage = [101,"Vaporeon"]
                        self.PokeEvolutionStart = True
                        self.EvolvingPokemonStep1 = True
                    self.Clicked = False
        if self.Pokemon2_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if Poke2Able == "ABLE":
                        self.EvolvingPokemon = self.Player.Pokemon[1]
                        if self.EvolvingPokemon.Name == "Eevee":
                            if self.EvoStones[0].Name == "Fire Stone":self.EvolvingPokemon.NextStage = [101,"Flareon"]
                            elif self.EvoStones[0].Name == "Thunder Stone":self.EvolvingPokemon.NextStage = [101,"Jolteon"]
                            elif self.EvoStones[0].Name == "Water Stone":self.EvolvingPokemon.NextStage = [101,"Vaporeon"]
                        self.EvolvingPokemonStep1 = True
                        self.PokeEvolutionStart = True
                    self.Clicked = False
        if self.Pokemon3_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if Poke3Able == "ABLE":
                        self.EvolvingPokemon = self.Player.Pokemon[2]
                        if self.EvolvingPokemon.Name == "Eevee":
                            if self.EvoStones[0].Name == "Fire Stone":self.EvolvingPokemon.NextStage = [101,"Flareon"]
                            elif self.EvoStones[0].Name == "Thunder Stone":self.EvolvingPokemon.NextStage = [101,"Jolteon"]
                            elif self.EvoStones[0].Name == "Water Stone":self.EvolvingPokemon.NextStage = [101,"Vaporeon"]
                        self.PokeEvolutionStart = True
                        self.EvolvingPokemonStep1 = True
                    self.Clicked = False
        if self.Pokemon4_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if Poke4Able == "ABLE":
                        self.EvolvingPokemon = self.Player.Pokemon[3]
                        if self.EvolvingPokemon.Name == "Eevee":
                            if self.EvoStones[0].Name == "Fire Stone":self.EvolvingPokemon.NextStage = [101,"Flareon"]
                            elif self.EvoStones[0].Name == "Thunder Stone":self.EvolvingPokemon.NextStage = [101,"Jolteon"]
                            elif self.EvoStones[0].Name == "Water Stone":self.EvolvingPokemon.NextStage = [101,"Vaporeon"]
                        self.PokeEvolutionStart = True
                        self.EvolvingPokemonStep1 = True
                    self.Clicked = False
        if self.Pokemon5_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if Poke5Able == "ABLE":
                        self.EvolvingPokemon = self.Player.Pokemon[4]
                        if self.EvolvingPokemon.Name == "Eevee":
                            if self.EvoStones[0].Name == "Fire Stone":self.EvolvingPokemon.NextStage = [101,"Flareon"]
                            elif self.EvoStones[0].Name == "Thunder Stone":self.EvolvingPokemon.NextStage = [101,"Jolteon"]
                            elif self.EvoStones[0].Name == "Water Stone":self.EvolvingPokemon.NextStage = [101,"Vaporeon"]
                        self.PokeEvolutionStart = True
                        self.EvolvingPokemonStep1 = True
                    self.Clicked = False
        if self.Pokemon6_Rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    if Poke6Able == "ABLE":
                        self.EvolvingPokemon = self.Player.Pokemon[5]
                        if self.EvolvingPokemon.Name == "Eevee":
                            if self.EvoStones[0].Name == "Fire Stone":self.EvolvingPokemon.NextStage = [101,"Flareon"]
                            elif self.EvoStones[0].Name == "Thunder Stone":self.EvolvingPokemon.NextStage = [101,"Jolteon"]
                            elif self.EvoStones[0].Name == "Water Stone":self.EvolvingPokemon.NextStage = [101,"Vaporeon"]
                        self.PokeEvolutionStart = True
                        self.EvolvingPokemonStep1 = True
                    self.Clicked = False
        self.Pokemon_Menu_Text_surf= self.Events.Game_Font2.render(f"Stone:{self.EvoStones[0].Name}",True,"Black")
        self.Pokemon_Menu_Text_rect = self.Pokemon_Menu_Text_surf.get_rect(topleft = self.Pokemon_Menu_Instrution_rect.topleft)
        SCREEN.blit(self.Pokemon_Menu_Text_surf,self.Pokemon_Menu_Text_rect)
        if self.PokeEvolutionStart:
            self.PokemonEvolution()
        if self.EvolvingPokemonDone:
            self.EvolvingPokemonDone = False
            self.EvoStones[1] = False
            self.Player.Remove_Bag(self.EvoStones[0].Name,1,False)

    def PlayerBag(self): 
        self.PCItemsUpdate()
        mouse_pos = pygame.mouse.get_pos()
        self.BagTitle =  self.Events.Game_Font2.render(f"{self.PlayerName}'s Bag",True,"Black")
        self.BagTitle_rect = self.BagTitle.get_rect(topleft = (0,0))
        SCREEN.fill("cornsilk1")
        SCREEN.blit(self.BagTitle,self.BagTitle_rect)
        self.Back_Rect,self.Back_Text,self.Back_Text_Rect = self.Make_Option_Button(pygame.Rect(500,50,50,50),"Back")
        pygame.draw.rect(SCREEN,"cornsilk1",self.Back_Rect)
        SCREEN.blit(self.Back_Text,self.Back_Text_Rect)
        self.CC_Back()
        for Rect,Text_Surf,Text_Rect,Amount_surf,Amount_rect,Text in self.Bag:
            pygame.draw.rect(SCREEN,"cornsilk1",Rect)
            SCREEN.blit(Text_Surf,Text_Rect)
            SCREEN.blit(Amount_surf,Amount_rect)
            if Rect.collidepoint(mouse_pos):
                if pygame.mouse.get_pressed()[0]:
                    self.Clicked = True
                else:
                    if self.Clicked:
                        self.Clicked = False
                        self.Use_Bag_Item(Text)

    def Use_Item_on_Pokemon(self):
        if self.Healing_Item[1] or self.Stat_Item[1] or (self.PPItems[1] and not self.PPItems[2]):
            if self.Back:
                self.Healing_Item[1] = False
                self.Stat_Item[1] = False
                self.PPItems[1] = False
                self.Back = False 
            self.Pokemon_Menu()

    def MenuOptions(self):
        mouse_pos = pygame.mouse.get_pos()
        if self.MenuOption1:
            self.Pokemon_Menu()
            if self.Back:
                self.MenuOption1 = False
                self.Back = False   
                self.Pokemon1,self.Pokemon2,self.Pokemon3,self.Pokemon4,self.Pokemon5,self.Pokemon6 = False,False,False,False,False,False
                self.Clicked = False   
        elif self.MenuOption2:
            if True not in (self.Healing_Item[1],self.PlayerMapDisplay,self.Catching[0],self.GiveTm[0],self.Stat_Item[1],self.EvoStones[1],self.RepelOn[0],self.PPItems[1]):
                self.PlayerBag()
            self.Use_Item_on_Pokemon()
            if self.Back:
                if self.Healing_Item[1]: self.Healing_Item[1] = False
                if self.GiveTm[0]:self.GiveTm[0] = False
                else:
                    self.MenuOption2 = False
                    self.Back = False
        elif self.MenuOption3:
            self.Back_Rect,self.Back_Text,self.Back_Text_Rect = self.Make_Option_Button(pygame.Rect(500,50,50,50),"Back")
            self.CC_Back()
            if self.Back:
                self.MenuOption3 = False
                self.Back = False
            self.Badge_Display_update()
            SCREEN.fill("cornsilk1")
            pygame.draw.rect(SCREEN,"cornsilk1",self.Back_Rect)
            SCREEN.blit(self.Back_Text,self.Back_Text_Rect)
            Name_surf = self.Events.Game_font.render(f"Name/{self.PlayerName}",True,"Black")
            Name_rect = Name_surf.get_rect(center = (SCREEN.get_width()//2,50))
            Money_surf = self.Events.Game_font.render(f"Money/{self.Player.Money}",True,"Black")
            Money_rect = Money_surf.get_rect(center = (SCREEN.get_width()//2,250))
            Badges_surf = self.Events.Game_font.render("Badges",True,"Black")
            Badges_rect = Badges_surf.get_rect(center = (SCREEN.get_width()//2,300)) 
            SCREEN.blit(Name_surf,Name_rect)
            SCREEN.blit(Money_surf,Money_rect)
            SCREEN.blit(Badges_surf,Badges_rect)
            for rect,Text_Surf,Text_Rect,Color,r in self.Badges:
                pygame.draw.rect(SCREEN,Color,rect)
                SCREEN.blit(Text_Surf,Text_Rect)
        elif self.MenuOption4:
            self.Save()
            self.MenuOption4 = False

    def MissedTurn(self):
        if self.Opponents_Pokemon.Trainer == "Wild":
            self.Opponents_Pokemon.Attack = random.choice(self.Opponents_Pokemon.Moves)
            while self.Opponents_Pokemon.Attack == "-": self.Opponents_Pokemon.Attack = random.choice(self.Opponents_Pokemon.Moves)
            self.Opponents_Pokemon.Get_Move(self.Opponents_Pokemon,self.BattlePlayerPoke)
            self.Opponents_Pokemon.TargetHP = self.Opponents_Pokemon.HP - self.BattlePlayerPoke.AttackDamage
            self.BattlePlayerPoke.TargetHP = self.BattlePlayerPoke.HP - self.Opponents_Pokemon.AttackDamage
            self.Player_Turn[1] = "Done"
        else:
            self.BattlePlayerPoke.MoveTurn = "Bag"

    def OtherPriorityFactors(self):
        if self.Opponents_Pokemon.MoveTurn == "Attack" and self.BattlePlayerPoke.MoveTurn == "Attack":
            if self.BattlePlayerPoke.MovePriority > self.Opponents_Pokemon.MovePriority:
                self.Player_Turn[1] = "Move Call"
                self.Player_Turn[0] = 1
                self.Enemy_Turn[0] = 2
                self.Enemy_Turn[1] = "Waiting"
            elif self.BattlePlayerPoke.MovePriority < self.Opponents_Pokemon.MovePriority:
                self.Enemy_Turn[1] = "Move Call"
                self.Enemy_Turn[0] = 1
                self.Player_Turn[0] = 2
                self.Player_Turn[1] = "Waiting"
        elif self.Opponents_Pokemon.MoveTurn == "Bag" and self.BattlePlayerPoke.MoveTurn == "Attack":
            self.Enemy_Turn[1] = "Move Aftermath"
            self.Enemy_Turn[0] = 1
            self.Player_Turn[0] = 2
            self.Player_Turn[1] = "Waiting"
        elif self.BattlePlayerPoke.MoveTurn == "Bag" and self.Opponents_Pokemon.MoveTurn == "Attack":
            self.Player_Turn[1] = "Done"
            self.Player_Turn[0] = 1
            self.Enemy_Turn[0] = 2
            self.Enemy_Turn[1] = "Move Call"
        elif self.BattlePlayerPoke.MoveTurn == "Bag" and self.Opponents_Pokemon.MoveTurn == "Bag":
            self.Player_Turn[1] = "Done"
            self.Player_Turn[0] = 1
            self.Enemy_Turn[0] = 2
            self.Enemy_Turn[1] = "Move Aftermath"
        elif self.BattlePlayerPoke.MoveTurn == "Switch" and self.Opponents_Pokemon.MoveTurn == "Attack":
            self.Player_Turn[1] = "Done"
            self.Player_Turn[0] = 1
            self.Enemy_Turn[0] = 2
            self.Enemy_Turn[1] = "Move Call"

    def Multiple_Ins(self,Ins):
        for i in Ins:
            if i in self.Events.Stage: return True
        return False
    
    def Escape_Rope_req(self) -> bool:
        if self.Multiple_Ins(["Mt.Moon","Rock Tunnel","PokeTower","Rocket Hideout","Diglett's Cave","Silph Co.","Victory Road","SeaFoam Islands","Cerulean Cave"]):
            return True
        else:return False

    def Use_Bag_Item(self,Item:str):
        if True not in (self.Healing_Item[1],self.PlayerMapDisplay,self.Catching[0],self.GiveTm[0],self.Stat_Item[1],self.EvoStones[1],self.RepelOn[0],self.PPItems[1]):
            if not self.BattleStart and not self.WildBattle:
                if Item[0:2] in ("TM","HM"):self.GiveTm = [True,Get_TM(Item)]
                elif Item == "Map": self.PlayerMapDisplay = True
                elif Item == "Bike":
                    if self.Events.Stage in self.Player.BikeLocations:
                        self.Player.Bike = not(self.Player.Bike)
                        self.MenuOption2 = False
                        self.Player.Menu = False
                        self.Player_Pause = False
                        self.DialougePause = False
                elif Item == "Escape Rope":
                    if self.Escape_Rope_req():
                        self.Events.Stage = self.Healplace[0]
                        self.Player.rect.center = self.Healplace[1]
                        self.Player.Remove_Bag("Escape Rope",1,False)
                        self.MenuOption2 = False
                        self.Player.Menu = False
                        self.Player_Pause = False
                        self.DialougePause = False
                elif Item in ("HP UP","Rare Candy","Protein","Iron","Carbos","Calcium"):self.Stat_Item = [Item,True]
                elif "Stone" in Item: self.EvoStones = [Get_Stone(Item),True]
                elif Item == "Elixir":self.Healing_Item = [Item,True]
                elif Item == "ItemFinder":
                    self.Player.ItemFinderPing = True
                    self.Player_Pause = True
                    self.MenuOption2 = False
                    self.Player.Menu = False
                elif "Rod" in Item: 
                    if self.Player.Fishing:
                        if Item in ("Old Rod","Good Rod","Super Rod"):self.Player.FishCaught = True
                        self.Player.Fishing_Rod = Item
                        self.MenuOption2 = False
                        self.Player.Menu = False
                        self.Events.FishingCutscene = True
                elif "Repel" in Item:
                    if Item == "Repel":self.RepelOn = [True,Item,100]
                    elif Item == "Super Repel":self.RepelOn = [True,Item,200]
                    elif Item == "Max Repel":self.RepelOn = [True,Item,250]
                    self.Player.Remove_Bag(Item,1)
            if Item in ("Potion","Fresh Water","Soda Pop","Lemonade","Antidote","Awakening","Parlyz Heal","Burn Heal","Super Potion","Ice Heal","Max Potion","Hyper Potion","Revive","Full Restore","Max Revive","Max Elixir","Full Heal"): self.Healing_Item = [Item,True]
            if Item in ("Ether","Max Ether","PP Up"): self.PPItems = [Item,True,False]
            if Item in ("Poke Ball","Great Ball") and self.BattleStart:  self.Catching = [True,Item]
            if Item == "Dire Hit":
                self.Player.Remove_Bag("Dire Hit",1,False)
                self.BattlePlayerPoke.FocusEnergy = True
                self.MissedTurn()
                self.BattleItems = False
            if Item == "Guard Spec":
                self.Player.Remove_Bag("Guard Spec",1,False)
                self.BattlePlayerPoke.StatProtect = True
                self.MissedTurn()
                self.BattleItems = False
            if Item[0] == "X":
                if Item == "X Special" and self.BattlePlayerPoke.SPECIALCounter < 6:
                    self.BattlePlayerPoke.SPECIALCounter += 1
                    self.Player.Remove_Bag("X Special",1,False)
                    self.MissedTurn()
                    self.BattleItems = False
                elif Item == "X Attack" and self.BattlePlayerPoke.AtkCounter < 6:
                    self.BattlePlayerPoke.AtkCounter += 1
                    self.Player.Remove_Bag("X Attack",1,False)
                    self.MissedTurn()
                    self.BattleItems = False
                elif Item == "X Defense" and self.BattlePlayerPoke.DEFCounter  < 6:
                    self.BattlePlayerPoke.DEFCounter  += 1
                    self.Player.Remove_Bag("X Defense",1,False)
                    self.MissedTurn()
                    self.BattleItems = False
                elif Item == "X Speed" and self.BattlePlayerPoke.SPEEDCounter  < 6:
                    self.BattlePlayerPoke.SPEEDCounter  += 1
                    self.Player.Remove_Bag("X Speed",1,False)
                    self.MissedTurn()
                    self.BattleItems = False
                elif Item == "X Accuracy" and self.BattlePlayerPoke.ACCURACYCounter  < 6:
                    self.BattlePlayerPoke.ACCURACYCounter  += 1
                    self.Player.Remove_Bag("X Accuracy",1,False)
                    self.MissedTurn()
                    self.BattleItems = False
            if self.WildBattle:
                if Item == "Poke Doll":
                    self.Player.Remove_Bag("Poke Doll",1,False)
                    self.PokeDollUsed = True
                    self.Run = True

    def ItemFinderSearch(self,Items:list):
        self.Player.ItemFinderUsed = True
        for Hidden in Items:
            if not Hidden.Picked:
                if self.Player.ItemFinderArea.colliderect(Hidden.Rect):
                    self.Player.ItemFound = True
                    return None
        self.Player.ItemFound = False

    def Wild_Encounters(self,Tiles:list):
        if self.Player.Pokemon:
            if self.RepelOn[0] and self.Player.IsWalking():
                self.RepelOn[2] -= 1
            for Tile in Tiles:
                if Tile.Patch.contains(self.Player.rect) and (self.Player.IsWalking()):
                    T = random.randint(Tile.Low_Chance,Tile.High_CHance)
                    P = random.randint(0,1020)
                    if P < T: 
                        self.Opponents_Pokemon = Tile.WildPokemon
                        if self.RepelOn[0]:
                            if self.Opponents_Pokemon.Level > self.Player.Pokemon[0].Level:
                                self.WildBattle = True
                        else:self.WildBattle = True
                        break

    def CC_PokedexOptions(self):
        mouse_pos = pygame.mouse.get_pos()
        if self.PokeDexNext_rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked: 
                    self.PokeDexIndex += 1
                    if self.PokeDexIndex >= len(self.Pokemon_Seen): self.PokeDexIndex = 0
                    self.Clicked = False
        if self.PokeDexPrev_rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked: 
                    self.PokeDexIndex -= 1
                    if self.PokeDexIndex < 0: self.PokeDexIndex = len(self.Pokemon_Seen) - 1
                    self.Clicked = False
        if self.PokeDexBack_rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked: 
                    self.Player.ShowDex = False
                    self.Player.Moveable = True                
                    self.Player_Pause = False
                    self.Clicked = False

    def CC_StoreSettings(self):
        if self.Buy_Rect.collidepoint(pygame.mouse.get_pos()):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.Buy = True
                    self.Sell = False
                    self.Clicked = False       
        if self.Sell_Rect.collidepoint(pygame.mouse.get_pos()):
            if pygame.mouse.get_pressed()[0]:
                self.Clicked = True
            else:
                if self.Clicked:
                    self.Sell = True
                    self.Buy = False
                    self.Clicked = False

    def Shop_Items(self,Items:list[list[str]],Type:str = "Store"):
        Rect = pygame.Rect(0,0,100,100)
        Empty_list = []
        y = 160
        for Index,items in enumerate(Items):
            if Index < 5:
                y = 160
            elif 5 <= Index < 10:
                y = 320
                Index -= 5
            elif 10 <= Index < 15:
                y = 480
                Index -= 10
            elif 15 <= Index < 20:
                y = 640
                Index -= 15
            Rect.topleft = ((800//5)*Index,y)
            Text_Surf = self.Events.Game_font.render(items[0],True,"Black")
            Text_Rect = Text_Surf.get_rect(center= Rect.center)     
            if Type == "Bag":
                if items[0] in Key_Items:Amount_surf = self.Events.Game_font.render("Key Item",True,"Black")
                else:
                    if items[2] < self.ItemTaker:Amount_surf = self.Events.Game_font.render(f"${items[1]*items[2]}",True,"Black")
                    else: Amount_surf = self.Events.Game_font.render(f"${items[1]*self.ItemTaker}",True,"Black")
                Amount_rect = Amount_surf.get_rect(midbottom = Rect.midbottom)
                Stock_surf = self.Events.Game_Font3.render(f"x{items[2]}",True,"Black")
                Stock_rect = Stock_surf.get_rect(topleft = Rect.topleft)
                Empty_list.append((pygame.Rect(Rect.topleft,(100,100)),Text_Surf,Text_Rect,Amount_surf,Amount_rect,items,Stock_surf,Stock_rect))
            else:
                Amount_surf = self.Events.Game_font.render(f"${items[1]*self.ItemTaker}",True,"Black")
                Amount_rect = Amount_surf.get_rect(midbottom = Rect.midbottom)
                Empty_list.append((pygame.Rect(Rect.topleft,(100,100)),Text_Surf,Text_Rect,Amount_surf,Amount_rect,items))
        return Empty_list

    def Merchant_Store(self,Items_To_Buy:list[str]):
        SCREEN.fill("cornsilk1")
        if self.Buy:
            self.Show_Options1([(self.Buy_Rect,self.Buy_Text,self.Buy_Text_rect),(self.Sell_Rect,self.Sell_Text,self.Sell_Text_rect)],"cornsilk1")
            self.CC_StoreSettings()
            self.ItemTakerSettings()
            Money_Surf = self.Events.Game_font.render(f"${self.Player.Money}",True,"Black")
            Money_Rect = Money_Surf.get_rect(topleft = (479,96))
            SCREEN.blit(Money_Surf,Money_Rect)
            Items = self.Shop_Items(Items_To_Buy)
            for Rect,Text_Surf,Text_Rect,Amount_surf,Amount_rect,Item in Items:
                pygame.draw.rect(SCREEN,"cornsilk1",Rect)
                SCREEN.blit(Text_Surf,Text_Rect)
                SCREEN.blit(Amount_surf,Amount_rect)
                if Rect.collidepoint(pygame.mouse.get_pos()):
                    if pygame.mouse.get_pressed()[0]:
                        self.Clicked = True
                    else:
                        if self.Clicked:
                            self.Player.Purchase(Item[0],self.ItemTaker,Item[1])
                            self.Clicked = False
        if self.Sell:
            self.Show_Options1([(self.Buy_Rect,self.Buy_Text,self.Buy_Text_rect),(self.Sell_Rect,self.Sell_Text,self.Sell_Text_rect)],"cornsilk1")
            self.CC_StoreSettings()
            self.ItemTakerSettings()
            Money_Surf = self.Events.Game_font.render(f"${self.Player.Money}",True,"Black")
            Money_Rect = Money_Surf.get_rect(topleft = (479,96))
            SCREEN.blit(Money_Surf,Money_Rect)
            Items = self.Shop_Items(self.Player.Get_PriceForBag(),"Bag")
            for Rect,Text_Surf,Text_Rect,Amount_surf,Amount_rect,Item,Stock_surf,Stock_rect in Items:
                pygame.draw.rect(SCREEN,"cornsilk1",Rect)
                SCREEN.blit(Text_Surf,Text_Rect)
                SCREEN.blit(Amount_surf,Amount_rect)
                SCREEN.blit(Stock_surf,Stock_rect)
                if Rect.collidepoint(pygame.mouse.get_pos()):
                    if pygame.mouse.get_pressed()[0]:
                        self.Clicked = True
                    else:
                        if self.Clicked:
                            if Item[0] not in Key_Items:
                                if self.ItemTaker > Item[2]:self.Player.Sell(Item[0],Item[2])
                                else:self.Player.Sell(Item[0],self.ItemTaker)
                            self.Clicked = False

    def Prize_Booth_Store(self,Desk:pygame.Rect,Items_To_Buy:list[str]):
        if self.Player.rect.colliderect(Desk):
            if not Two_D_ListCheck(self.Player.Bag,"Coin Case"):
                self.Events.Dialouge("You need a coin case to buy prizes")
            else:
                self.Interact("Do you wanna buy something")
                if self.Yes:
                    SCREEN.fill("cornsilk1")
                    self.Player_Pause = True
                    if self.Back:
                        self.Player_Pause = False
                        self.Yes = False
                    Money_Surf = self.Events.Game_font.render(f"Coins: {self.Player.Coins}",True,"Black")
                    Money_Rect = Money_Surf.get_rect(topleft = (479,96))
                    SCREEN.blit(Money_Surf,Money_Rect)
                    Items = self.Shop_Items(Items_To_Buy)
                    for Rect,Text_Surf,Text_Rect,Amount_surf,Amount_rect,Item in Items:
                        pygame.draw.rect(SCREEN,"cornsilk1",Rect)
                        SCREEN.blit(Text_Surf,Text_Rect)
                        SCREEN.blit(Amount_surf,Amount_rect)
                        if Rect.collidepoint(pygame.mouse.get_pos()):
                            if pygame.mouse.get_pressed()[0]:
                                self.Clicked = True
                            else:
                                if self.Clicked:
                                    if Item[0] == "Abra":self.Player.Purchase_from_PrizeBooth(Pokemon("Abra",9,["Teleport"],self.PlayerName,"Abra"),Item[1],"Pokemon")
                                    elif Item[0] == "Clefairy":self.Player.Purchase_from_PrizeBooth(Pokemon("Clefairy",12,["Pound","Growl"],self.PlayerName,"Clefairy"),Item[1],"Pokemon")
                                    elif Item[0] == "Nidorino":self.Player.Purchase_from_PrizeBooth(Pokemon("Nidorino",17,["Leer","Tackle","Horn Attack","Poison Sting"],self.PlayerName,"Nidorino"),Item[1],"Pokemon")
                                    elif Item[0] == "Pinsir":self.Player.Purchase_from_PrizeBooth(Pokemon("Pinsir",20,["ViceGrip"],self.PlayerName,"Pinsir"),Item[1],"Pokemon")
                                    elif Item[0] == "Dratini":self.Player.Purchase_from_PrizeBooth(Pokemon("Dratini",24,["Wrap","Leer","Thunder Wave","Agility"],self.PlayerName,"Dratini"),Item[1],"Pokemon")
                                    elif Item[0] == "Porygon":self.Player.Purchase_from_PrizeBooth(Pokemon("Porygon",18,["Tackle","Sharpen","Conversion"],self.PlayerName,"Porygon"),Item[1],"Pokemon")
                                    else:self.Player.Purchase_from_PrizeBooth(Item[0],Item[1])
                                    self.Clicked = False

    def VendingMachines(self,Machine:pygame.Rect):
        if self.Player.rect.colliderect(Machine):
            self.Interact("Oh look a Vending Machine! Wanna buy something")
            if self.Yes:
                SCREEN.fill("cornsilk1")
                self.Player_Pause = True
                if self.Back:
                    self.Player_Pause = False
                    self.Yes = False
                Money_Surf = self.Events.Game_font.render(f"Money: ${self.Player.Money}",True,"Black")
                Money_Rect = Money_Surf.get_rect(topleft = (479,96))
                SCREEN.blit(Money_Surf,Money_Rect)
                Items = self.Shop_Items([("Fresh Water",200),("Soda Pop",300),("Lemonade",350)])
                for Rect,Text_Surf,Text_Rect,Amount_surf,Amount_rect,Item in Items:
                    pygame.draw.rect(SCREEN,"cornsilk1",Rect)
                    SCREEN.blit(Text_Surf,Text_Rect)
                    SCREEN.blit(Amount_surf,Amount_rect)
                    if Rect.collidepoint(pygame.mouse.get_pos()):
                        if pygame.mouse.get_pressed()[0]:
                            self.Clicked = True
                        else:
                            if self.Clicked:
                                self.Player.Purchase(Item[0],1,Item[1])
                                self.Clicked = False

    def CEDeptStore(self,Items_To_Buy:list[str],Desk:pygame.Rect):
        if self.Player.rect.colliderect(Desk):
            self.Interact("Hi, Would you like to buy something?")
            if self.Yes:
                self.Merchant_Store(Items_To_Buy)
                self.Player_Pause = True
                if self.Back:
                    self.Yes = False
                    self.Back = False
                    self.Player_Pause = False

    def CatchPokemon(self):
        Wobble = 3
        s = 0
        S = 0
        if self.Catching[1] == "Poke Ball":Ball = 12
        if self.Catching[1] == "Great Ball":Ball = 8
        if self.Catching[1] in ("Ultra Ball","Safari Ball"):Ball = 4
        if self.Events.PokeTowerGhostFight: return False,0
        d = round((self.Opponents_Pokemon.CatchRate * 100)/Ball)
        f = round((self.Opponents_Pokemon.MAXHP * 255 * 4)/(self.Opponents_Pokemon.HP * Ball))
        M = random.randint(0,255)
        if self.Opponents_Pokemon.Status in ("SLP","FRZ"): s = 10
        if self.Opponents_Pokemon.Status in ("PAR","BRN","PSN"): s = 5
        if self.Opponents_Pokemon.Status == "OK": s = 0
        if d >= 256: Wobble = 3
        if d < 256:
            x = round((d * f)/255) + s
            if x < 70: Wobble = 2
            if x < 30: Wobble = 1
            if x < 10: Wobble = 0
            else: Wobble = 3
        if self.Catching[1] == "Master Ball":return True,3
        if self.Catching[1] == "Poke Ball":N = random.randint(0,255)
        if self.Catching[1] == "Great Ball": N = random.randint(0,200)
        if self.Catching[1] in ("Ultra Ball","Safari Ball"): N = random.randint(0,150)
        if self.Opponents_Pokemon.Status != "OK":
            if self.Opponents_Pokemon.Status in ("SLP","FRZ") and N < 25:
                S = 25
                return True,3
            if self.Opponents_Pokemon.Status in ("PAR","BRN","PSN") and N < 12:
                S = 12
                return True,3
            if N - S > self.Opponents_Pokemon.CatchRate: return False,Wobble
            if f >= M: return False,Wobble
            if f < M:return True,3
        if self.Opponents_Pokemon.Status == "OK":
            if f >= M: return True,3
            else: return False,Wobble
    
    def PokeMartItems(self):
        if self.Events.OverworldLocation == "Viridian City":
            self.Kanto.PokeMartClerk.Store = [["Poke Ball",200],["Antidote",100],["Parlyz Heal",200],["Burn Heal",250]]
        elif self.Events.OverworldLocation == "Pewter City":
            self.Kanto.PokeMartClerk.Store = [["Poke Ball",200],["Potion",300],["Escape Rope",550],["Antidote",100],["Awakening",200],["Parlyz Heal",200],["Burn Heal",250]]
        elif self.Events.OverworldLocation == "Cerulean City":
            self.Kanto.PokeMartClerk.Store = [["Poke Ball",200],["Potion",300],["Repel",350],["Antidote",100],["Awakening",200],["Parlyz Heal",200],["Burn Heal",250]]
        elif self.Events.OverworldLocation == "Vermilion City":
            self.Kanto.PokeMartClerk.Store = [["Poke Ball",200],["Super Potion",700],["Repel",350],["Awakening",200],["Parlyz Heal",200],["Ice Heal",250]]
        elif self.Events.OverworldLocation == "Lavender Town":
            self.Kanto.PokeMartClerk.Store = [["Great Ball",600],["Super Potion",700],["Revive",1500],["Escape Rope",550],["Super Repel",500],["Antidote",100],["Parlyz Heal",200],["Burn Heal",250],["Ice Heal",250]]
        elif self.Events.OverworldLocation == "Fuchsia City":
            self.Kanto.PokeMartClerk.Store = [["Great Ball",600],["Ultra Ball",1200],["Super Potion",700],["Revive",1500],["Full Heal",600],["Super Repel",500]]
        elif self.Events.OverworldLocation == "Saffron City":
            self.Kanto.PokeMartClerk.Store = [["Great Ball",600],["Escape Rope",550],["Hyper Potion",1500],["Revive",1500],["Full Heal",600],["Max Repel",700]]
        elif self.Events.OverworldLocation == "Cinnabar Island":
            self.Kanto.PokeMartClerk.Store = [["Ultra Ball",1200],["Great Ball",600],["Escape Rope",550],["Hyper Potion",1500],["Revive",1500],["Full Heal",600],["Max Repel",700]]

    def PokeDex(self):
        if self.Events.HasPokeballs:
            if self.Player.ShowDex:
                self.Player.Moveable = False
                self.Player_Pause = True
                SCREEN.fill("White")
                self.Show_Options1([(self.PokeDexNext_rect,self.PokeDexNext_Text,self.PokeDexNext_Text_rect),(self.PokeDexPrev_rect,self.PokeDexPrev_Text,self.PokeDexPrev_Text_rect),(self.PokeDexBack_rect,self.PokeDexBack_Text,self.PokeDexBack_Text_rect)])
                self.CC_PokedexOptions()
                Pokedex_Title = self.Events.Game_Font2.render(f"{self.PlayerName}'s PokeDex",True,"Black")
                Pokedex_Title_rect = Pokedex_Title.get_rect(topleft = (280,0))
                SCREEN.blit(Pokedex_Title,Pokedex_Title_rect)
                Pokedex_PokemonName = self.Pokemon_Seen[self.PokeDexIndex]
                Pokedex_Pokemon_Name_surf = self.Events.Game_Font2.render(Pokedex_PokemonName,True,"Black")
                Pokedex_Pokemon_Name_rect = Pokedex_Pokemon_Name_surf.get_rect(center = (SCREEN.get_width()//2,100))
                SCREEN.blit(Pokedex_Pokemon_Name_surf,Pokedex_Pokemon_Name_rect)
                Pokedex_PokemonFront = pygame.image.load(f"Pokemon_imgs/{Pokedex_PokemonName}_Front.png").convert_alpha()
                Pokedex_PokemonFront_rect = Pokedex_PokemonFront.get_rect(topleft = (SCREEN.get_width()//2 - 50,300))
                SCREEN.blit(Pokedex_PokemonFront,Pokedex_PokemonFront_rect)
                if Pokedex_PokemonName in self.Pokemon_Caught: pygame.draw.circle(SCREEN,"Red",(Pokedex_Pokemon_Name_rect.x - 30,Pokedex_Pokemon_Name_rect.centery),15)
                if Pokedex_PokemonName not in self.Pokemon_Caught: pygame.draw.circle(SCREEN,"Red",(Pokedex_Pokemon_Name_rect.x - 30,Pokedex_Pokemon_Name_rect.centery),15,3)
                Caught_Pokemon = self.Events.Game_font.render(f"Caught Pokemon: {len(self.Pokemon_Caught)}",True,"Black")
                Caught_Pokemon_rect = Caught_Pokemon.get_rect(topleft = (500,200))
                Seen_Pokemon = self.Events.Game_font.render(f"Seen Pokemon: {len(self.Pokemon_Seen)}",True,"Black")
                Seen_Pokemon_rect = Caught_Pokemon.get_rect(topleft = (0,200))
                SCREEN.blit(Caught_Pokemon,Caught_Pokemon_rect)
                SCREEN.blit(Seen_Pokemon,Seen_Pokemon_rect)
        else:
            self.Player.ShowDex = False

    def Use_Fly(self):
        if self.Player.Fly:
            self.PlayerMap.Draw()
            if pygame.mouse.get_pressed()[0] and Two_D_ListCheck(self.PlayerMap.FlyLocations,self.PlayerMap.SelectedPlace):
                for Locations in self.PlayerMap.FlyLocations:
                    if Locations[0] == self.PlayerMap.SelectedPlace:
                        self.Events.OverworldLocation = self.PlayerMap.SelectedPlace
                        self.Player.rect.center = Locations[1]
                        self.Player.Fly = False
                        self.Player.Moveable = True
                        self.Player_Pause = False
                        break
    
    def Use_Dig(self):
        if self.Escape_Rope_req():
            self.Events.Stage = self.Healplace[0]
            self.Player.rect.center = self.Healplace[1]
            self.Player_Pause = False
            self.DialougePause = False

    def Use_Strength(self):
        if self.Events.Stage == "FCWH":
            for rock in self.Kanto.FCWHBoulders:
                if rock.rect.colliderect(self.Player.rect) and self.Player.Check_Moves("Strength") and self.Player.Get_BadgeInfo("Rainbow",Name=True):
                    self.Interact("Move Boulder?")
                    if self.Yes:
                        if not rock.Moving:
                            if self.Player.Left:rock.Set_Speed(-1,0)
                            elif self.Player.Right:rock.Set_Speed(1,0)
                            elif self.Player.Down:rock.Set_Speed(0,1)
                            elif self.Player.Up:rock.Set_Speed(0,-1)
                        rock.Move()
                        if not rock.Moving:self.Yes = False
        elif self.Events.Stage == "Victory Road F1":
            for rock in self.Kanto.VRoadF1Boulders:
                if rock.rect.colliderect(self.Player.rect) and self.Player.Check_Moves("Strength") and self.Player.Get_BadgeInfo("Rainbow",Name=True):
                    self.Interact("Move Boulder?")
                    if self.Yes:
                        if not rock.Moving:
                            if self.Player.Left:rock.Set_Speed(-1,0)
                            elif self.Player.Right:rock.Set_Speed(1,0)
                            elif self.Player.Down:rock.Set_Speed(0,1)
                            elif self.Player.Up:rock.Set_Speed(0,-1)
                        rock.Move()
                        if not rock.Moving:self.Yes = False
        elif self.Events.Stage == "Victory Road F2":
            for rock in self.Kanto.VRoadF2Boulders:
                if rock.rect.colliderect(self.Player.rect) and self.Player.Check_Moves("Strength") and self.Player.Get_BadgeInfo("Rainbow",Name=True):
                    self.Interact("Move Boulder?")
                    if self.Yes:
                        if not rock.Moving:
                            if self.Player.Left:rock.Set_Speed(-1,0)
                            elif self.Player.Right:rock.Set_Speed(1,0)
                            elif self.Player.Down:rock.Set_Speed(0,1)
                            elif self.Player.Up:rock.Set_Speed(0,-1)
                        rock.Move()
                        if not rock.Moving:self.Yes = False
        elif self.Events.Stage == "Victory Road F3":
            for rock in self.Kanto.VRoadF3Boulders:
                if rock.rect.colliderect(self.Player.rect) and self.Player.Check_Moves("Strength") and self.Player.Get_BadgeInfo("Rainbow",Name=True):
                    self.Interact("Move Boulder?")
                    if self.Yes:
                        if not rock.Moving:
                            if self.Player.Left:rock.Set_Speed(-1,0)
                            elif self.Player.Right:rock.Set_Speed(1,0)
                            elif self.Player.Down:rock.Set_Speed(0,1)
                            elif self.Player.Up:rock.Set_Speed(0,-1)
                        rock.Move()
                        if not rock.Moving:self.Yes = False
        elif self.Events.Stage == "SeaFoam Islands F1":
            for rock in self.Kanto.SeaFoam_IslandF1Boulders:
                if rock.rect.colliderect(self.Player.rect) and self.Player.Check_Moves("Strength") and self.Player.Get_BadgeInfo("Rainbow",Name=True):
                    self.Interact("Move Boulder?")
                    if self.Yes:
                        if not rock.Moving:
                            if self.Player.Left:rock.Set_Speed(-1,0)
                            elif self.Player.Right:rock.Set_Speed(1,0)
                            elif self.Player.Down:rock.Set_Speed(0,1)
                            elif self.Player.Up:rock.Set_Speed(0,-1)
                        rock.Move()
                        if not rock.Moving:self.Yes = False
        elif self.Events.Stage == "SeaFoam Islands FB1":
            for rock in self.Kanto.SeaFoam_IslandFB1Boulders:
                if rock.rect.colliderect(self.Player.rect) and self.Player.Check_Moves("Strength") and self.Player.Get_BadgeInfo("Rainbow",Name=True):
                    self.Interact("Move Boulder?")
                    if self.Yes:
                        if not rock.Moving:
                            if self.Player.Left:rock.Set_Speed(-1,0)
                            elif self.Player.Right:rock.Set_Speed(1,0)
                            elif self.Player.Down:rock.Set_Speed(0,1)
                            elif self.Player.Up:rock.Set_Speed(0,-1)
                        rock.Move()
                        if not rock.Moving:self.Yes = False
        elif self.Events.Stage == "SeaFoam Islands FB2":
            for rock in self.Kanto.SeaFoam_IslandFB2Boulders:
                if rock.rect.colliderect(self.Player.rect) and self.Player.Check_Moves("Strength") and self.Player.Get_BadgeInfo("Rainbow",Name=True):
                    self.Interact("Move Boulder?")
                    if self.Yes:
                        if not rock.Moving:
                            if self.Player.Left:rock.Set_Speed(-1,0)
                            elif self.Player.Right:rock.Set_Speed(1,0)
                            elif self.Player.Down:rock.Set_Speed(0,1)
                            elif self.Player.Up:rock.Set_Speed(0,-1)
                        rock.Move()
                        if not rock.Moving:self.Yes = False
        elif self.Events.Stage == "SeaFoam Islands FB3":
            for rock in self.Kanto.SeaFoam_IslandFB3Boulders:
                if rock.rect.colliderect(self.Player.rect) and self.Player.Check_Moves("Strength") and self.Player.Get_BadgeInfo("Rainbow",Name=True):
                    self.Interact("Move Boulder?")
                    if self.Yes:
                        if not rock.Moving:
                            if self.Player.Left:rock.Set_Speed(-1,0)
                            elif self.Player.Right:rock.Set_Speed(1,0)
                            elif self.Player.Down:rock.Set_Speed(0,1)
                            elif self.Player.Up:rock.Set_Speed(0,-1)
                        rock.Move()
                        if not rock.Moving:self.Yes = False

    def Check_Surf_Req(self):
        points = []
        if self.Events.Stage == "OverWorld":points = self.Kanto.OverworldFishingPoint
        elif self.Events.Stage == "Safari Zone MA":points = self.Kanto.SMZFishingPoint
        elif self.Events.Stage == "Safari Zone A1":points = self.Kanto.SA1FishingPoint
        elif self.Events.Stage == "Safari Zone A2":points = self.Kanto.SA2FishingPoint
        elif self.Events.Stage == "SeaFoam Islands FB3":points = self.Kanto.SeaFoam_IslandFB3FishingPoint
        elif self.Events.Stage == "SeaFoam Islands FB4":points = self.Kanto.SeaFoam_IslandFB4FishingPoint
        elif self.Events.Stage == "Cerulean Cave F1":points = self.Kanto.Cerulean_CaveF1FishingPoint
        elif self.Events.Stage == "Cerulean Cave BF":points = self.Kanto.Cerulean_CaveBFFishingPoint
        for point in points:
            if point.colliderect(self.Player.rect): return True
        return False

    def Use_Surf(self):
        points = []
        r = 25
        if self.Events.Stage == "OverWorld":points = self.Kanto.OverworldFishingPoint
        elif self.Events.Stage == "Safari Zone MA":points = self.Kanto.SMZFishingPoint
        elif self.Events.Stage == "Safari Zone A1":points = self.Kanto.SA1FishingPoint
        elif self.Events.Stage == "Safari Zone A2":points = self.Kanto.SA2FishingPoint
        elif self.Events.Stage == "SeaFoam Islands FB3":points = self.Kanto.SeaFoam_IslandFB3FishingPoint
        elif self.Events.Stage == "SeaFoam Islands FB4":points = self.Kanto.SeaFoam_IslandFB4FishingPoint
        elif self.Events.Stage == "Cerulean Cave F1":points = self.Kanto.Cerulean_CaveF1FishingPoint
        elif self.Events.Stage == "Cerulean Cave BF":points = self.Kanto.Cerulean_CaveBFFishingPoint
        for point in points:
            if point.colliderect(self.Player.rect) and self.Player.Check_Moves("Surf") and self.Player.Get_BadgeInfo("Soul",Name=True):
                if not self.Player.Surf:
                    self.Player.Surf = True
                    self.Player.Bike = False
                    if self.Player.Left:self.Player.rect.centerx = point.centerx - r
                    elif self.Player.Right:self.Player.rect.centerx = point.centerx + r
                    elif self.Player.Down:self.Player.rect.centery = point.centery + r
                    elif self.Player.Up:self.Player.rect.centery = point.centery - r
                else:
                    self.Player.Surf = False
                    if self.Player.Left:self.Player.rect.centerx = point.centerx - r
                    elif self.Player.Right:self.Player.rect.centerx = point.centerx + r
                    elif self.Player.Down:self.Player.rect.centery = point.centery + r
                    elif self.Player.Up:self.Player.rect.centery = point.centery - r

    def RegionMap(self):
        if self.PlayerMapDisplay:
            self.PlayerMap.Draw()
            self.Show_Options1([(self.MapBack_rect,self.MapBack_Text,self.MapBack_Text_rect)])
            if self.MapBack_rect.collidepoint(pygame.mouse.get_pos()):
                if pygame.mouse.get_pressed()[0]: self.Clicked = True
                else:
                    if self.Clicked:
                        self.Back = True
                        self.Clicked = False
            self.Player.Moveable = False
            self.Player_Pause = True
            if self.Back: 
                self.PlayerMapDisplay = False
                self.Back = False
                self.Player.Moveable = True
                self.Player_Pause = False

    def Shuffle_Wild_Pokemon(self,Tiles:list):
        for Tile in Tiles:
            Tile.MakeRandomWildPokemon()

    def Pickup(self,List:list,Camera:pygame.sprite.Group):
        for i,ball in enumerate(List):
            if self.Player.rect.colliderect(ball.rect) and not ball.Picked and len(self.Player.Bag) < 20:
                self.Interact(f"Looks like this holds {ball.Item}. Wanna pick it up")
                if self.Yes:
                    List[i].Picked = True
                    self.Player.Add_Bag(ball.Item,1)
                    Camera.remove(ball)
                    self.Yes = False
                if self.No:self.No = False
            elif self.Player.rect.colliderect(ball.rect) and not ball.Picked and len(self.Player.Bag) >= 20:
                self.Events.Dialouge("Your Bag is full")
        return List,Camera

    def FakePickup(self,List:list,Camera:pygame.sprite.Group):
        for i,ball in enumerate(List):
            if self.Player.rect.colliderect(ball.rect) and not ball.Picked and len(self.Player.Bag) < 20:
                self.Interact(f"Looks like this holds {ball.Item}. Wanna pick it up")
                if self.Yes:
                    List[i].Picked = True
                    Camera.remove(ball)
                    Name = random.choice(["Voltorb","Electrode"])
                    Level = 40
                    self.WildPoke = Pokemon(Name,Level,["Tackle"],"Wild",Name)
                    self.WildPoke.Moves = self.WildPoke.Last4Moves(Level)
                    self.WildBattle = True
                    self.Opponents_Pokemon = self.WildPoke
                    self.Yes = False
                if self.No:self.No = False
        return List,Camera
  
    def Draw(self):
        self.Player_Draw_Control()
        self.Player.SetLoyaltyLevel()
        if not self.Player_Pause and not self.DialougePause:
            self.Player_group.update(self.Barriers)
        self.Camera_Barriers_Control()
        self.Camera.custom_draw(self.Player,self.Draw_Player)
        self.Events.Events()
        self.Interactions()
        self.PC()
        self.Reset_Trainer_Positions()
        self.Menu()
        self.RegionMap()
        if self.Player.Check_Statuses("PSN"):self.PosionedPokemon()
        self.PokeDex()
        if self.Events.Stage == "OverWorld":self.Use_Fly()
        self.DayCareExpGain()
        if self.Player.ItemFinderUsed:
            if self.Player.ItemFound:self.Events.Dialouge("You sense Something")
            else:self.Events.Dialouge("Nope Nothing")
        if self.GiveTm[0]: self.PokemonTMMenu()
        if self.EvoStones[1]: self.PokemonStoneMenu()
        if self.PPItems[2]: self.PokemonMovepp()
        if self.Player.Bike:
            if self.Events.Stage not in self.Player.BikeLocations:self.Player.Bike = False 
        if self.RepelOn[2] <= 0 and self.RepelOn[0]: 
            self.Player_Pause = True
            self.Events.Dialouge(f"Your {self.RepelOn[1]} ran out")
        if self.Back: 
            self.GiveTm[0] = False
            self.EvoStones[1] = False
            self.PPItems[2] = False
            self.Back = False




Game = Main()

check = False

 
while True:
    for e in pygame.event.get():
        if e.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        
        if Game.Events.Stage == "Start" and e.type == pygame.KEYDOWN:
            Game.Events.Stage = "Dr.Oak talk"
        
        elif Game.Events.Stage == "Dr.Oak talk" and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if not Game.Events.SS1: Game.Events.SS1 = True
            elif not Game.Events.SS2: Game.Events.SS2 = True
            elif not Game.Events.prePlayerName_input:
                Game.Events.prePlayerName_input = True 
                Game.Events.Playerinput = ""      
            elif not Game.Events.PlayerNameConfirm and Game.Events.PlayerName_input:Game.Events.PlayerNameConfirm=True
            elif not Game.Events.preRivalName_input and Game.Events.PlayerName_input: 
                Game.Events.preRivalName_input=True
                Game.Events.Rivalinput = ''
            elif not Game.Events.RivalNameConfirm and Game.Events.PlayerName_input and Game.Events.RivalName_input:Game.Events.RivalNameConfirm=True
            elif not Game.Events.SSSendOff and Game.Events.PlayerName_input and Game.Events.RivalName_input:
                Game.Events.SSSendOff = True
                Game.Player_Spawn("SPlayerRoom",Game.Kanto.SSPlayerHouseSpawnpoint)

        if Game.Events.Stage == "Dr.Oak talk" and Game.Events.prePlayerName_input and not Game.Events.PlayerName_input:
            Game.Events.NameInputBox.w = max(50,Game.Events.Playerinput_surf.get_width()) + 10
            if not check:
                Game.Events.Playerinput = ''
                check = True
            if e.type == pygame.KEYDOWN:
                if e.key == pygame.K_BACKSPACE:
                    Game.Events.Playerinput = Game.Events.Playerinput[:-1]
                elif e.key == pygame.K_RETURN and len(Game.Events.Playerinput) >= 1:
                    Game.Events.PlayerName_input = True
                    Game.PlayerName = Game.Events.Playerinput
                    check = False
                else:
                    if len(Game.Events.Playerinput) < 7:Game.Events.Playerinput += e.unicode

        if Game.Events.Stage == "Dr.Oak talk" and Game.Events.preRivalName_input and not Game.Events.RivalName_input:
            Game.Events.NameInputBox.w = max(50,Game.Events.Playerinput_surf.get_width()) + 10
            if not check:
                Game.Events.Rivalinput = ''
                check = True
            if e.type == pygame.KEYDOWN:
                if e.key == pygame.K_BACKSPACE:
                    Game.Events.Rivalinput = Game.Events.Rivalinput[:-1]
                elif e.key == pygame.K_RETURN and len(Game.Events.Rivalinput) >= 1:
                    Game.Events.RivalName_input = True
                    Game.RivalName = Game.Events.Rivalinput
                    check = False
                else:
                    if len(Game.Events.Rivalinput) < 7: Game.Events.Rivalinput += e.unicode

        if Game.Events.Stage == "FCWH" and Two_D_ListCheck(Game.Player.Bag,"Gold Teeth") and Game.DialougePause:
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                Game.Player.Remove_Bag("Gold Teeth",1)
                Game.Player.Add_Bag("HM04",1)
                Game.Kanto.FCWHNPCS[0].Text1_a = "HM04 teaches STRENGTH! It lets POKEMON move boulders when you're"
                Game.Kanto.FCWHNPCS[0].Text1_b = "outside of battle. Oh yes, did you find SECRET HOUSE in SAFARI ZONE?"
                Game.Kanto.FCWHNPCS[0].Text1_c = "If you do, you win an HM! I hear it's the rare SURF HM."
                Game.Kanto.FCWHNPCS[0].Text = [Game.Kanto.FCWHNPCS[0].Text1_a,Game.Kanto.FCWHNPCS[0].Text1_b,Game.Kanto.FCWHNPCS[0].Text1_c]
        
        if Game.DialougePause and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            Game.DialougePause = False
            Game.Yes = False
            Game.GiverNPCCheck = False

        if Game.Events.Stage == "OverWorld" and Game.Events.OverworldLocation == "Viridian City" and not Game.Events.HasPokeballs and Game.Player.rect.colliderect(Game.Kanto.PokeballLine):
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                Game.Player_Pause = False
                Game.Player.rect.center = Game.Kanto.PokeballSpawn
        
        if Game.Events.Stage == "OverWorld" and Game.Events.OverworldLocation == "Pallet Town" and Game.Events.OakCutscene1:
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT): 
                Game.Kanto.OverworldCamera.remove(Game.Kanto.Cutscene1Oak)
                Game.Kanto.OakLabCamera.add(Game.Kanto.Oak)
                Game.Kanto.OakLabBarriers.append(Game.Kanto.Oak.rect)
                Game.Events.OakCutscene2 = True
                Game.Events.OakCutscene1 = False
                Game.Player_Pause = False
                Game.Player.rect.center = Game.Kanto.Oak_Overworldspawn
        
        if Game.Events.Stage == "Oak Lab" and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if Game.Events.OakCutscene2:
                Game.Events.OakCutscene2 = False
                Game.Events.OakCutscene3 = True
            elif Game.Events.OakCutscene3:
                Game.Events.OakCutscene3 = False
                Game.Events.OakCutscene4 = True
            elif Game.Events.OakCutscene4:
                Game.Events.OakCutscene4 = False
                Game.Events.OakCutscene5 = True
            elif Game.Events.OakCutscene5:
                Game.Events.OakCutscene5 = False
                Game.Events.PickinPoke = True
                Game.Player_Pause = False
            elif Game.Events.PokemonPicked:
                Game.Events.PokemonPicked= False
                Game.pre_NickName = True
            elif Game.Events.RPokemonPick:
                Game.Events.RPokemonPick= False
                Game.Events.preFirstRivalBattle = True
            elif Game.Events.preFirstRivalBattle and Game.Player_Pause:
                Game.Events.preFirstRivalBattle = False
                Game.Events.RivalBattle = True
            elif Game.Events.PostRivalBattle:
                Game.Events.PostRivalBattle = False
                Game.Player_Pause = False
                Game.Events.OakinLab = True
                Game.Kanto.OakLabCamera.remove(Game.Kanto.Rival)
                Game.Kanto.OakLabBarriers.remove(Game.Kanto.Rival.rect)
            elif Game.Events.OakPokeBallCutscene1:
                Game.Events.OakPokeBallCutscene1 = False
                Game.Events.OakPokeBallCutscene2 = True
                Game.Kanto.OakLabCamera.add(Game.Kanto.Rival)
                Game.Kanto.Rival.image = pygame.image.load(r"Map\Tileset\NPCS\Rival_Idle_Up.png").convert_alpha()
            elif Game.Events.OakPokeBallCutscene2:
                Game.Events.OakPokeBallCutscene2 = False
                Game.Events.OakPokeBallCutscene3 = True
            elif Game.Events.OakPokeBallCutscene3:
                Game.Events.OakPokeBallCutscene3 = False
                Game.Events.OakPokeBallCutscene4 = True
            elif Game.Events.OakPokeBallCutscene4:
                Game.Events.OakPokeBallCutscene4 = False
                Game.Events.OakPokeBallCutscene5 = True
            elif Game.Events.OakPokeBallCutscene5:
                Game.Events.OakPokeBallCutscene5 = False
                Game.Player.Add_Bag("Poke Ball",5)
                Game.Events.HasPokeballs = True
                Game.Player_Pause = False

        if Game.RepelOn[2] <= 0 and Game.RepelOn[0] and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            Game.Player_Pause = False
            Game.RepelOn[0] = False

        if Game.Player.ItemFinderUsed and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            Game.Player.ItemFinderUsed = False
            Game.Player_Pause = False

        if Game.Events.Stage == "LTH2" and Game.Yes and Game.ChangePokeName in Game.Player.Pokemon:
            Game.Events.NameInputBox.w = max(50,Game.ChangePokeNewName_surf.get_width()) + 10
            if e.type == pygame.KEYDOWN:
                if e.key == pygame.K_BACKSPACE:
                    Game.ChangePokeNewName = Game.ChangePokeNewName[:-1]
                elif e.key == pygame.K_RETURN and len(Game.ChangePokeNewName) >= 1:
                    Game.ChangePokeName.NickName = Game.ChangePokeNewName
                    Game.Yes = False
                    Game.ChangePokeName = Pokemon
                    Game.ChangePokeNewName = ""
                    Game.Player_Pause = False
                else:
                    if len(Game.ChangePokeNewName) < 7:Game.ChangePokeNewName += e.unicode

        if e.type == pygame.KEYDOWN:
            if e.key == pygame.K_BACKSPACE: Game.Back = True
            if e.key == pygame.K_x:
                Game.Player.Search= True
            if e.key == pygame.K_f:
                if Game.Events.Stage == "OverWorld":
                    if Game.Player.Check_Moves("Fly") and Game.Player.Get_BadgeInfo("Thunder",Name=True):
                        Game.Player.Fly = True
                        Game.Player.Moveable = False
                        Game.Player_Pause = True
            if e.key == pygame.K_s:
                if Game.Check_Surf_Req():
                    Game.Use_Surf()
            if e.key == pygame.K_d:
                if Game.Events.Stage != "OverWorld":
                    if Game.Player.Check_Moves("Dig"):Game.Use_Dig()

        if Game.Events.HiddenItemPickedup and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            Game.Player_Pause = False
            Game.Events.HiddenItemPickedup = False
        
        if Game.Player.rect.colliderect(Game.Kanto.CESleepingSnorlax[1].Rect) and Two_D_ListCheck(Game.Player.Bag,"Poke Flute") and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT) and Game.Yes:
            Game.Yes= False
            Game.Events.CESnorlaxFight = True
        
        if Game.Player.rect.colliderect(Game.Kanto.VCSleepingSnorlax[1].Rect) and Two_D_ListCheck(Game.Player.Bag,"Poke Flute") and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT) and Game.Yes:
            Game.Yes= False
            Game.Events.VCSnorlaxFight = True

        if Game.Events.Stage == "Oak Lab" and Game.Events.StarterNickname:
            Game.Events.NameInputBox.w = max(50,Game.Events.Playerinput_surf.get_width()) + 10
            if e.type == pygame.KEYDOWN:
                if e.key == pygame.K_BACKSPACE:
                    Game.Events.SPNickname = Game.Events.SPNickname[:-1]
                elif e.key == pygame.K_RETURN and len(Game.Events.SPNickname) >= 1:
                    Game.Events.StarterNickname = False
                    Game.Events.RPokemonPick = True
                else:
                    if len(Game.Events.SPNickname) < 7:Game.Events.SPNickname += e.unicode

        if Game.Events.Stage == "Poke Mart":
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.PokeMartCutscene1:
                    Game.Events.PokeMartCutscene1 = False
                    Game.Events.PokeMartCutscene2 = True
                elif Game.Events.PokeMartCutscene2:
                    Game.Events.PokeMartCutscene2 = False
                    Game.Events.PokeMartCutscene = True
                    Game.Events.OakPokeBallCutscene1 = True
                    Game.Player_Pause = False
                    Game.Events.PostRivalBattle = False

        if Game.Events.OverworldLocation == "Viridian City" and Game.Player.rect.colliderect(Game.Kanto.VGymBarrier) and Game.Player.Get_BadgeInfo() < 7:
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                Game.Player_Pause = False
                Game.Player.rect.center = Game.Kanto.VGymBarrierPlace

        if Game.Events.OverworldLocation == "Route 22" and Game.Player.rect.colliderect(Game.Kanto.OptionalRivalBattleLine):
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.OptionalRivalFightCutscene:
                    Game.Events.OptionalRivalFightCutscene = False
                    Game.Events.OptionalRivalFight = True
                elif Game.Events.OptionalRivalFightAftermath:
                    Game.Events.OptionalRivalFightAftermath = False
                    Game.Events.OptionalRivalFightDone = True
                    Game.Kanto.OverworldCamera.remove(Game.Kanto.Rival)
                    Game.Player_Pause = False

        if Game.Events.Stage == "Pokemon LeagueF1" and Game.Player.rect.colliderect(Game.Kanto.BadgeCheck1) and not Game.Player.Get_BadgeInfo("Boulder") and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            Game.Player_Pause = False
            Game.Player.rect.center = Game.Kanto.PokemonLeagueF1Spawn

        if Game.TrainerSeen and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            Game.TrainerSeen = False
            Game.NPCTrainerBattle = True

        if Game.Events.Stage == "PCM" and Game.Kanto.PCMBuyLine.colliderect(Game.Player.rect) and not Game.PCMMoney and Game.Player.Money < 50:
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                Game.Player_Pause = False
                Game.Player_Spawn("OverWorld",Game.Kanto.PCM_OSpawn)
        
        if Game.Events.Stage == "Mt.Moon3" and Game.Kanto.NPCFossilChoice and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            for fossil in Game.Kanto.MtMoonFossils:
                Game.Kanto.Mt_MoonFloor3Camera.remove(fossil)
                Game.Kanto.Mt_MoonF3Barriers.remove(fossil.Rect)
                Game.Kanto.NPCFossilChoice = False
                Game.Kanto.MtMoonFossils.remove(fossil)
                Game.Player_Pause = False
                Game.Kanto.FossilChosen = True

        if Game.GymLeaderStartText and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            Game.GymLeaderStartText = False
            Game.GymLeaderBattle = True
        
        if Game.E4StartText and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            Game.E4StartText = False
            Game.E4Battle = True
        
        if not Game.E4StartText and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT) and Game.Player.rect.colliderect(Game.Kanto.E4LanceBattleLine) and not Game.Kanto.Lance.Battled:
            Game.E4StartText = True
        
        if Game.GymLeaderGiveTM and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            Game.DialougePause = False
            Game.GymLeaderGiveTM = False
            if Game.Events.Stage == "PCGym":Game.Player.Add_Bag("TM34",1)
            elif Game.Events.Stage == "CCGym":Game.Player.Add_Bag("TM11",1)
            elif Game.Events.Stage == "VCGym":Game.Player.Add_Bag("TM24",1)
            elif Game.Events.Stage == "CEGym":Game.Player.Add_Bag("TM21",1)
            elif Game.Events.Stage == "FCGym":Game.Player.Add_Bag("TM06",1)
            elif Game.Events.Stage == "SFGym":Game.Player.Add_Bag("TM46",1)
            elif Game.Events.Stage == "CGym":Game.Player.Add_Bag("TM38",1)
            elif Game.Events.Stage == "VGym":Game.Player.Add_Bag("TM27",1)

        if Game.Player.rect.colliderect(Game.Kanto.BrockBattleLine) and not Game.Player.Get_BadgeInfo("Boulder",True):
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                Game.Player.rect.center = Game.Kanto.PewterGym_OSpawn
                Game.DialougePause = False

        if Game.Events.OverworldLocation == "Cerulean City" and Game.Player.rect.colliderect(Game.Kanto.CCRivalBattleLine):
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.CCRivalFightCutscene:
                    Game.Events.CCRivalFightCutscene = False
                    Game.Events.CCRivalFight = True
                elif Game.Events.CCRivalFightAftermath:
                    Game.Events.CCRivalFightAftermath = False
                    Game.Events.CCRivalFightDone = True
                    Game.Kanto.OverworldCamera.remove(Game.Kanto.Rival)
                    Game.Player_Pause = False

        if Game.Events.OverworldLocation == "Route 24" and Game.Player.rect.colliderect(Game.Kanto.NugEnd):
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.NBRocketCutscene:
                    Game.Events.NBRocketCutscene = False
                    Game.Events.NBRocketFight = True
                elif Game.Events.NBRocketAftermath:
                    Game.Player_Pause = False
                    Game.Events.NBRocketEncounter = True

        if Game.Events.Stage == "Sea Cottage" and not Game.Events.SSTicketGot and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if Game.Events.BillPokemonEncounter:
                Game.Events.BillPokemonEncounter = False
                Game.Events.HelpBillPokemon = True
                Game.Yes = False
            elif Game.Events.HelpBillPokemon and (Game.Yes or Game.No):
                Game.Events.HelpBillPokemon = False
                Game.Events.BillEncounter = True
                Game.Yes = False
                Game.No = False
                Game.Player.rect.center = Game.Kanto.HelpBillSpawn
                Game.Player_Pause = False
            elif Game.Events.BillSSTicket:
                Game.Events.BillSSTicket = False
                Game.Events.BillSSTicketAftermath = True
                Game.Player.Add_Bag("S.S.TICKET",1)
            elif Game.Events.BillSSTicketAftermath:
                Game.Yes = False
                Game.No = False
                Game.Events.BillSSTicketAftermath = False
                Game.Events.SSTicketGot = True
                Game.Player_Pause = False
        
        if Game.Events.Stage == "Daycare" and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if Game.DCDeposit:
                Game.DCDeposit = False
                Game.DayCarePokemon.append((Game.DCChoicePokemon,Game.DCChoicePokemon.Level))
                Game.Player.Pokemon.remove(Game.DCChoicePokemon)
            elif Game.DCWithdrawl:
                Game.DCWithdrawl = False

        if Game.Events.Stage == "BetweenR5_SC" and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if not Game.Events.GuardDrinkGiven:
                if not (Two_D_ListCheck(Game.Player.Bag,"Fresh Water") or Two_D_ListCheck(Game.Player.Bag,"Soda Pop") or Two_D_ListCheck(Game.Player.Bag,"Lemonade")):
                    if Game.Events.OverworldLocation == "Route 5":
                        Game.Player.rect.center = Game.Kanto.O_InterEnteranceSpawn
                else:Game.Events.GuardDrinkGiven = True
                Game.Player_Pause = False
        
        if Game.Events.Stage == "BetweenR6_SC" and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if not Game.Events.GuardDrinkGiven:
                if not (Two_D_ListCheck(Game.Player.Bag,"Fresh Water") or Two_D_ListCheck(Game.Player.Bag,"Soda Pop") or Two_D_ListCheck(Game.Player.Bag,"Lemonade")):
                    if Game.Events.OverworldLocation == "Route 6":
                        Game.Player.rect.center = Game.Kanto.O_InterExitSpawn
                else:Game.Events.GuardDrinkGiven = True
                Game.Player_Pause = False
        
        if Game.Events.Stage == "SaffronEEntrance" and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if not Game.Events.GuardDrinkGiven:
                if not (Two_D_ListCheck(Game.Player.Bag,"Fresh Water") or Two_D_ListCheck(Game.Player.Bag,"Soda Pop") or Two_D_ListCheck(Game.Player.Bag,"Lemonade")):
                    if Game.Events.OverworldLocation == "Route 8":
                        Game.Player.rect.center = Game.Kanto.O_SaffronEEntranceSpawn
                else:Game.Events.GuardDrinkGiven = True
                Game.Player_Pause = False

        if Game.Events.Stage == "SaffronWEntrance" and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if not Game.Events.GuardDrinkGiven:
                if not (Two_D_ListCheck(Game.Player.Bag,"Fresh Water") or Two_D_ListCheck(Game.Player.Bag,"Soda Pop") or Two_D_ListCheck(Game.Player.Bag,"Lemonade")):
                    if Game.Events.OverworldLocation == "Route 7":
                        Game.Player.rect.center = Game.Kanto.O_SaffronWExitSpawn
                else:Game.Events.GuardDrinkGiven = True
                Game.Player_Pause = False

        if Game.Events.PlayerDeathMessage and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            Game.Events.PlayerDeathMessage = False

        if Game.Events.FishingCutscene and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if Game.Player.FishCaught:
                Game.Fishing()
                Game.Events.FishingCutscene = False
                Game.Player.FishCaught = False
                Game.Events.FishFight = True
                Game.Opponents_Pokemon = Game.WildPoke
        
        if Game.Events.Stage == "Pokemon Fan Club" and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if not Game.Events.PFCSpeech:
                if Game.Yes:
                    if Game.Events.PFCp1:
                        Game.Events.PFCp1 = False
                        Game.Events.PFCp2 = True
                    elif Game.Events.PFCp2:
                        Game.Events.PFCp2 = False
                        Game.Player_Pause = False
                        Game.Yes = False
                        Game.Events.PFCSpeech = True
                        Game.Player.Add_Bag("Bike Voucher",1)
                elif Game.No:
                    Game.Player_Pause = False
                    Game.No = False

        if Game.Events.Stage == "Bike Shop" and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if Game.Events.BikeEvent:
                Game.Player.Add_Bag("Bike",1)
                Game.Events.BikeEvent = False
                Game.Yes = False
                Game.DialougePause = False
                Game.Events.HaveBike = True

        if Game.Events.OverworldLocation == "Vermilion City" and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if Game.Player.rect.colliderect(Game.Kanto.SSTicketCheck):
                Game.Player_Pause = False  
                if Two_D_ListCheck(Game.Player.Bag,"S.S.TICKET"):
                    Game.Events.SSTicketCheck = True
                else:
                    Game.Player.rect.center =  Game.Kanto.VCH1_OSpawn

        if Game.Events.Stage == "SS.AnneF2" and Game.Player.rect.colliderect(Game.Kanto.SSBattleLine):
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.SSRivalFightCutscene:
                    Game.Events.SSRivalFightCutscene = False
                    Game.Events.SSRivalFight = True
                elif Game.Events.SSRivalFightAftermath:
                    Game.Events.SSRivalFightAftermath = False
                    Game.Events.SSRivalBattleDone = True
                    Game.Kanto.SS_AnneF2Camera.remove(Game.Kanto.Rival)
                    Game.Player_Pause = False
        
        if Game.Events.Stage == "Captain Cabin" and Game.Player.rect.colliderect(Game.Kanto.SSCaptain.rect):
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.SSCaptainCutscene:
                    Game.Events.SSCaptainCutscene = False
                    Game.Events.SSCaptainHMGet = True
                elif Game.Events.SSCaptainHMGet:
                    Game.Events.SSCaptainHMGet = False
                    Game.Player.Add_Bag("HM01",1)
                    Game.Events.SSCaptainDone = True
                    Game.Player_Pause = False
                    Game.Yes = False
                    try:
                        Game.Kanto.OverworldCamera.remove(Game.Kanto.SSShip)
                    except:pass

        if Game.Events.Stage == "VCGym":
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                for i,can in enumerate(Game.Kanto.ThirdGymTrashcans):
                    if Game.Player.rect.colliderect(can.Rect):
                        if Game.Yes:
                            Game.Player_Pause = False
                            if can.HasSwitch and not Game.Kanto.ThirdGymTrashcans[i].SwitchOn:
                                Game.Kanto.ThirdGymTrashcans[i].SwitchOn = True
                            elif not can.HasSwitch:Game.EmptySwitches()
                            Game.Yes = False
                        if Game.No:
                            Game.Player_Pause = False
                            Game.No = False

        if Game.Events.Stage == "R22H" and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if not Game.Events.HMFlashGet:
                if Game.Yes and len(Game.Pokemon_Caught) >= 10:
                    Game.Events.HMFlashGet = True
                    Game.Player.Add_Bag("HM05",1)
                Game.Yes= False
                Game.Player_Pause = False
        
        if Game.Events.Stage == "R11HF2" and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if not Game.Events.ItemFinderGet:
                if Game.Yes and len(Game.Pokemon_Caught) >= 30:
                    Game.Events.ItemFinderGet = True
                    Game.Player.Add_Bag("ItemFinder",1)
                Game.Yes= False
                Game.Player_Pause = False

        if Game.Events.Stage == "CEStoreRoof" and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if Game.Yes and False in [Game.Events.GirlGotWater,Game.Events.GirlGotLemons,Game.Events.GirlGotPop]:
                if Game.RooftopDrinkGirlText() == "Can I have that Water your holding":
                    Game.Player.Remove_Bag("Fresh Water",1)
                    Game.Player.Add_Bag("TM13",1)
                    Game.Events.GirlGotWater = True
                elif Game.RooftopDrinkGirlText() == "Can I have that Pop your holding":
                    Game.Player.Remove_Bag("Soda Pop",1)
                    Game.Player.Add_Bag("TM48",1)
                    Game.Events.GirlGotPop = True
                elif Game.RooftopDrinkGirlText() == "Can I have that Lemonade your holding":
                    Game.Player.Remove_Bag("Lemonade",1)
                    Game.Player.Add_Bag("TM49",1)
                    Game.Events.GirlGotLemons = True
                Game.Player_Pause = False
                Game.Yes = False

        if Game.Events.Stage == "Game Corner" and Game.Player.rect.colliderect(Game.Kanto.GCRocket.rect):
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.GCRocketCutscene:
                    Game.Events.GCRocketCutscene = False
                    Game.Events.GCRocketFight = True
                    Game.Yes = False
                elif Game.Events.GCRocketAftermath:
                    Game.Player_Pause = False
                    Game.Events.GCRocketEncounter = True

        if Game.Events.Stage == "Rocket HideoutF4" and Game.Player.rect.colliderect(Game.Kanto.RBaseGiovanni.rect):
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.RBaseGiovanniCutscene:
                    Game.Events.RBaseGiovanniCutscene = False
                    Game.Events.RBaseGiovanniFight = True
                    Game.Yes = False
                elif Game.Events.RBaseGiovanniAftermath:
                    Game.Player_Pause = False
                    Game.Events.RBaseGiovanniEncounter = True
                    for i in Game.Kanto.Rocket_HideoutF4Pickups:
                        if i.Item == "Silph Scope":Game.Kanto.Rocket_HideoutF4Camera.add(i)

        if Game.Events.Stage == "PokeTowerF2" and Game.Player.rect.colliderect(Game.Kanto.PokeTowerBattleLine):
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.PokeTowerRivalFightCutscene:
                    Game.Events.PokeTowerRivalFightCutscene = False
                    Game.Events.PokeTowerRivalFight = True
                    Game.Yes = False
                elif Game.Events.PokeTowerRivalFightAftermath:
                    Game.Player_Pause = False
                    Game.Events.PokeTowerRivalFightDone = True

        if not Game.Events.PokeTowerGhost and Game.Player.rect.colliderect(Game.Kanto.PokeTowerGhostLine):
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Two_D_ListCheck(Game.Player.Bag,"Silph Scope"):
                    if Game.Events.PokeTowerGhostEncounter:
                        Game.Events.PokeTowerGhostReveal = True
                        Game.Events.PokeTowerGhostEncounter = False
                    elif Game.Events.PokeTowerGhostReveal:
                        Game.Events.PokeTowerGhostReveal = False
                        Game.Events.PokeTowerGhostFight = True
                    elif Game.Events.PokeTowerGhostFightAftermath:
                        Game.Events.PokeTowerGhostFightAftermath = False
                        Game.Player_Pause = False
                        Game.Events.PokeTowerGhost= True
                else:
                    Game.Events.Stage = "OverWorld"
                    Game.Player.rect.center = Game.Kanto.PokeTowerF1_OSpawn
                    Game.Player_Pause = False

        if not Game.Events.Mr_FujiSaved and Game.Player.rect.colliderect(Game.Kanto.Mr_Fuji.rect) and Game.Yes:
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                Game.Events.Stage = "Lavender Volunteer Pokemon House"
                Game.Player.rect.center = Game.Kanto.O_LTVHSpawn
                Game.Yes= False
                Game.Events.Mr_FujiSaved = True
                Game.Player_Pause = False

        if Game.Events.Stage == "R16GuardTower" and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT) and Game.Player.rect.colliderect(Game.Kanto.BikeLine):
            if not Two_D_ListCheck(Game.Player.Bag,"Bike"):
                Game.Player_Pause = False
                Game.Player.rect.center = Game.Kanto.O_R16H1Spawn3

        if "Safari Zone" in Game.Events.Stage and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT) and Game.Safari_Steps <= 0:
            Game.Player_Pause = False
            Game.Events.Stage = "Safari Zone Entrance"
            Game.Safari_End()
            Game.Player.rect.center = Game.Kanto.O_SZESpawn

        if Game.Events.Stage == "Fighting Dojo" and Game.Player.rect.colliderect(Game.Kanto.DojoFightLine):
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.Fighting_DojoFightCutscene:
                    Game.Events.Fighting_DojoFightCutscene = False
                    Game.Events.Fighting_DojoFight = True
                    Game.Yes = False
                elif Game.Events.Fighting_DojoFightAftermath:
                    Game.Player_Pause = False
                    Game.Events.Fighting_DojoFightDone = True
                    Game.Events.Fighting_DojoPokePick = True

        if Game.Events.Stage == "Silph Co. F7" and Game.Player.rect.colliderect(Game.Kanto.SilphCoRivalBattleLine) and not Game.Events.SilCoRivalBattleDone:
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.SilCoRivalFightCutscene:
                    Game.Events.SilCoRivalFightCutscene = False
                    Game.Events.SilCoRivalFight = True
                    Game.Yes = False
                elif Game.Events.SilCoRivalFightAftermath:
                    Game.Player_Pause = False
                    Game.Events.SilCoRivalBattleDone = True
                    Game.Kanto.Silph_CoF7Camera.remove(Game.Kanto.Rival)

        if Game.Events.Stage == "Silph Co. F11" and Game.Player.rect.colliderect(Game.Kanto.SilphCoGioLine):
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.SilCoGioCutscene:
                    Game.Events.SilCoGioCutscene = False
                    Game.Events.SilCoGioFight = True
                    Game.Yes = False
                elif Game.Events.SilCoGioFightAftermath:
                    Game.Player_Pause = False
                    Game.Events.SilCoGioDone = True
                    Game.Kanto.Silph_CoF11Camera.remove(Game.Kanto.SilCoGiovanni)

        if Game.Events.Stage == "Silph Co. F7" and Game.Player.rect.colliderect(Game.Kanto.LaprasMan.rect) and not Game.Events.SilCoLapras and Game.Yes:
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.SilCoLaprasTalk:
                    Game.Events.SilCoLaprasTalk = False
                    Game.Events.SilCoLaprasAftermath = True
                    Game.Player.Add_Pokemon(Pokemon("Lapras",15,["Water Gun","Growl"],Game.PlayerName,"Lapras"))
                    Game.AddPokeDex("Lapras",True)
                elif Game.Events.SilCoLaprasAftermath:
                    Game.Player_Pause = False
                    Game.Events.SilCoLapras = True
                    Game.Yes = False

        if Game.Events.Stage == "SFH3F2" and Game.Player.rect.colliderect(Game.Kanto.SFH3CopyCat.rect) and not Game.Events.CopyCat and Game.Yes:
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.CopyCatTalk:
                    if not Two_D_ListCheck(Game.Player.Bag,"Poke Doll"):Game.Player_Pause = False
                    else:
                        Game.Player.Remove_Bag("Poke Doll",1)
                        Game.Events.CopyCatTalk = False
                        Game.Events.CopyCatAftermath = True
                        Game.Player.Add_Bag("TM31",1)
                    Game.Yes = False
                elif Game.Events.CopyCatAftermath:
                    Game.Player_Pause = False
                    Game.Events.CopyCatAftermath = False
                    Game.Events.CopyCat = True
                    Game.Yes = False

        if Game.Events.Stage == "R15GHF2" and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
            if not Game.Events.ExpALLGet:
                if Game.Yes and len(Game.Pokemon_Caught) >= 50:
                    Game.Events.ExpALLGet = True
                    Game.Player.Add_Bag("EXP All",1)
                Game.Yes= False
                Game.Player_Pause = False

        if Game.Events.Stage == "Pokemon Lab Testing Room" and Game.Player.rect.colliderect(Game.Kanto.TRScientist.rect) and Game.Yes:
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.FossilDescion:
                    if Two_D_ListCheck(Game.Player.Bag,"Dome Fossil") or Two_D_ListCheck(Game.Player.Bag,"Helix Fossil") or Two_D_ListCheck(Game.Player.Bag,"Old Amber"):
                        Game.Events.FossilRevival = True
                    else:
                        Game.Player_Pause = False
                        Game.Yes = False
                    Game.Events.FossilDescion = False   
                elif Game.Events.FossilRevival:
                    Game.Player_Pause = False
                    if Two_D_ListCheck(Game.Player.Bag,"Dome Fossil"):
                        Game.Player.Add_Pokemon(Pokemon("Omanyte",30,["Water Gun","Withdraw"],Game.PlayerName,"Omanyte"))
                        Game.Player.Remove_Bag("Dome Fossil",1)
                        Game.AddPokeDex("Omanyte",True)
                    elif Two_D_ListCheck(Game.Player.Bag,"Helix Fossil"):
                        Game.Player.Add_Pokemon(Pokemon("Kabuto",30,["Scratch","Harden"],Game.PlayerName,"Kabuto"))
                        Game.Player.Remove_Bag("Helix Fossil",1)
                        Game.AddPokeDex("Kabuto",True)
                    elif Two_D_ListCheck(Game.Player.Bag,"Old Amber"):
                        Game.Player.Add_Pokemon(Pokemon("Aerodactyl",30,["Wing Attack","Agility"],Game.PlayerName,"Aerodactyl"))
                        Game.Player.Remove_Bag("Old Amber",1)
                        Game.AddPokeDex("Aerodactyl",True)
                    Game.Events.FossilRevival = True
                    Game.Yes = False
                    Game.Events.FossilDescion = True

        if Game.Events.Stage == "OverWorld" and Game.Player.rect.colliderect(Game.Kanto.O_CGymDoor.Rect) and not Two_D_ListCheck(Game.Player.Bag,"Secret Key"):
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT): 
                Game.Player_Pause = False
                Game.Player.rect.centery += 30 
        
        if Game.Events.Stage == "CGym" and (Game.Yes or Game.No):
            if Game.Player.rect.colliderect(Game.Kanto.CGymQuestion1.Rect) and not Game.Kanto.CGymQuestion1.Answered:
                if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT): 
                    Game.Player_Pause = False
                    Game.Kanto.CGymQuestion1.Answered = True
                    Game.Yes = False
                    Game.No = False
            if Game.Player.rect.colliderect(Game.Kanto.CGymQuestion2.Rect) and not Game.Kanto.CGymQuestion2.Answered:
                if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT): 
                    Game.Player_Pause = False
                    Game.Kanto.CGymQuestion2.Answered = True
                    Game.Yes = False
                    Game.No = False
            if Game.Player.rect.colliderect(Game.Kanto.CGymQuestion3.Rect) and not Game.Kanto.CGymQuestion3.Answered:
                if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT): 
                    Game.Player_Pause = False
                    Game.Kanto.CGymQuestion3.Answered = True
                    Game.Yes = False
                    Game.No = False
            if Game.Player.rect.colliderect(Game.Kanto.CGymQuestion4.Rect) and not Game.Kanto.CGymQuestion4.Answered:
                if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT): 
                    Game.Player_Pause = False
                    Game.Kanto.CGymQuestion4.Answered = True
                    Game.Yes = False
                    Game.No = False
            if Game.Player.rect.colliderect(Game.Kanto.CGymQuestion5.Rect) and not Game.Kanto.CGymQuestion5.Answered:
                if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT): 
                    Game.Player_Pause = False
                    Game.Kanto.CGymQuestion5.Answered = True
                    Game.Yes = False
                    Game.No = False
            if Game.Player.rect.colliderect(Game.Kanto.CGymQuestion6.Rect) and not Game.Kanto.CGymQuestion6.Answered:
                if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT): 
                    Game.Player_Pause = False
                    Game.Kanto.CGymQuestion6.Answered = True
                    Game.Yes = False
                    Game.No = False

        if Game.Events.Stage == "OverWorld" and Game.Player.rect.colliderect(Game.Kanto.BPLRivalBattleLine) and not Game.Events.BPLRivalFightDone:
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.BPLRivalFightCutscene:
                    Game.Events.BPLRivalFightCutscene = False
                    Game.Events.BPLRivalFight = True
                elif Game.Events.BPLRivalFightAftermath:
                    Game.Player_Pause = False
                    Game.Events.BPLRivalFightDone = True
                    Game.Kanto.OverworldCamera.remove(Game.Kanto.Rival)

        if Game.Events.Stage == "OverWorld" and Game.Player.Group_Collison([Game.Kanto.R23BadgeCheck1,Game.Kanto.R23BadgeCheck2,Game.Kanto.R23BadgeCheck3,Game.Kanto.R23BadgeCheck4,Game.Kanto.R23BadgeCheck5,Game.Kanto.R23BadgeCheck6,Game.Kanto.R23BadgeCheck7]):
            if Game.Player_Pause and e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                Game.Player_Pause = False
                Game.Player.Surf = False
                Game.Player.rect.center = Game.Kanto.PLF1_R23Spawn

        if Game.Events.Stage == "Indigo Plateau Champion" and Game.Player.rect.colliderect(Game.Kanto.FinalBattleLine):
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.ChampionFightCutsceneP1:
                    Game.Events.ChampionFightCutsceneP1 = False
                    Game.Events.ChampionFightCutsceneP2 = True
                elif Game.Events.ChampionFightCutsceneP2:
                    Game.Events.ChampionFightCutsceneP2 = False
                    Game.Events.ChampionFight = True
                elif Game.Events.ChampionFightAftermath:
                    Game.Events.AfterChampionP1 = True
                    Game.Events.ChampionFightAftermath = False
                elif Game.Events.AfterChampionP1:
                    Game.Events.AfterChampionP1 = False
                    Game.Events.AfterChampionP2 = True
                    Game.Kanto.IndigoPlateauChampionCamera.add(Game.Kanto.IPCOak)
                elif Game.Events.AfterChampionP2:
                    Game.Events.AfterChampionP2 = False
                    Game.Events.AfterChampionP3 = True
                elif Game.Events.AfterChampionP3:
                    Game.Events.AfterChampionP3 = False
                    Game.Events.AfterChampionP4 = True
                elif Game.Events.AfterChampionP4:
                    Game.Events.AfterChampionP4 = False
                    Game.Events.FameHallTalkP1 = True
                    Game.Player_Spawn("Hall of Fame",Game.Kanto.FameHallSpawn)
                    Game.Kanto.IndigoPlateauChampionCamera.remove(Game.Kanto.IPCOak)
        
        if Game.Events.Stage == "Hall of Fame":
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.FameHallTalkP1:
                    Game.Events.FameHallTalkP1 = False
                    Game.Events.FameHallTalkP2 = True
                elif Game.Events.FameHallTalkP2:
                    Game.Events.FameHallTalkP2 = False
                    Game.Events.FameHallDisplay = True

        if Game.Events.Stage == "OverWorld" and Game.Player.rect.colliderect(Game.Kanto.OakBattle) and len(Game.Pokemon_Caught) == 150:
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.OakFightCutscene:
                    Game.Events.OakFightCutscene = False
                    Game.Events.OakFight = True
                elif Game.Events.OakFightAftermath:
                    Game.Player_Pause = False
                    Game.Events.OakFightAftermath = False
                    Game.Kanto.OverworldCamera.remove(Game.Kanto.BattlerOak)
                    Game.Player.Add_Pokemon(Pokemon("Mew",73,["Psychic","Metronome","Thunderbolt","Toxic"],Game.PlayerName,"Mew"))
                    Game.AddPokeDex("Mew",True)

        if Game.Events.Stage == "CEMansionF3" and Game.Player.rect.colliderect(Game.Kanto.Creator.rect) and len(Game.Pokemon_Caught) == 151 and not Game.Events.CFightDone:
            if e.type == pygame.KEYDOWN and (e.key == pygame.K_LSHIFT or e.key == pygame.K_RSHIFT):
                if Game.Events.CFightCutscene:
                    Game.Events.CFightCutscene = False
                    Game.Events.CFight = True
                elif Game.Events.CFightAftermath:
                    Game.Player_Pause = False
                    Game.Events.CFightAftermath = False
                    Game.Events.CFightDone = True


    
    SCREEN.fill("Black")
    Game.Draw()
    pygame.display.update()
    Game.Player.Search= False
    clock.tick(120)